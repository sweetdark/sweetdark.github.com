<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mario's Blog]]></title>
  <link href="http://sweetdark.github.com/atom.xml" rel="self"/>
  <link href="http://sweetdark.github.com/"/>
  <updated>2013-06-20T22:59:43+08:00</updated>
  <id>http://sweetdark.github.com/</id>
  <author>
    <name><![CDATA[Mario]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[opengl step1]]></title>
    <link href="http://sweetdark.github.com/blog/2013/06/20/ogl-step1/"/>
    <updated>2013-06-20T21:54:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/06/20/ogl-step1</id>
    <content type="html"><![CDATA[<h1>背景</h1>

<p>Opengl指南里没有任何API是用于创建窗体和操作窗体的。现代的视窗系统都支持OpenGl的上下文与系统进行绑定。在X Window系统中的接口被命名为GLX。比如Windows的WGL，MacOs的CGL。直接调用这些系统的函数去创建窗体十分繁琐，我们用更高级的接口来创建窗体，避免重复性的工作。
我们这里使用的是OpenGl utility library 简称“GLUT&#8221;.GLUT去操作窗体更加简便，同时它也是跨平台的。</p>

<h1>源代码走读</h1>

<blockquote><p>glutInit(&amp;argc, argv);</p></blockquote>

<p>这里初始化GLUT，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">glutInitDisplayMode</span><span class="p">(</span><span class="n">GLUT_DOUBLE</span> <span class="o">|</span> <span class="n">GLUT_RGBA</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们配置一些GLUT的选项。GLUT_DOUBLE开启双缓冲。GLUT_RGBA代表颜色的格式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">glutInitWindowSize</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">768</span><span class="p">);</span>
</span><span class='line'><span class="n">glutInitWindowPosition</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="n">glutCreateWindow</span><span class="p">(</span><span class="s">&quot;Tutorial 01&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些调用指定窗体的参数，并创建它</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">glutDisplayFunc</span><span class="p">(</span><span class="n">RenderSceneCB</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>大多数的窗体系统都是通过回调函数来交互的。GLUT处理与底层系统的交互。在这里我们仅需要一个主回调函数。这个函数会在GLUT的内部循环不断地调用。</p>

<p><em>未完待续&#8230;.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[less pepole]]></title>
    <link href="http://sweetdark.github.com/blog/2013/06/17/less-pepole/"/>
    <updated>2013-06-17T21:51:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/06/17/less-pepole</id>
    <content type="html"><![CDATA[<p>我突然有一个简单的愿望：我想当少数人，而不是和大多数人一样。大多数人都在玩微博，微信，聊QQ。 我不想和他们一样。我要走自己的路。或许我可以当一个山顶洞人。</p>

<p>越来越明白什么对自己是重要的，什么事情是自己应该去做的。做事之前要问应不应该做，而不是可以不可以做。什么事都可以做，但并不是什么事都应该去做。有意义的事，重要的事才是应该去做的。</p>

<p>今天看到一篇文章说懒惰有三种形式：</p>

<blockquote><p>我们说懒惰有三种。第一种，整天就是吃和睡。第二种，是告诉自己，“有一类人，就像我这种，是永远管理不好自己的。”在佛教思想中，这种懒惰会让你认为努力也是白费的，你永远无法获得精神上的救赎。无自信会让你打消任何企图努力一下的念头。而这第三种就是，把生命浪费在不是最重要的事情上，总是不从解决事情最本质的问题入手。所有的时间都在想办法解决次要问题，一个接一个，永远没有尽头，就像湖面涟漪的水纹。你在告诉自己，一旦完成了这个或那个，你将会去做一些更有意义的事情。</p></blockquote>


<p>我觉得第三种是费力不讨好。我拒绝者三种形式的懒惰。我要坚定地相信自己。我总觉得自己太浮躁了，所以我喜欢阅读一些佛经。佛经可以让我静心地去做事情。我也很喜欢老子。
{”
Nature does not hurry, yet everything is accomplished ——Lao Tzu
“}</p>

<p>戒躁专心地去做事情是目前我最应该做的事。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[agg渲染内存]]></title>
    <link href="http://sweetdark.github.com/blog/2013/04/28/agg/"/>
    <updated>2013-04-28T07:32:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/04/28/agg</id>
    <content type="html"><![CDATA[<p>一、渲染内存
在所有的agg控制台的例子中都使用了 p256的格式，即RGB格式，即每个字节存储一个颜色值，如下图所示的RGB_buffer的内存工作区。
<img src="http://i.imgur.com/nNA1NsK.png"></p>

<p>二、源代码
rendering_buffer.h
文件中 rendering_buffer有两种实现方式。
可以根据你的实际需要，去选择。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifdef AGG_RENDERING_BUFFER</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">AGG_RENDERING_BUFFER</span> <span class="n">rendering_buffer</span><span class="p">;</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="c1">//  typedef row_ptr_cache&lt;int8u&gt; rendering_buffer;</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">row_accessor</span><span class="o">&lt;</span><span class="n">int8u</span><span class="o">&gt;</span> <span class="n">rendering_buffer</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>提供的接口很简单都是直接访问内存的操作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//-------------------------------------------------------------------</span>
</span><span class='line'><span class="n">row_accessor</span><span class="p">()</span> <span class="o">:</span>
</span><span class='line'>  <span class="n">m_buf</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>  <span class="n">m_start</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>  <span class="n">m_width</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>  <span class="n">m_height</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>  <span class="n">m_stride</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//-------------------------------------------------------------------- 初始化 </span>
</span><span class='line'><span class="n">row_accessor</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">buf</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="n">width</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="n">height</span><span class="p">,</span> <span class="kt">int</span> <span class="n">stride</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>  <span class="n">m_buf</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>  <span class="n">m_start</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>  <span class="n">m_width</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>  <span class="n">m_height</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>  <span class="n">m_stride</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">attach</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">stride</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//--------------------------------------------------------------------</span>
</span><span class='line'><span class="kt">void</span> <span class="n">attach</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">buf</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="n">width</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="n">height</span><span class="p">,</span> <span class="kt">int</span> <span class="n">stride</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="n">m_buf</span> <span class="o">=</span> <span class="n">m_start</span> <span class="o">=</span> <span class="n">buf</span><span class="p">;</span>
</span><span class='line'>     <span class="n">m_width</span> <span class="o">=</span> <span class="n">width</span><span class="p">;</span>
</span><span class='line'>     <span class="n">m_height</span> <span class="o">=</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'>     <span class="n">m_stride</span> <span class="o">=</span> <span class="n">stride</span><span class="p">;</span>
</span><span class='line'>     <span class="k">if</span><span class="p">(</span><span class="n">stride</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>          <span class="n">m_start</span> <span class="o">=</span> <span class="n">m_buf</span> <span class="o">-</span> <span class="kt">int</span><span class="p">(</span><span class="n">height</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">stride</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//--------------------------------------------------------------------</span>
</span><span class='line'><span class="n">AGG_INLINE</span>       <span class="n">T</span><span class="o">*</span> <span class="n">buf</span><span class="p">()</span>          <span class="p">{</span> <span class="k">return</span> <span class="n">m_buf</span><span class="p">;</span>    <span class="p">}</span>
</span><span class='line'><span class="n">AGG_INLINE</span> <span class="k">const</span> <span class="n">T</span><span class="o">*</span> <span class="n">buf</span><span class="p">()</span>    <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_buf</span><span class="p">;</span>    <span class="p">}</span>
</span><span class='line'><span class="n">AGG_INLINE</span> <span class="kt">unsigned</span> <span class="n">width</span><span class="p">()</span>  <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_width</span><span class="p">;</span>  <span class="p">}</span>
</span><span class='line'><span class="n">AGG_INLINE</span> <span class="kt">unsigned</span> <span class="n">height</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_height</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="n">AGG_INLINE</span> <span class="kt">int</span>      <span class="n">stride</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_stride</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="n">AGG_INLINE</span> <span class="kt">unsigned</span> <span class="n">stride_abs</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">m_stride</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="kt">unsigned</span><span class="p">(</span><span class="o">-</span><span class="n">m_stride</span><span class="p">)</span> <span class="o">:</span> <span class="kt">unsigned</span><span class="p">(</span><span class="n">m_stride</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//--------------------------------------------------------------------</span>
</span><span class='line'>  <span class="n">AGG_INLINE</span>       <span class="n">T</span><span class="o">*</span> <span class="n">row_ptr</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">unsigned</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">m_start</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">m_stride</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>  <span class="n">AGG_INLINE</span>       <span class="n">T</span><span class="o">*</span> <span class="n">row_ptr</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span><span class="p">)</span>       <span class="p">{</span> <span class="k">return</span> <span class="n">m_start</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">m_stride</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">AGG_INLINE</span> <span class="k">const</span> <span class="n">T</span><span class="o">*</span> <span class="n">row_ptr</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_start</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">m_stride</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">AGG_INLINE</span> <span class="n">row_data</span> <span class="n">row</span>    <span class="p">(</span><span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">row_data</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">m_width</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">row_ptr</span><span class="p">(</span><span class="n">y</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//--------------------------------------------------------------------</span>
</span><span class='line'><span class="n">template</span><span class="o">&lt;</span><span class="n">class</span> <span class="n">RenBuf</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">copy_from</span><span class="p">(</span><span class="k">const</span> <span class="n">RenBuf</span><span class="o">&amp;</span> <span class="n">src</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="n">h</span> <span class="o">=</span> <span class="n">height</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">src</span><span class="p">.</span><span class="n">height</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">h</span><span class="p">)</span> <span class="n">h</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="n">height</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="n">l</span> <span class="o">=</span> <span class="n">stride_abs</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">src</span><span class="p">.</span><span class="n">stride_abs</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">l</span><span class="p">)</span> <span class="n">l</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="n">stride_abs</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">l</span> <span class="o">*=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="n">w</span> <span class="o">=</span> <span class="n">width</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">h</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">memcpy</span><span class="p">(</span><span class="n">row_ptr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">),</span> <span class="n">src</span><span class="p">.</span><span class="n">row_ptr</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="n">l</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//------------------------------用某个颜色值填充内存</span>
</span><span class='line'><span class="kt">void</span> <span class="n">clear</span><span class="p">(</span><span class="n">T</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="n">w</span> <span class="o">=</span> <span class="n">width</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="n">stride</span> <span class="o">=</span> <span class="n">stride_abs</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">height</span><span class="p">();</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">T</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="n">row_ptr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">stride</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="o">*</span><span class="n">p</span><span class="o">++</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>三、例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;agg_renderer_base.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;agg_pixfmt_rgb.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;agg_rendering_buffer.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span><span class="p">{</span>
</span><span class='line'>     <span class="n">frame_width</span> <span class="o">=</span> <span class="mi">320</span><span class="p">,</span>
</span><span class='line'>     <span class="n">frame_height</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">bool</span> <span class="nf">write_to_ppm</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span>
</span><span class='line'>                      <span class="kt">int</span> <span class="n">width</span><span class="p">,</span>
</span><span class='line'>                      <span class="kt">int</span> <span class="n">height</span><span class="p">,</span>
</span><span class='line'>                      <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fileName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="kt">FILE</span> <span class="o">*</span><span class="n">fd</span> <span class="o">=</span> <span class="o">::</span><span class="n">fopen</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="s">&quot;w+&quot;</span><span class="p">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">fd</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="o">::</span><span class="n">fprintf</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="s">&quot;P6</span><span class="se">\n</span><span class="s">%d, %d</span><span class="se">\n</span><span class="s">255&quot;</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'>          <span class="o">::</span><span class="n">fwrite</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">width</span> <span class="o">*</span> <span class="n">height</span> <span class="o">*</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">fd</span><span class="p">);</span>
</span><span class='line'>          <span class="o">::</span><span class="n">fclose</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">typedef</span> <span class="n">agg</span><span class="o">::</span><span class="n">pixfmt_rgb24</span>          <span class="n">pixfmt_type</span><span class="p">;</span>
</span><span class='line'>     <span class="k">typedef</span> <span class="n">agg</span><span class="o">::</span><span class="n">renderer_base</span><span class="o">&lt;</span><span class="n">agg</span><span class="o">::</span><span class="n">pixfmt_rgb24</span><span class="o">&gt;</span> <span class="n">renbase_type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">enum</span> <span class="p">{</span><span class="n">bytes_per_pixel</span> <span class="o">=</span> <span class="mi">3</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>     <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span> <span class="o">=</span> <span class="n">new</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="p">[</span><span class="n">frame_width</span> <span class="o">*</span> <span class="n">frame_height</span> <span class="o">*</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>     <span class="c1">//memset(buffer, 255, frame_height * frame_width * 3);</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">agg</span><span class="o">::</span><span class="n">rendering_buffer</span> <span class="n">rbuf</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">frame_width</span><span class="p">,</span> <span class="n">frame_height</span><span class="p">,</span> <span class="n">frame_width</span> <span class="o">*</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">pixfmt_type</span> <span class="n">pixf</span><span class="p">(</span><span class="n">rbuf</span><span class="p">);</span>
</span><span class='line'>     <span class="n">renbase_type</span> <span class="n">rbase</span><span class="p">(</span><span class="n">pixf</span><span class="p">);</span>
</span><span class='line'>     <span class="n">renbase_type</span><span class="o">::</span><span class="n">color_type</span> <span class="n">clear_color</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span>
</span><span class='line'>     <span class="n">rbase</span><span class="p">.</span><span class="n">clear</span><span class="p">(</span><span class="n">clear_color</span><span class="p">);</span> <span class="c1">//使用此颜色画背景色。</span>
</span><span class='line'>     <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rbuf</span><span class="p">.</span><span class="n">height</span><span class="p">()</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="n">rbuf</span><span class="p">.</span><span class="n">row_ptr</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">//rgb三个像素的跨度，所以乘以三来取</span>
</span><span class='line'>          <span class="o">*</span><span class="n">p</span><span class="o">++</span> <span class="o">=</span> <span class="mi">127</span><span class="p">;</span> <span class="c1">//R</span>
</span><span class='line'>          <span class="o">*</span><span class="n">p</span><span class="o">++</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span> <span class="c1">//G</span>
</span><span class='line'>          <span class="o">*</span><span class="n">p</span><span class="o">++</span> <span class="o">=</span> <span class="mi">98</span><span class="p">;</span> <span class="c1">//B</span>
</span><span class='line'>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="n">write_to_ppm</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">frame_width</span><span class="p">,</span> <span class="n">frame_height</span><span class="p">,</span> <span class="s">&quot;agg_test.ppm&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">delete</span> <span class="p">[]</span><span class="n">buffer</span><span class="p">;</span>
</span><span class='line'>     <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>打开此文件，效果如下。
<img src="http://i.imgur.com/5zmUntx.png"></p>

<p>rendering_buffer本身不知道内存中的像素格式的任何信息，都是通过纯手工来设置每一个自己的值。提供了一系列访问内存的方法。它只是保存了一个数组，数组的元素指向没一行的开头。申请和释放存储区是使用者的责任，你可以用任何形式来申请和释放内存。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[agg例子解析]]></title>
    <link href="http://sweetdark.github.com/blog/2013/04/25/agg/"/>
    <updated>2013-04-25T07:20:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/04/25/agg</id>
    <content type="html"><![CDATA[<p>aa_demo</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;agg_basics.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;agg_rendering_buffer.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;agg_rasterizer_scanline_aa.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;agg_renderer_scanline.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;agg_scanline_u.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;platform/agg_platform_support.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;ctrl/agg_slider_ctrl.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;ctrl/agg_cbox_ctrl.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;agg_pixfmt_rgb.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">flip_y_e</span> <span class="p">{</span><span class="n">flip_y</span> <span class="o">=</span> <span class="nb">true</span><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">namespace</span> <span class="n">agg</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">class</span> <span class="n">square</span>   <span class="c1">//正方形</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="nl">public:</span>
</span><span class='line'>      <span class="n">square</span><span class="p">(</span><span class="kt">double</span> <span class="n">size</span><span class="p">)</span> <span class="o">:</span> <span class="n">m_size</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">template</span><span class="o">&lt;</span><span class="n">class</span> <span class="n">Rasterizer</span><span class="p">,</span> <span class="n">class</span> <span class="n">Scanline</span><span class="p">,</span> <span class="n">class</span> <span class="n">Renderer</span><span class="p">,</span> <span class="n">class</span> <span class="n">ColorT</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="kt">void</span> <span class="n">draw</span><span class="p">(</span><span class="n">Rasterizer</span><span class="o">&amp;</span> <span class="n">ras</span><span class="p">,</span> <span class="n">Scanline</span><span class="o">&amp;</span> <span class="n">sl</span><span class="p">,</span> <span class="n">Renderer</span><span class="o">&amp;</span> <span class="n">ren</span><span class="p">,</span> <span class="n">ColorT</span> <span class="n">color</span><span class="p">,</span>
</span><span class='line'>          <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">ras</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span>  <span class="c1">//光栅化器的重置</span>
</span><span class='line'>          <span class="c1">//画正方形的图形，只是一些列的命令还未渲染，着色</span>
</span><span class='line'>          <span class="n">ras</span><span class="p">.</span><span class="n">move_to_d</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">m_size</span><span class="p">,</span>        <span class="n">y</span><span class="o">*</span><span class="n">m_size</span><span class="p">);</span>
</span><span class='line'>          <span class="n">ras</span><span class="p">.</span><span class="n">line_to_d</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">m_size</span><span class="o">+</span><span class="n">m_size</span><span class="p">,</span> <span class="n">y</span><span class="o">*</span><span class="n">m_size</span><span class="p">);</span>
</span><span class='line'>          <span class="n">ras</span><span class="p">.</span><span class="n">line_to_d</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">m_size</span><span class="o">+</span><span class="n">m_size</span><span class="p">,</span> <span class="n">y</span><span class="o">*</span><span class="n">m_size</span><span class="o">+</span><span class="n">m_size</span><span class="p">);</span>
</span><span class='line'>          <span class="n">ras</span><span class="p">.</span><span class="n">line_to_d</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">m_size</span><span class="p">,</span>        <span class="n">y</span><span class="o">*</span><span class="n">m_size</span><span class="o">+</span><span class="n">m_size</span><span class="p">);</span>
</span><span class='line'>          <span class="c1">//渲染</span>
</span><span class='line'>          <span class="n">agg</span><span class="o">::</span><span class="n">render_scanlines_aa_solid</span><span class="p">(</span><span class="n">ras</span><span class="p">,</span> <span class="n">sl</span><span class="p">,</span> <span class="n">ren</span><span class="p">,</span> <span class="n">color</span><span class="p">);</span>
</span><span class='line'>          <span class="n">count</span><span class="o">++</span><span class="p">;</span>  <span class="c1">//计数画了多少个</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">private:</span>
</span><span class='line'>      <span class="kt">double</span> <span class="n">m_size</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//自定义的渲染器,实现固定的几个方法。</span>
</span><span class='line'>  <span class="n">template</span><span class="o">&lt;</span><span class="n">class</span> <span class="n">Renderer</span><span class="o">&gt;</span> <span class="n">class</span> <span class="n">renderer_enlarged</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="nl">public:</span>
</span><span class='line'>      <span class="n">renderer_enlarged</span><span class="p">(</span><span class="n">Renderer</span><span class="o">&amp;</span> <span class="n">ren</span><span class="p">,</span> <span class="kt">double</span> <span class="n">size</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>        <span class="n">m_ren</span><span class="p">(</span><span class="n">ren</span><span class="p">),</span>
</span><span class='line'>            <span class="n">m_square</span><span class="p">(</span><span class="n">size</span><span class="p">),</span>
</span><span class='line'>            <span class="n">m_size</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>        <span class="c1">//--------------------------------------------------------------------</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">color</span><span class="p">(</span><span class="n">rgba8</span> <span class="n">c</span><span class="p">)</span> <span class="p">{</span> <span class="n">m_color</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="c1">//--------------------------------------------------------------------</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">prepare</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>        <span class="c1">//--------------------------------------------------------------------渲染</span>
</span><span class='line'>        <span class="n">template</span><span class="o">&lt;</span><span class="n">class</span> <span class="n">Scanline</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">render</span><span class="p">(</span><span class="k">const</span> <span class="n">Scanline</span><span class="o">&amp;</span> <span class="n">sl</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">sl</span><span class="p">.</span><span class="n">y</span><span class="p">();</span>  <span class="c1">//y坐标</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="n">num_spans</span> <span class="o">=</span> <span class="n">sl</span><span class="p">.</span><span class="n">num_spans</span><span class="p">();</span>  <span class="c1">//跨度</span>
</span><span class='line'>            <span class="kr">typename</span> <span class="n">Scanline</span><span class="o">::</span><span class="n">const_iterator</span> <span class="n">span</span> <span class="o">=</span> <span class="n">sl</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">do</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">span</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">;</span>  <span class="c1">//起始的x坐标</span>
</span><span class='line'>                <span class="k">const</span> <span class="kr">typename</span> <span class="n">Scanline</span><span class="o">::</span><span class="n">cover_type</span><span class="o">*</span> <span class="n">covers</span> <span class="o">=</span> <span class="n">span</span><span class="o">-&gt;</span><span class="n">covers</span><span class="p">;</span> <span class="c1">//覆盖值</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">num_pix</span> <span class="o">=</span> <span class="n">span</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">do</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'><span class="c1">//                     int a = (*covers++ * m_color.a) &gt;&gt; 8;</span>
</span><span class='line'>                  
</span><span class='line'>                    <span class="n">m_square</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">m_ras</span><span class="p">,</span> <span class="n">m_sl</span><span class="p">,</span> <span class="n">m_ren</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">rgba8</span><span class="p">(</span><span class="n">m_color</span><span class="p">.</span><span class="n">r</span><span class="p">,</span> <span class="n">m_color</span><span class="p">.</span><span class="n">g</span><span class="p">,</span> <span class="n">m_color</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="n">m_color</span><span class="p">.</span><span class="n">a</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>  <span class="c1">//画一个正方形</span>
</span><span class='line'>                    <span class="o">++</span><span class="n">x</span><span class="p">;</span> <span class="c1">//画下一个正方形</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">while</span><span class="p">(</span><span class="o">--</span><span class="n">num_pix</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">while</span><span class="p">(</span><span class="o">--</span><span class="n">num_spans</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">private:</span>
</span><span class='line'>      <span class="n">rasterizer_scanline_aa</span><span class="o">&lt;&gt;</span> <span class="n">m_ras</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">//容器 ,在光栅化器rasterizer_scanline_aa和渲染器scanline_render之间多了一个容器。负责信息的转换。</span>
</span><span class='line'>      <span class="c1">//由很多水平不想交的span组成。这些span按x排序。</span>
</span><span class='line'>      <span class="n">scanline_u8</span> <span class="n">m_sl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Renderer</span><span class="o">&amp;</span>   <span class="n">m_ren</span><span class="p">;</span>
</span><span class='line'>      <span class="n">square</span>      <span class="n">m_square</span><span class="p">;</span>
</span><span class='line'>      <span class="n">rgba8</span>       <span class="n">m_color</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">double</span>      <span class="n">m_size</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">the_application</span> <span class="o">:</span> <span class="n">public</span> <span class="n">agg</span><span class="o">::</span><span class="n">platform_support</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">m_x</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">m_y</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">m_dx</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">m_dy</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span>    <span class="n">m_idx</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">agg</span><span class="o">::</span><span class="n">slider_ctrl</span><span class="o">&lt;</span><span class="n">agg</span><span class="o">::</span><span class="n">rgba8</span><span class="o">&gt;</span> <span class="n">m_slider1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">agg</span><span class="o">::</span><span class="n">slider_ctrl</span><span class="o">&lt;</span><span class="n">agg</span><span class="o">::</span><span class="n">rgba8</span><span class="o">&gt;</span> <span class="n">m_slider2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">public:</span>
</span><span class='line'>  <span class="n">the_application</span><span class="p">(</span><span class="n">agg</span><span class="o">::</span><span class="n">pix_format_e</span> <span class="n">format</span><span class="p">,</span> <span class="n">bool</span> <span class="n">flip_y</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>    <span class="n">agg</span><span class="o">::</span><span class="n">platform_support</span><span class="p">(</span><span class="n">format</span><span class="p">,</span> <span class="n">flip_y</span><span class="p">),</span>
</span><span class='line'>  <span class="n">m_slider1</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">600</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="o">!</span><span class="n">flip_y</span><span class="p">),</span>
</span><span class='line'>  <span class="n">m_slider2</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="mi">10</span><span class="o">+</span><span class="mi">20</span><span class="p">,</span> <span class="mi">600</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="o">+</span><span class="mi">20</span><span class="p">,</span> <span class="o">!</span><span class="n">flip_y</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">m_idx</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="n">m_x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">57</span><span class="p">;</span> <span class="n">m_y</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>      <span class="n">m_x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">369</span><span class="p">;</span>    <span class="n">m_y</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">170</span><span class="p">;</span>
</span><span class='line'>      <span class="n">m_x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">143</span><span class="p">;</span>    <span class="n">m_y</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">310</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">add_ctrl</span><span class="p">(</span><span class="n">m_slider1</span><span class="p">);</span>
</span><span class='line'>      <span class="n">add_ctrl</span><span class="p">(</span><span class="n">m_slider2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">m_slider1</span><span class="p">.</span><span class="n">range</span><span class="p">(</span><span class="mf">8.0</span><span class="p">,</span> <span class="mf">100.0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">m_slider1</span><span class="p">.</span><span class="n">num_steps</span><span class="p">(</span><span class="mi">23</span><span class="p">);</span>
</span><span class='line'>      <span class="n">m_slider1</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="mf">32.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">m_slider2</span><span class="p">.</span><span class="n">range</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">m_slider2</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">m_slider1</span><span class="p">.</span><span class="n">label</span><span class="p">(</span><span class="s">&quot;Pixel size = %1.0f&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">m_slider2</span><span class="p">.</span><span class="n">label</span><span class="p">(</span><span class="s">&quot;Gamma = %4.3f&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">m_slider1</span><span class="p">.</span><span class="n">no_transform</span><span class="p">();</span>
</span><span class='line'>      <span class="n">m_slider1</span><span class="p">.</span><span class="n">no_transform</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">the_application</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">virtual</span> <span class="kt">void</span> <span class="n">on_init</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">virtual</span> <span class="kt">void</span> <span class="n">on_draw</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">agg</span><span class="o">::</span><span class="n">renderer_base</span><span class="o">&lt;</span><span class="n">agg</span><span class="o">::</span><span class="n">pixfmt_bgr24</span><span class="o">&gt;</span> <span class="n">ren_base</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">agg</span><span class="o">::</span><span class="n">pixfmt_bgr24</span> <span class="n">pixf</span><span class="p">(</span><span class="n">rbuf_window</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ren_base</span> <span class="n">ren</span><span class="p">(</span><span class="n">pixf</span><span class="p">);</span>  <span class="c1">//基础渲染器</span>
</span><span class='line'>      <span class="n">agg</span><span class="o">::</span><span class="n">scanline_u8</span> <span class="n">sl</span><span class="p">;</span>  <span class="c1">//扫描线容器</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ren</span><span class="p">.</span><span class="n">clear</span><span class="p">(</span><span class="n">agg</span><span class="o">::</span><span class="n">rgba</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span> <span class="c1">//设置背景色</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">agg</span><span class="o">::</span><span class="n">rasterizer_scanline_aa</span><span class="o">&lt;&gt;</span> <span class="n">ras</span><span class="p">;</span> <span class="c1">//光栅化类</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">int</span> <span class="n">size_mul</span> <span class="o">=</span> <span class="kt">int</span><span class="p">(</span><span class="n">m_slider1</span><span class="p">.</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ras</span><span class="p">.</span><span class="n">gamma</span><span class="p">(</span><span class="n">agg</span><span class="o">::</span><span class="n">gamma_power</span><span class="p">(</span><span class="n">m_slider2</span><span class="p">.</span><span class="n">value</span><span class="p">()));</span>  <span class="c1">//设置gamma值</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">agg</span><span class="o">::</span><span class="n">renderer_enlarged</span><span class="o">&lt;</span><span class="n">ren_base</span><span class="o">&gt;</span> <span class="n">ren_en</span><span class="p">(</span><span class="n">ren</span><span class="p">,</span> <span class="n">size_mul</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ras</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">//画一个大的三角形的范围，然后再用正方形填充</span>
</span><span class='line'>      <span class="n">ras</span><span class="p">.</span><span class="n">move_to_d</span><span class="p">(</span><span class="n">m_x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="n">size_mul</span><span class="p">,</span> <span class="n">m_y</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="n">size_mul</span><span class="p">);</span> <span class="c1">//从左下角为坐标开始</span>
</span><span class='line'>      <span class="n">ras</span><span class="p">.</span><span class="n">line_to_d</span><span class="p">(</span><span class="n">m_x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="n">size_mul</span><span class="p">,</span> <span class="n">m_y</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="n">size_mul</span><span class="p">);</span>
</span><span class='line'>      <span class="n">ras</span><span class="p">.</span><span class="n">line_to_d</span><span class="p">(</span><span class="n">m_x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">/</span><span class="n">size_mul</span><span class="p">,</span> <span class="n">m_y</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">/</span><span class="n">size_mul</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//设置渲染器，渲染的颜色，用渲染指令替顶点源着色</span>
</span><span class='line'>      <span class="n">ren_en</span><span class="p">.</span><span class="n">color</span><span class="p">(</span><span class="n">agg</span><span class="o">::</span><span class="n">rgba8</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">));</span>
</span><span class='line'>      <span class="n">agg</span><span class="o">::</span><span class="n">render_scanlines</span><span class="p">(</span><span class="n">ras</span><span class="p">,</span> <span class="n">sl</span><span class="p">,</span> <span class="n">ren_en</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">char</span> <span class="n">tst</span><span class="p">[</span><span class="mi">255</span><span class="p">];</span>
</span><span class='line'>      <span class="o">::</span><span class="n">itoa</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">tst</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>      <span class="n">m_slider1</span><span class="p">.</span><span class="n">label</span><span class="p">(</span><span class="n">tst</span><span class="p">);</span>
</span><span class='line'>      <span class="n">agg</span><span class="o">::</span><span class="n">render_ctrl</span><span class="p">(</span><span class="n">ras</span><span class="p">,</span> <span class="n">sl</span><span class="p">,</span> <span class="n">ren</span><span class="p">,</span> <span class="n">m_slider1</span><span class="p">);</span>
</span><span class='line'>      <span class="n">agg</span><span class="o">::</span><span class="n">render_ctrl</span><span class="p">(</span><span class="n">ras</span><span class="p">,</span> <span class="n">sl</span><span class="p">,</span> <span class="n">ren</span><span class="p">,</span> <span class="n">m_slider2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">virtual</span> <span class="kt">void</span> <span class="n">on_mouse_button_down</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="n">flags</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">agg</span><span class="o">::</span><span class="n">mouse_left</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="kt">unsigned</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">m_x</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">*</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">m_x</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">+</span> <span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="n">m_y</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">*</span> <span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="n">m_y</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">)</span> <span class="o">&lt;</span> <span class="mf">10.0</span><span class="p">)</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">m_dx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="n">m_x</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>                  <span class="n">m_dy</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="n">m_y</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>                  <span class="n">m_idx</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">agg</span><span class="o">::</span><span class="n">point_in_triangle</span><span class="p">(</span><span class="n">m_x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">m_y</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>                  <span class="n">m_x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">m_y</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                  <span class="n">m_x</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">m_y</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
</span><span class='line'>                  <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">m_dx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="n">m_x</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>                  <span class="n">m_dy</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="n">m_y</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>                  <span class="n">m_idx</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">virtual</span> <span class="kt">void</span> <span class="n">on_mouse_move</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="n">flags</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">agg</span><span class="o">::</span><span class="n">mouse_left</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">m_idx</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="kt">double</span> <span class="n">dx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="n">m_dx</span><span class="p">;</span>
</span><span class='line'>              <span class="kt">double</span> <span class="n">dy</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="n">m_dy</span><span class="p">;</span>
</span><span class='line'>              <span class="n">m_x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-=</span> <span class="n">m_x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">dx</span><span class="p">;</span>
</span><span class='line'>              <span class="n">m_y</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-=</span> <span class="n">m_y</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">dy</span><span class="p">;</span>
</span><span class='line'>              <span class="n">m_x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-=</span> <span class="n">m_x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">dx</span><span class="p">;</span>
</span><span class='line'>              <span class="n">m_y</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-=</span> <span class="n">m_y</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">dy</span><span class="p">;</span>
</span><span class='line'>              <span class="n">m_x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">dx</span><span class="p">;</span>
</span><span class='line'>              <span class="n">m_y</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">dy</span><span class="p">;</span>
</span><span class='line'>              <span class="n">force_redraw</span><span class="p">();</span>
</span><span class='line'>              <span class="k">return</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">m_idx</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">m_x</span><span class="p">[</span><span class="n">m_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="n">m_dx</span><span class="p">;</span>
</span><span class='line'>              <span class="n">m_y</span><span class="p">[</span><span class="n">m_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="n">m_dy</span><span class="p">;</span>
</span><span class='line'>              <span class="n">force_redraw</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">on_mouse_button_up</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">virtual</span> <span class="kt">void</span> <span class="n">on_mouse_button_up</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="n">flags</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">m_idx</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">agg_main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">the_application</span> <span class="n">app</span><span class="p">(</span><span class="n">agg</span><span class="o">::</span><span class="n">pix_format_bgr24</span><span class="p">,</span> <span class="n">flip_y</span><span class="p">);</span>
</span><span class='line'>  <span class="n">app</span><span class="p">.</span><span class="n">caption</span><span class="p">(</span><span class="s">&quot;My first Example&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="mi">600</span><span class="p">,</span> <span class="mi">400</span><span class="p">,</span> <span class="n">agg</span><span class="o">::</span><span class="n">window_resize</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">app</span><span class="p">.</span><span class="n">run</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果图
<a href="http://imgur.com/eC5sCqa" title=""><img src="http://i.imgur.com/eC5sCqa.jpg" title="Hosted by imgur.com" alt="" /></a>
流程图
<a href="http://imgur.com/sHAd1Nu" title=""><img src="http://i.imgur.com/sHAd1Nu.jpg" title="Hosted by imgur.com" alt="" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[晨写]]></title>
    <link href="http://sweetdark.github.com/blog/2013/04/07/refrect/"/>
    <updated>2013-04-07T21:00:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/04/07/refrect</id>
    <content type="html"><![CDATA[<p>因为手受伤了，一直没有进行晨写。昨天晚上突发奇想，要继续晨写事业。于是昨晚跑到文具店，去买了一本活页的笔记本，准备今天早上就开始晨写。有很多方法可以记录想法，其中一些效率更高。最好的方法之一就是晨写。是作家惯用的技术。
规则如下：</p>

<p>1.晨写是早晨要做的第一件事————一起来就开始写。
2.至少写三页，手写。
3.不要审查删减你写的东西。不论优秀的还是陈腐的，只管写下来。
4.坚持天天写。</p>

<p>晨写让毫无防备的大脑倾倒想法。早上刚起床时，你还有没有那么清醒，潜意识仍然占主角。你可以直接连通R型思维。</p>

<p>今天早上起来写了两页。昨天晚上一时兴起，裸睡了。早上起来时候，也没穿裤子就披了一个外套就开始写，写了约半个小时，奋笔疾书啊，字潦草的不得了。写了整整两页纸，写到手痛。晨写+晨间日记+易筋经 早上需要花一个小时。</p>

<p>摘抄一点写的内容。</p>

<blockquote><p>虽然感觉自己是在乱写，想到什么就写什么。但乱写是我的本能。就让我的笔尖在纸面上快速的游走，直到擦出智慧的火花来。思绪就像流水一般涌出，源源不断。墨水在笔尖淌出，沾染了淡黄色的直面，形成一个个跳跃的文字，或美或丑，但放荡不羁。</p></blockquote>


<p><img src="http://b271.photo.store.qq.com/psb?/V132KGkX169tds/YbPWwPPGfHkTN6NvVt9dLxudyepeyCosDhY43u0wXCY!/b/dGKMkKFJCQAA&bo=3wEgAwAAAAABANo!"></p>

<p><img src="http://b274.photo.store.qq.com/psb?/V132KGkX169tds/K7mR*kr6hudyH4llw3M33KZ1LOhEgZ.9TtmZ7KTksKs!/b/dLjgW6O8BwAA&bo=3wEgAwAAAAABANo!"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随想]]></title>
    <link href="http://sweetdark.github.com/blog/2013/03/15/new-post/"/>
    <updated>2013-03-15T20:52:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/03/15/new-post</id>
    <content type="html"><![CDATA[<p>手恢复之后的第一篇博客。短短的一个月，感觉发了好多好多事情。坠入爱河，在爱河中沉醉。特别是这个星期，人有点魂不守舍的，对工作的影响还是蛮大的。第一次体验到这么深的爱，迷失了自我。还没调整好自己的心态，在工作的时候也会胡思乱想。这个星期一直在摸索和思考，如何去分配好自己的时间在工作和爱情上。我会很用心的去经营这段感情，爱你时一定要专心爱你，全身心的投入爱你。但我希望工作时也一样能够全身心的投入工作。当然不是你的问题，是我自己还没调整好罢了，需要摸索一段时间。</p>

<p>最近迷失在微博和知乎上，一直不停的刷。其实根本没这个必要，隔很长一段时间再去刷一下就好了。因为我的微博和知乎都关注的特别少，短时间内怎么刷都是那样。为了让自己戒了这个瘾下个星期就不上微博了。把上微博的时间用来学习和做重要的事情。知乎我也要控制一下，一天就中午和晚上刷一下就好。工作时间还是别上的好。最近时间被碎片化的很厉害。又有了微信和啪啪。所以要好好的管理一下自己的时间了。</p>

<p><embed src="http://www.xiami.com/widget/3946428_10671967_235_346_FF8719_494949_0/shufflePlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque"></embed></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[体验当下]]></title>
    <link href="http://sweetdark.github.com/blog/2013/03/06/new/"/>
    <updated>2013-03-06T22:42:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/03/06/new</id>
    <content type="html"><![CDATA[<p>我们把概念看的比事实重要。而概念是死的，事实是活的。一颗心如果充满着各种各样的概念，你的心就变死了。尊重事实，别被概念所蒙骗，别被教条所束缚。要有把概念和教条当成玩物的勇气。</p>

<p>我们脑海中有许许多多关于爱的概念，喜欢在他人身上套用，这无可厚非。但事实总是在变化着的。如果你死脑筋的执著那个概念，会给你带来痛苦。何不好好体验当下爱的感觉，而不是被你脑海中的概念所摆布。</p>

<p>当你在追求快乐的时候，说明你现在快乐。当你达到目的时候，你快乐了一阵子，就过去了，你开始懊恼为什么快乐总是消失的那么快。于是又去追寻下一个快乐，你又变得不快乐了。不要说我现在不快乐。有了房有了车就会快乐了。你当下就可以快乐，为什么还要等到有房有车呢。当下你就能获得快乐，如果不能一定是心出了问题。</p>

<p>过去的已经过去，未来真的存在吗。我不知道。未来只不过是自我的延伸和投射，你的想象，我执。当下才是最真实最重要，也可以是最美好的。你的心能安住于当下，也就减少了烦恼。你才能客观全面的看待事物，才能发现美。你的心像翻滚的江河，你无法倒影天空的美，无法倒影河边上的鲜花。心如止水，专注的做好当下的事，发现当下的美。有了方向要一步一步认真专心的走，过程比目的更重要。</p>

<p>专注于当下你可以把握事物瞬间的变化。我们的总认为某些事物是恒常的。当有一天书变黄了，你就心生苦恼书怎么突然就变黄了。当有一天，你照着镜子发现自己变老了，你又开始苦恼，怎么突然老了好多，其实你每一刻都在变老，只是你没有注意到罢了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[定]]></title>
    <link href="http://sweetdark.github.com/blog/2013/02/28/ding/"/>
    <updated>2013-02-28T21:27:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/02/28/ding</id>
    <content type="html"><![CDATA[<p>人的思绪总是漂浮在两种状态中，一是散乱，二是昏沉。普通人就在散乱和昏沉中度过一生，连一秒钟的定都达不到。因为平常极少反省，又少观察，故不能自知。散乱的思想像河流一样，一分一秒不停地在流。如何将念头止住唯一的方法就是修定。修定有许许多多的法门，其实就是一个方法“一念之间”。一念之间有八万四千烦恼，甚至更多。如何将这一念定住，使八万四千烦恼停止。</p>

<p>任何的思想，任何的情绪，中间都有空隙，可以用“观心”的方法发现这个空隙。能够找到心中心波起伏的空隙，则念头可以转变，较容易获得清明安定。如果把一空隙的时间延长再延长，而停留再在这种状态，则心境变得安定宁静。既无啊悲哀也无忧伤，安详平静。净土宗的念佛，禅宗的打坐，天台宗的打坐，都是在求定都是要把连续的念头打断，集中于一，以达到一心不乱的境界。定的法门很多，没有一个法门适用于任何人，要找到适合自己的法门。至于练气，练瑜伽，观呼吸，听声音，也都是一种方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重要的事]]></title>
    <link href="http://sweetdark.github.com/blog/2013/02/26/impo/"/>
    <updated>2013-02-26T10:12:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/02/26/impo</id>
    <content type="html"><![CDATA[<p><a href="http://imgur.com/yndq6Hp"><img src="http://i.imgur.com/yndq6Hp.jpg?1" alt="" title="Hosted by imgur.com" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2-17日记]]></title>
    <link href="http://sweetdark.github.com/blog/2013/02/17/newday/"/>
    <updated>2013-02-17T21:41:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/02/17/newday</id>
    <content type="html"><![CDATA[<p>今天6点多就醒来了，还是很困，有蚊子一直在耳边“嗡嗡嗡”，睡不着了。起来闭眼静坐了一会。然后穿上衣服，开始晨写，想到啥就写，不要去评判和思考。晨写的目的是为了锻炼R型思维，锻炼自己的直觉。按照书本上的是要写三页的，但显然我没那么多充裕的时间，就花了15分钟，不停的写。虽然写的乱七八糟，但感觉还是蛮爽的，好像在山谷里大喊，把所有心声释放出去一样。</p>

<p>春节在家期间，有很多事，好久没有进行禅修了。今天刻意提醒自己，放慢做事情的速度，练正念。提前点出门，以较慢的速度走去公司。这个过程，不去思考任何事情和东西，仅仅是感觉脚踩在地上的感觉，那种力从脚掌传上来。有眼睛去看周围的世界，飘落的树叶，路边的花，呼啸而过的公交车，女孩脸上的笑。</p>

<p>生活中，我们总是忘记了去细心感受。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随笔]]></title>
    <link href="http://sweetdark.github.com/blog/2013/02/05/article/"/>
    <updated>2013-02-05T18:47:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/02/05/article</id>
    <content type="html"><![CDATA[<p>思念似水，</p>

<p>流入我的心房。</p>

<p>拧开心房的阀门，</p>

<p>用晶莹的玻璃瓶承装，愿永久存放。</p>

<p>想念的是你，你在我心中。我愿写成文字，用博客承载思念。</p>

<blockquote><p>你未看此花时，此花与汝心同归于寂；你来看此花时，此花颜色一时明白起来，便知此花不在你的心外。</p><footer><strong>王明阳</strong> <cite></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聚会]]></title>
    <link href="http://sweetdark.github.com/blog/2013/01/27/meet/"/>
    <updated>2013-01-27T21:31:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/01/27/meet</id>
    <content type="html"><![CDATA[<p>今天约了经文和海哥去看电影《007：大破天幕杀机》，很好看的一部电影，刺激。看完电影去茶楼吃饭。边吃边聊，聊的都是工作上的事情。都在抱怨自己工作上的不如意，公司抠门什么之类的。听他们两这么说，我也变得悲观起来了。生活不就是如此吗，不如意的事十有八九，其实很多IT公司都这样，换了未必就会更好。就这么谈论着，我忘记了刚才才享受了美妙的电影。直到我搭上公交时，才意识到自己刚才挺消沉的。不想让自己继续消沉下去，慢慢的调整自己的心态。生活还是充满着乐趣的，要善于去发现和感受。以后要是在遇到这类谈话，自己应该多多鼓励别人才是，而不是顺着他们消沉下去，对大家的影响都不好。</p>

<p>我很知足了，家庭幸福平安，又有一堆朋友，他们都是善良的人，对我也很好。只要好好地去工作，好好的去爱一个人，好好地生活就很幸福。</p>

<p>谢谢海哥买了电影票，经文请吃饭。下次轮到自己请客了。<strong>一起加油吧</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何阅读一本书（转）]]></title>
    <link href="http://sweetdark.github.com/blog/2013/01/24/method/"/>
    <updated>2013-01-24T20:36:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/01/24/method</id>
    <content type="html"><![CDATA[<p>原文地址：http://book.douban.com/annotation/18688438/</p>

<p><img src="http://thumbnails101.imagebam.com/23379/7e5dc2233788854.jpg"></p>

<p>1）精力分配法</p>

<p>70%的书，略读，翻翻目录挑重点读。（做补充）</p>

<p>20%的书，通读，抓中心，形成个体系架构。</p>

<p>7%的书，把书读薄，再读厚，做笔记。</p>

<p>3%的书，可以读一辈子的书。</p>

<p>2）系统读书法</p>

<p>围绕一个感兴趣的主题，</p>

<p>挑选1本~2本主读（7%或20%类），</p>

<p>再挑选3~4本副读（20%或70%类）</p>

<p>然后做思维图，形成一个知识体系。</p>

<p>3）读书4步（鸟瞰法）</p>

<ol>
<li>读书前准备</li>
</ol>


<p>1.1 明确自己阅读动机（如我为什么要读这本书，对这本书涉及的内容有我有哪些疑问，这本书占我总系统什么地位），选择合适的精力分配。</p>

<p>2.通览初翻一遍书</p>

<p>2.1 这本书我知道多少，不知道多少。</p>

<p>2.2 每一章的重点问题和概要是什么，哪些需要重点看，哪些不需要看。我要带着什么问题去看。</p>

<p>2.3 这本书脉络怎么样，作者的写作思路和写作结构是什么样。</p>

<p>3.重点笔记（3块法）</p>

<p>3.1 笔记A（脉络思维图）</p>

<p>3.2 笔记B（重点和我需要的地方）</p>

<p>3.3 笔记C（我的体会和分析）</p>

<p>4.归类</p>

<p>把这本书的信息放在总的知识结构中。</p>

<p>几个启示，</p>

<p>1.不要被细节吓坏，90%的书知道个大概就好了。
   剩下10%的书，80%的内容也是知道大概就好了。</p>

<p>2.知识爆炸社会，要想老鹰逮兔子，只取自己需要的知识，马上飞走，不要贪多贪杂。</p>

<p>3.知识不经过系统整理，就像没有编制过的稻草，一冲就散了，白读。</p>

<p>4.记笔记时可以记录章节、页数，避免笔记太细，影响复习。</p>

<p>5.阅读的几个重点</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1）带问题和目的去读，不迷失。
</span><span class='line'>2）做好脉络整理
</span><span class='line'>3）和作者的反馈（读一章问自己，写的对不对，对在哪里，不对在哪里，对自己的问 题有没有帮助，有没有值得向作者学习的地方，有没有自己以后要避免的错误）
</span><span class='line'>4）带入知识结构内</span></code></pre></td></tr></table></div></figure>


<p>
6.增加阅读速度：中间指扫法。</p>

<p>7.对理解困难的地方，中心词逻辑法。</p>

<p><strong>阅读需要：果断、勇敢、坚定。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[心理上的自我反省]]></title>
    <link href="http://sweetdark.github.com/blog/2013/01/23/new/"/>
    <updated>2013-01-23T20:38:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/01/23/new</id>
    <content type="html"><![CDATA[<p>在知乎或者微博上写东西，会纠结几个问题。</p>

<ul>
<li>自己写的不好</li>
<li>怕自己说错话</li>
<li>才疏学浅，班门弄斧。要是被人继续追问，未必回答的了，还会被人骂装逼。</li>
<li>特别是在关于做人和修心方面，其实别人只要一句话，我就会哑口无言。“你自己做到了吗？你没做到，凭什么教导别人呢” 。自己所写的大都是在书上看来的。自己未必，亲身去体验过，道听而途说，这是一种不负责任的态度啊。</li>
<li>想以己之昏昏，欲使人昭昭。这是很可笑的。</li>
</ul>


<p>在知乎上我是很想写自己的想法的，但自己的文字表达能力确实差劲。有时怎么写，也写不清楚我要表达的意思。 但我想我还是要克服这个心理障碍。即使班门弄斧，自取其辱也要写，不写，还不知道自己这“斧头”能舞的怎么样，就当练练斧头吧。再者就是把回答问题，当成一种知识分享，就不会有那么多顾虑吧。</p>

<p>微博现在主要是被我用来作为休闲，娱乐与朋友沟通的工具，而并不是学习知识和传授知识的工具。写的都是较为轻松的话题，有时想写专业一点的严肃的问题，但一般都不会得到别人的回应。所以也就不写了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修心]]></title>
    <link href="http://sweetdark.github.com/blog/2013/01/18/heart/"/>
    <updated>2013-01-18T21:32:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/01/18/heart</id>
    <content type="html"><![CDATA[<p>其实一个人所追求的仅仅是安稳和快乐而已。一个人饿了，想吃饭。”你为什么要吃饭“，”因为我饿了，感觉难受，吃饱了，我就感觉的好了“。是的，感觉好了，感觉安稳了。其实这种安稳和快乐，我们也可以通过修心来达到。并且修心达到的安稳和快乐，是持久的。我们总是被事物的表象所迷惑，不停的要，不停的追，追求的其实还是心灵的安稳与快乐。有了房，有了车你也仅仅是暂时的安稳和快乐。因为你的心又开始不安，你又会想要更多的东西。</p>

<p>修心达到的安稳与快乐相比追求物质以达到安稳与快乐，更高级一点，而且是持久的，一劳永逸的。并且“修心”是便宜实惠的，性价比非常高的产品。修心最基本就是多看好书，书是最实惠的投资。修心不是即刻见效的，相对于眼前一些唾手可得的快乐，浮躁的人就会选择前者。浮躁的人总是追着事物跑，追着快乐跑，所得的永远是短暂的。而修心的人，快乐与安稳自会去找上门来。</p>

<p>人痛苦的原因是贪瞋痴，修慈心可以治瞋，行布施可以治贪，学智慧可以治痴。要修慈心，首先要先对自己修慈心，再对他人修慈心。问问自己，你真的爱自己吗？终日为了自己的贪念奔波劳碌，对别人的过错生气伤害自己的身体。讨厌自己身上的缺点，厌恶自己。觉得自己太差，嫌弃自己。你有没有同情过自己，对自己都没有慈悲心的人，对其他人怎么会有慈悲心呢。佛陀说：“他还没见过爱别人胜过爱自己的人”。爱别人胜过爱自己，即使有也是短暂的，难以持久。首先要学会爱自己，接受自己的缺点，对自己宽容一些，慈悲一些，才能对别人宽容一些，慈悲一些。常对自己说“虽然自己现在做的不够好，但我接受现在的自己，并我会试着努力做的更好。不要自怨自艾，自暴自弃，那除了让自己痛苦之外，一点用处都没有。” 。然后遇到他人做的不好的时候，也这么想。“他虽然现在做的不够好，但相信他会努力做的更好的”。这是对他人修慈心了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[禅修]]></title>
    <link href="http://sweetdark.github.com/blog/2013/01/16/zen/"/>
    <updated>2013-01-16T21:49:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/01/16/zen</id>
    <content type="html"><![CDATA[<p>近期对禅产生了兴趣，在知乎上关注了禅的话题。有人推荐了一本书德宝法师《观呼吸》。我就上网搜，下了电子书来看。读完发现的确是一本好书，里面把禅讲的通俗易懂，没有什么高深的东西。很适合作为禅修入门的书籍。</p>

<p>书中讲了禅修不是什么？回答了大众对禅修的疑问和不解，禅修不是什么高深的东西，任何一个普通人都能够修炼。还讲了禅修是什么？这本书讲的是内观禅修，讲的入出息念的禅修方式。内观禅修是上座部佛教的最普遍的一种禅修。内观禅修，修禅定和正念，如果再辅以慈心效果会更好。</p>

<p>禅定是什么。禅定从科学的角度来讲，就是把所有注意力集中到一处。这样我们就能了解事物的全貌。禅定可以通过打坐，观呼吸来练习。禅定能够帮助我们延长念头与念头之间的那一刻时间，从而有办法使我们去观察一个念头。例如，忧虑是一个过程，它有步骤。忧虑并非只是一种存在的状态， 而是一组程序。你必须做的是，观看那个程序的开头，那些过程萌生的最初阶段。忧虑的第一个环节是“执着/排斥”的反应。只要现象一在心中跃现，我们便在心理上尝试去捕捉它或推开它，那就开启了忧虑的一连串反应。 我们可以通过内观禅修，让这种机制崩盘。而禅定就是让这种机制崩盘的工具，当忧虑这种念头，由潜意识发出要上升到意识层面是，我们用禅定来延长这一时刻，并用正念来观察它。看着它起，它灭，不加任何评判，思考，因为任何的思考都是在喂养这个念头，给予这个念头力量。你越是排斥它，它就越有力。我们做的仅仅是观察，看它是什么，它做了什么，它如何消失的。</p>

<p>正念是选择禅定关注的对象，正念所做的就是观察。正念是一种觉知，对念头的觉知，是一种毫无遮蔽的注意力。</p>

<ul>
<li>正念提醒我们应该做什么；</li>
<li>正念如实地观察事物；</li>
<li>正念看见一切现象的真实本质。</li>
</ul>


<!-- more -->


<p>（一）正念提醒我们应该做什么。在禅修中，你把注意力放在一个地方。当你的心偏离这个焦点时，正念会提醒你，你的心正在徘徊，以及你应该做什么。是正念把你的心拉回禅修的目标，这一切都在瞬间发生，没有内在对话。</p>

<p>（二）正念如实地观察事物。正念既不会对认知加油添醋，也不会删减任何东西。它不会做任何扭曲。它是毫无遮蔽的注意力，只观察任何出现的事物。</p>

<p>（三）正念看见一切现象的真实本质。正念，而且只有正念，才能理解佛教所教导实相的三个主要特征：无常、苦与无我。这三个特征不是盲目的教条式信仰，佛教徒认为任何人只要以正确的方式研究，就会发现它们是普遍与自明的实相。正念是研究的方法，正念本身有能力揭露人类所能观察到最深层的实相。在这个检视的层面，人们了解到：（1）一切因缘法本质上都是短暂的；（2）所有世间法到头来都是无法令人满足的；（3）其实没有永恒不变的实体，只有过程。</p>

<p>总结：
这几天也利用了晚上比较安静的时间段，进行内观禅修。由于我身体柔韧性不好，我选择坐在椅子上观呼吸。这个过程一开始是有点困难的，精神老是不集中，脑海里有太多杂念了。但慢慢的这些杂念沉淀下去，你可以细心的去观察呼吸。呼吸的每一个细节，很奇妙。自己以前从没发现呼吸也是个很奇妙的东西。虽然才练了几天，但还是有一点点效果的，对事物的看法变得更客观了。<strong>我会继续努力练习禅修，让自己摆脱烦恼。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GDB调试命令]]></title>
    <link href="http://sweetdark.github.com/blog/2013/01/12/gdb/"/>
    <updated>2013-01-12T20:24:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/01/12/gdb</id>
    <content type="html"><![CDATA[<p>GDB调试命令：</p>

<p>一、多线程调试</p>

<p>多线程调试可能是问得最多的。其实，重要就是下面几个命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>info thread 查看当前进程的线程。
</span><span class='line'>thread &lt;ID&gt; 切换调试的线程为指定ID的线程。
</span><span class='line'>break file.c:100 thread all  在file.c文件第100行处为所有经过这里的线程设置断点。
</span><span class='line'>set scheduler-locking off|on|step，这个是问得最多的。在使用step或者continue命令调试当前被调试线程的时候，其他线程也是同时执行的，怎么只让被调试程序执行呢？通过这个命令就可以实现这个需求。
</span><span class='line'>off 不锁定任何线程，也就是所有线程都执行，这是默认值。
</span><span class='line'>on 只有当前被调试程序会执行。
</span><span class='line'>step 在单步的时候，除了next过一个函数的情况(熟悉情况的人可能知道，这其实是一个设置断点然后continue的行为)以外，只有当前线程会执行。</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>二、调试宏</p>

<p>这个问题超多。在GDB下，我们无法print宏定义，因为宏是预编译的。但是我们还是有办法来调试宏，这个需要GCC的配合。</p>

<p>在GCC编译程序的时候，加上-ggdb3参数，这样，你就可以调试宏了。</p>

<p>另外，你可以使用下述的GDB的宏调试命令 来查看相关的宏。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>info macro - 你可以查看这个宏在哪些文件里被引用了，以及宏定义是什么样的。
</span><span class='line'>macro - 你可以查看宏展开的样子。</span></code></pre></td></tr></table></div></figure>


<p>三、源文件</p>

<p>这个问题问的也是很多的，太多的朋友都说找不到源文件。在这里我想提醒大家做下面的检查：</p>

<p>编译程序员是否加上了-g参数以包含debug信息。
路径是否设置正确了。使用GDB的directory命令来设置源文件的目录。
下面给一个调试/bin/ls的示例（ubuntu下）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-get source coreutils
</span><span class='line'>$ sudo apt-get install coreutils-dbgsym
</span><span class='line'>$ gdb /bin/ls
</span><span class='line'>GNU gdb (GDB) 7.1-ubuntu
</span><span class='line'>(gdb) list main
</span><span class='line'>1192    ls.c: No such file or directory.
</span><span class='line'>in ls.c
</span><span class='line'>(gdb) directory ~/src/coreutils-7.4/src/
</span><span class='line'>Source directories searched: /home/hchen/src/coreutils-7.4:$cdir:$cwd
</span><span class='line'>(gdb) list main
</span><span class='line'>1192        }
</span><span class='line'>1193    }
</span><span class='line'>1194
</span><span class='line'>1195    int
</span><span class='line'>1196    main (int argc, char **argv)
</span><span class='line'>1197    {
</span><span class='line'>1198      int i;
</span><span class='line'>1199      struct pending *thispend;
</span><span class='line'>1200      int n_files;
</span><span class='line'>1201</span></code></pre></td></tr></table></div></figure>


<p>四、条件断点</p>

<p>条件断点是语法是：break  [where] if [condition]，这种断点真是非常管用。尤其是在一个循环或递归中，或是要监视某个变量。注意，这个设置是在GDB中的，只不过每经过那个断点时GDB会帮你检查一下条件是否满足。</p>

<p>五、命令行参数</p>

<p>有时候，我们需要调试的程序需要有命令行参数，很多朋友都不知道怎么设置调试的程序的命令行参数。其实，有两种方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb命令行的 -args 参数
</span><span class='line'>gdb环境中 set args命令。</span></code></pre></td></tr></table></div></figure>


<p>六、gdb的变量</p>

<p>有时候，在调试程序时，我们不单单只是查看运行时的变量，我们还可以直接设置程序中的变量，以模拟一些很难在测试中出现的情况，比较一些出错，或是switch的分支语句。使用set命令可以修改程序中的变量。</p>

<p>另外，你知道gdb中也可以有变量吗？就像shell一样，gdb中的变量以$开头，比如你想打印一个数组中的个个元素，你可以这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) set $i = 0
</span><span class='line'>  
</span><span class='line'>(gdb) p a[$i++]
</span><span class='line'>
</span><span class='line'>...  #然后就一路回车下去了</span></code></pre></td></tr></table></div></figure>


<p>当然，这里只是给一个示例，表示程序的变量和gdb的变量是可以交互的。</p>

<p>七、x命令</p>

<p>也许，你很喜欢用p命令。所以，当你不知道变量名的时候，你可能会手足无措，因为p命令总是需要一个变量名的。x命令是用来查看内存的，在gdb中 “help x” 你可以查看其帮助。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x/x 以十六进制输出
</span><span class='line'>x/d 以十进制输出
</span><span class='line'>x/c 以单字符输出
</span><span class='line'>x/i  反汇编 - 通常，我们会使用 x/10i $ip-20 来查看当前的汇编（$ip是指令寄存器）
</span><span class='line'>x/s 以字符串输出</span></code></pre></td></tr></table></div></figure>


<p>八、command命令</p>

<p>有一些朋友问我如何自动化调试。这里向大家介绍command命令，简单的理解一下，其就是把一组gdb的命令打包，有点像字处理软件的“宏”。下面是一个示例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) break func
</span><span class='line'>Breakpoint 1 at 0x3475678: file test.c, line 12.
</span><span class='line'>(gdb) command 1
</span><span class='line'>Type commands for when breakpoint 1 is hit, one per line.
</span><span class='line'>End with a line saying just "end".
</span><span class='line'>&gt;print arg1
</span><span class='line'>&gt;print arg2
</span><span class='line'>&gt;print arg3
</span><span class='line'>&gt;end
</span><span class='line'>(gdb)</span></code></pre></td></tr></table></div></figure>


<p>当我们的断点到达时，自动执行command中的三个命令，把func的三个参数值打出来。</p>

<p><strong>gdb基本命令</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>命令描述backtrace（或bt）查看各级函数调用及参数
</span><span class='line'>finish连续运行到当前函数返回为止，然后停下来等待命令
</span><span class='line'>frame（或f） 帧编号选择栈帧
</span><span class='line'>info（或i） locals查看当前栈帧局部变量的值
</span><span class='line'>list（或l）列出源代码，接着上次的位置往下列，每次列10行
</span><span class='line'>list 行号 列出从第几行开始的源代码
</span><span class='line'>list函数名 列出某个函数的源代码
</span><span class='line'>next（或n）执行下一行语句
</span><span class='line'>print（或p）打印表达式的值，通过表达式可以修改变量的值或者调用函数
</span><span class='line'>quit（或q）退出gdb调试环境
</span><span class='line'>set var修改变量的值
</span><span class='line'>start开始执行程序，停在main函数第一行语句前面等待命令
</span><span class='line'>step（或s）执行下一行语句，如果有函数调用则进入到函数中
</span><span class='line'>
</span><span class='line'>break（或b） 行号在某一行设置断点
</span><span class='line'>break 函数名在某个函数开头设置断点
</span><span class='line'>break ... if ...设置条件断点
</span><span class='line'>continue（或c）从当前位置开始连续运行程序
</span><span class='line'>delete breakpoints 断点号删除断点
</span><span class='line'>display 变量名跟踪查看某个变量，每次停下来都显示它的值
</span><span class='line'>disable breakpoints 断点号禁用断点
</span><span class='line'>enable 断点号启用断点
</span><span class='line'>info（或i） breakpoints查看当前设置了哪些断点
</span><span class='line'>run（或r）从头开始连续运行程序
</span><span class='line'>undisplay 跟踪显示号取消跟踪显示</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思念]]></title>
    <link href="http://sweetdark.github.com/blog/2013/01/12/sinian/"/>
    <updated>2013-01-12T19:58:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/01/12/sinian</id>
    <content type="html"><![CDATA[<p>早上醒来，赖床开始思考。思考着自己这一段的心理历程。一想起你，脑海中有无数的想法。</p>

<p>从那次唱K，我不自觉的第一次偷拍你开始，然后第一次感觉到吃醋，当我意识到自己在吃醋的时候，觉得很奇怪。我还因为快递让你等了很久的事情而生气，还生了很久，自己也觉得不可思议，很久没这么生气过了。你名字已开始经常出现在我的晨间日记里，你是那个特殊的人。随后你开始不断的出现在我脑海中，进入我梦里，在梦里给你送花。</p>

<p><span class='pullquote-right' data-pullquote='我问自己是不是喜欢上你了。'>
我问自己是不是喜欢上你了。我不自觉的想对你好，看到你开心的时候，心里就觉得很满足，很温暖。就单单为这种满足，我也想对你好。自己能这样一直对你好，你也能欣然接受我对你的好，这种感觉真的太棒了。
</span></p>

<p>现在在看完书，写完代码的时候，心就会变得平静了，那时才可以把头脑里的杂念排空。但过不了多久，思念又会袭来。我想我不应该单独呆在房间里，我应该出去走走~。很多时候，差点就脱口而出要告诉你我的感受，但脑海中总有一个声音说”要忍耐，要控制，现在不是时候”。我也不知道什么才是时候。只有把这种情绪写下来，我的内心才会得到安宁。<strong>你已在我心里！！！！</strong></p>

<hr />

<p><strong>不论世界变成怎么样，都要勇敢的做自己！Follow My Heart！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[集合覆盖问题]]></title>
    <link href="http://sweetdark.github.com/blog/2013/01/06/set-problem/"/>
    <updated>2013-01-06T21:17:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/01/06/set-problem</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>集合覆盖问题(Set Covering Problem，简称SCP)是经典的NP一hard问题，同样也是运筹学研究中典型的组合优化问题，是一个计算机科学问题的典型代表。
问题如下定义：首先有一个元素集合U，给定一系列集合，各集合之中含可能有一些共同的元素（如图所示）。要求访问最少的集合，可以得到U中所有的元素，求出满足要求的最少数量的集合，它是Karp’s 21个NP-complete问题之一。</p>

<p>可以给出公式定义：</p>

<p>给定一个元素集合{U}和集合{﻿﻿﻿S}，Si中的元素属于U，即S是U的子集集合。我们要求的一个覆盖就是一个集合C，C是由si组成的 其元素集合之并等于U即
<img class="right" src="http://datasearch.ruc.edu.cn/~boliangfeng/blog/wp-content/uploads/2010/01/1.gif"></p>

<p>用图示表明：
输入：元素集合{U},包含各个子集的集合{S}</p>

<p><img src="http://datasearch.ruc.edu.cn/~boliangfeng/blog/wp-content/uploads/2010/01/set-cover-L.gif"></p>

<p>输出：一个集合C（C的子集是S的子集一种组合方案），覆盖了所有集合U中的元素。</p>

<p><img src="http://datasearch.ruc.edu.cn/~boliangfeng/blog/wp-content/uploads/2010/01/set-cover-R.gif"></p>

<h2>问题实例</h2>

<p>现在有好多不同种类的糖果，不过它们并不是单独出售的，它们按照不同的搭配被包装成不同的糖果包，并且不同的糖果包有不同的价格。若要得到所有类型的糖果，找到一个解决购买方案很容易，我们可以把所有的糖果包都购买一个。然而找到购买最少的糖果包或者找到花钱最少的购买方案将比较困难。找出较优的方案，尽可能的购买少量的糖果包，又能把所有种类的糖果都买到。</p>

<h2>贪婪近似算法</h2>

<p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。</p>

<p>转化为糖果的问题就是，每一次挑选的糖果包能覆盖的糖果种类最多，则选择这个糖果包，直到覆盖所有的糖果种类为止。</p>

<h2>实现文件</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;set.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cm">/* subsets里存的是Set* 指针数据。 （未测试，待完善）*/</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">cover</span><span class="p">(</span><span class="n">Set</span> <span class="o">*</span><span class="n">members</span><span class="p">,</span> <span class="n">Set</span> <span class="o">*</span><span class="n">subsets</span><span class="p">,</span> <span class="n">Set</span> <span class="o">*</span><span class="n">covering</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Set</span> <span class="o">*</span><span class="n">setd</span> <span class="o">=</span> <span class="p">(</span><span class="n">Set</span><span class="o">*</span><span class="p">)</span> <span class="n">malloc</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Set</span><span class="p">));</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">list_size</span><span class="p">(</span><span class="n">members</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">list_size</span><span class="p">(</span><span class="n">subsets</span><span class="p">)</span> <span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">SetElement</span> <span class="o">*</span><span class="n">pos</span> <span class="o">=</span> <span class="n">list_head</span><span class="p">(</span><span class="n">subsets</span><span class="p">);</span>
</span><span class='line'>      <span class="n">SetElement</span> <span class="o">*</span><span class="n">max_pos</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(;</span> <span class="n">pos</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">list_next</span><span class="p">(</span><span class="n">pos</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="n">SetElement</span> <span class="o">*</span><span class="n">mems</span> <span class="o">=</span> <span class="n">list_head</span><span class="p">(</span><span class="n">members</span><span class="p">);</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(;</span> <span class="n">mems</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">mems</span> <span class="o">=</span> <span class="n">list_next</span><span class="p">(</span><span class="n">mems</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">set_ismember</span><span class="p">((</span><span class="n">Set</span><span class="o">*</span><span class="p">)(</span><span class="n">list_data</span><span class="p">(</span><span class="n">pos</span><span class="p">)),</span> <span class="n">list_data</span><span class="p">(</span><span class="n">mems</span><span class="p">))</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="o">++</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">temp</span> <span class="o">&gt;</span> <span class="n">max</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">max</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>              <span class="n">max_pos</span> <span class="o">=</span> <span class="n">pos</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">max_pos</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>  <span class="c1">//无法覆盖</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">set_insert</span><span class="p">(</span><span class="n">covering</span><span class="p">,</span> <span class="n">max_pos</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">void</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">max_pos</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">set_remove</span><span class="p">(</span><span class="n">subsets</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="c1">//max_pos这个SetElement已经被释放，但data还在。不能再用max_pos-&gt;data了。</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">set_difference</span><span class="p">(</span><span class="n">setd</span><span class="p">,</span> <span class="n">members</span><span class="p">,</span> <span class="p">(</span><span class="n">Set</span><span class="o">*</span><span class="p">)(</span><span class="n">data</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="n">memcpy</span><span class="p">(</span><span class="n">members</span><span class="p">,</span> <span class="n">setd</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Set</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">list_size</span><span class="p">(</span><span class="n">members</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>  <span class="p">{</span> <span class="n">free</span><span class="p">(</span><span class="n">setd</span><span class="p">);</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;}</span> <span class="c1">//有解</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">list_size</span><span class="p">(</span><span class="n">members</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">list_size</span><span class="p">(</span><span class="n">subsets</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="n">free</span><span class="p">(</span><span class="n">setd</span><span class="p">);</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span> <span class="c1">//无法覆盖</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">setd</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="n">Set</span> <span class="o">*</span><span class="n">set</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">SetElement</span> <span class="o">*</span><span class="n">elem</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">elem</span> <span class="o">=</span> <span class="n">list_head</span><span class="p">(</span><span class="n">set</span><span class="p">);</span> <span class="n">elem</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">elem</span> <span class="o">=</span> <span class="n">list_next</span><span class="p">(</span><span class="n">elem</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">list_data</span><span class="p">(</span><span class="n">elem</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">printint</span><span class="p">(</span><span class="n">Set</span> <span class="o">*</span><span class="n">set</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">set_name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">SetElement</span> <span class="o">*</span><span class="n">elem</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s : &quot;</span><span class="p">,</span> <span class="n">set_name</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">elem</span> <span class="o">=</span> <span class="n">list_head</span><span class="p">(</span><span class="n">set</span><span class="p">);</span> <span class="n">elem</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">elem</span> <span class="o">=</span> <span class="n">list_next</span><span class="p">(</span><span class="n">elem</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">list_data</span><span class="p">(</span><span class="n">elem</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">match</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data1</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">int</span> <span class="o">*</span><span class="n">id1</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">data1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">int</span> <span class="o">*</span><span class="n">id2</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">data2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">id1</span> <span class="o">&gt;</span> <span class="o">*</span><span class="n">id2</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">id1</span> <span class="o">&lt;</span> <span class="o">*</span><span class="n">id2</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">matchptr</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data1</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">data1</span> <span class="o">==</span> <span class="n">data2</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Set</span> <span class="o">*</span><span class="n">set1</span> <span class="o">=</span> <span class="p">(</span><span class="n">Set</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Set</span><span class="p">));</span>
</span><span class='line'>    <span class="n">Set</span> <span class="o">*</span><span class="n">set2</span> <span class="o">=</span> <span class="p">(</span><span class="n">Set</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Set</span><span class="p">));</span>
</span><span class='line'>    <span class="n">Set</span> <span class="o">*</span><span class="n">set3</span> <span class="o">=</span> <span class="p">(</span><span class="n">Set</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Set</span><span class="p">));</span>
</span><span class='line'>    <span class="n">Set</span> <span class="o">*</span><span class="n">set4</span> <span class="o">=</span> <span class="p">(</span><span class="n">Set</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Set</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Set</span> <span class="o">*</span><span class="n">allElem</span> <span class="o">=</span> <span class="p">(</span><span class="n">Set</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Set</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">set_init</span><span class="p">(</span><span class="n">set1</span><span class="p">,</span> <span class="n">match</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">set_init</span><span class="p">(</span><span class="n">set2</span><span class="p">,</span> <span class="n">match</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">set_init</span><span class="p">(</span><span class="n">set3</span><span class="p">,</span> <span class="n">match</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">set_init</span><span class="p">(</span><span class="n">set4</span><span class="p">,</span> <span class="n">match</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">set_init</span><span class="p">(</span><span class="n">allElem</span><span class="p">,</span> <span class="n">match</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">all</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr1</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr3</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr2</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr4</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">set_insert</span><span class="p">(</span><span class="n">allElem</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">all</span> <span class="o">+</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">set_insert</span><span class="p">(</span><span class="n">set1</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">arr1</span> <span class="o">+</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>        <span class="n">set_insert</span><span class="p">(</span><span class="n">set2</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">arr2</span> <span class="o">+</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">set_insert</span><span class="p">(</span><span class="n">set3</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">arr3</span> <span class="o">+</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">set_insert</span><span class="p">(</span><span class="n">set4</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">arr4</span> <span class="o">+</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printint</span><span class="p">(</span><span class="n">set1</span><span class="p">,</span> <span class="s">&quot;set1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printint</span><span class="p">(</span><span class="n">set2</span><span class="p">,</span> <span class="s">&quot;set2&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printint</span><span class="p">(</span><span class="n">set3</span><span class="p">,</span> <span class="s">&quot;set3&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printint</span><span class="p">(</span><span class="n">set4</span><span class="p">,</span> <span class="s">&quot;set4&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printint</span><span class="p">(</span><span class="n">allElem</span><span class="p">,</span> <span class="s">&quot;all&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Set</span> <span class="o">*</span><span class="n">subsets</span> <span class="o">=</span> <span class="p">(</span><span class="n">Set</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Set</span><span class="p">));</span>
</span><span class='line'>    <span class="n">set_init</span><span class="p">(</span><span class="n">subsets</span><span class="p">,</span> <span class="n">matchptr</span><span class="p">,</span> <span class="n">free</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">set_insert</span><span class="p">(</span><span class="n">subsets</span><span class="p">,</span> <span class="n">set1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">set_insert</span><span class="p">(</span><span class="n">subsets</span><span class="p">,</span> <span class="n">set2</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span>
</span><span class='line'>        <span class="n">set_insert</span><span class="p">(</span><span class="n">subsets</span><span class="p">,</span> <span class="n">set3</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">set_insert</span><span class="p">(</span><span class="n">subsets</span><span class="p">,</span> <span class="n">set4</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">set_destory</span><span class="p">(</span><span class="n">set1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">set_destory</span><span class="p">(</span><span class="n">set2</span><span class="p">);</span>
</span><span class='line'>        <span class="n">set_destory</span><span class="p">(</span><span class="n">set3</span><span class="p">);</span>
</span><span class='line'>        <span class="n">set_destory</span><span class="p">(</span><span class="n">set4</span><span class="p">);</span>
</span><span class='line'>        <span class="n">set_destory</span><span class="p">(</span><span class="n">allElem</span><span class="p">);</span>
</span><span class='line'>        <span class="n">set_destory</span><span class="p">(</span><span class="n">subsets</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;插入失败</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">subsets</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Set</span> <span class="o">*</span><span class="n">covers</span> <span class="o">=</span> <span class="p">(</span><span class="n">Set</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Set</span><span class="p">));</span>
</span><span class='line'>    <span class="n">set_init</span><span class="p">(</span><span class="n">covers</span><span class="p">,</span> <span class="n">match</span><span class="p">,</span> <span class="n">free</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">cover</span><span class="p">(</span><span class="n">allElem</span><span class="p">,</span> <span class="n">subsets</span><span class="p">,</span> <span class="n">covers</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;找到了可覆盖的子集序列</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="n">covers</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;没能找到可覆盖的子集序列</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">set_destory</span><span class="p">(</span><span class="n">set1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">set_destory</span><span class="p">(</span><span class="n">set2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">set_destory</span><span class="p">(</span><span class="n">set3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">set_destory</span><span class="p">(</span><span class="n">set4</span><span class="p">);</span>
</span><span class='line'>    <span class="n">set_destory</span><span class="p">(</span><span class="n">allElem</span><span class="p">);</span>
</span><span class='line'>    <span class="n">set_destory</span><span class="p">(</span><span class="n">covers</span><span class="p">);</span>
</span><span class='line'>    <span class="n">set_destory</span><span class="p">(</span><span class="n">subsets</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>集合的数据结构在此博文已给出 http://sweetdark.github.com/blog/2013/01/04/set/
Makefile文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">OBJS</span> <span class="o">=</span> list.o set.o set_cover.o
</span><span class='line'><span class="nv">CC</span> <span class="o">=</span> gcc
</span><span class='line'><span class="nv">CFLAGS</span> <span class="o">=</span>-Wall -O -g
</span><span class='line'>prog: <span class="k">$(</span>OBJS<span class="k">)</span>
</span><span class='line'>  gcc <span class="k">$(</span>CFLAGS<span class="k">)</span> <span class="k">$(</span>OBJS<span class="k">)</span> -o <span class="nv">$@</span>
</span><span class='line'>
</span><span class='line'>list.o: list.c list.h
</span><span class='line'>  gcc <span class="k">$(</span>CFLAGS<span class="k">)</span> -c <span class="nv">$&lt;</span> -o <span class="nv">$@</span>
</span><span class='line'>  
</span><span class='line'>set.o: set.c set.h
</span><span class='line'>  gcc <span class="k">$(</span>CFLAGS<span class="k">)</span> -c <span class="nv">$&lt;</span> -o <span class="nv">$@</span>
</span><span class='line'>  
</span><span class='line'>set_cover.o: set_cover.c
</span><span class='line'>  gcc <span class="k">$(</span>CFLAGS<span class="k">)</span> -c <span class="nv">$&lt;</span> -o <span class="nv">$@</span>
</span><span class='line'>  
</span><span class='line'>.PHONY : clean
</span><span class='line'>clean:
</span><span class='line'>  rm *.o
</span><span class='line'>  rm prog.exe
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日计划与总结]]></title>
    <link href="http://sweetdark.github.com/blog/2013/01/05/thinking/"/>
    <updated>2013-01-05T22:35:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/01/05/thinking</id>
    <content type="html"><![CDATA[<p>今天真的是无所事事，想了好多东西。觉得自己对计划和时间的安排不够合理，没有明确的短期目标。一旦没有什么任务下来的时候，自己就像无头苍蝇一样不知道该干嘛。于是上知乎，搜了一下关于高效工作的一些问题，找到了一份不错的回答。先拿来实验一下。</p>

<blockquote><p>工作日志简单的说就是把你每天做了哪些事情都记录下来，以下是我的工作日志表。在每天下班前我都要安排好下一个工作日的工作计划，并要求细化到小时。</p><footer><strong>@酷拉皮卡,如何记工作笔记以提高工作效率?</strong> <cite><a href='http://blog.sina.com.cn/s/blog_605b0e2e0100iw6v.html'>blog.sina.com.cn/s/&hellip;</a></cite></footer></blockquote>


<p>每天的工作计划
<img src="http://p2.zhimg.com/a3/5e/a35e5f8bf2c520f1d47e51cd5abb4790_m.jpg">
等一天的工作完毕后，以上的表格就变成了下面的样子：
每天的工作总结
<img src="http://p3.zhimg.com/f4/61/f461e981d8193305c1265cc4858fc061_m.jpg"></p>

<p>解释一下表格填写要求：
1、按照PDCA循环（戴明环），将工作日志分为4个部分：计划、完成、检查、总结；
1、在“今日计划”里，标红的工作项目是当日重要的工作任务，必须优先完成；
2、每完成一项工作，就在“今日计划”里将该项工作上划删除线，同时在“今日完成”区进行填写，表示该项工作完成；
3、在“今日完成”区里的“ [临] ”代表临时的工作任务，不在“今日计划”中；
4、如果某项工作当日未完成，就用红字标注，下班后统一放置在后期的工作计划里；
5、每天在“检查”区里给自己打分，A为优秀，完成全部工作任务；B为良好，完成大部分工作任务；C为合格；D为最差。定期汇总分析，如果发现近期打分较低，就要考虑是否工作任务过重还是临时任务过多等原因，找到原因后就要想办法解决，免得压垮自己不说，工作任务也完成不了。
6、每天在“总结”区对今天的工作进行总结，成功的经验要加以记录并在后期的工作里推行，失败的教训要加以总结，避免以后再犯。</p>

<p>仅仅做每日工作记录是不够的，每周每月都要进行计划和总结。原理大同小异，都是在月初、周初的时候，对本期的工作目标、内容作总体的计划安排，设置优先级，然后每天记录。到月末、周末的时候，再进行总结，看看计划的工作是否完成，效果如何等等。</p>

<p>以后要多上知乎混，知乎是个好东西，自己一直没有好好利用啊。以后晚上坚决不上微博了，留下整块的时间，不要被微博上的信息所打扰。好好的学习和思考，不懂就上知乎问好了 :)</p>
]]></content>
  </entry>
  
</feed>
