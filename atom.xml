<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mario's Blog]]></title>
  <link href="http://sweetdark.github.com/atom.xml" rel="self"/>
  <link href="http://sweetdark.github.com/"/>
  <updated>2014-09-09T09:53:44+08:00</updated>
  <id>http://sweetdark.github.com/</id>
  <author>
    <name><![CDATA[Mario]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[类的设计]]></title>
    <link href="http://sweetdark.github.com/blog/2014/09/08/working-classes/"/>
    <updated>2014-09-08T11:23:01+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/09/08/working-classes</id>
    <content type="html"><![CDATA[<h2>抽象数据类型</h2>

<p>抽象数据类型可以让你像在现实世界中一样操作实体，而不用关心其底层实现。
<strong>ADT的益处</strong></p>

<ul>
<li>隐藏实现细节</li>
<li>限制改动程序影响的范围</li>
<li>让接口提供更多的信息</li>
<li>让程序的正确性更显而易见，易于检查错误</li>
<li>程序更具自我说明性</li>
<li>无须在程序内部到处传递数据</li>
<li>像现实世界中那样操作实体，不用在底层操作它</li>
</ul>


<p><strong>注意事项</strong>
不要让ADT依赖于存储介质。在命名上须要注意。如操作税率表的RateFile类不如RateTable类的命名方式好，虽然目前是通过文件的方式实现的。</p>

<h2>类优秀的设计</h2>

<ol>
<li>类的接口应该展现一致的抽象层次</li>
<li>一定要理解类所实现的抽象是什么</li>
<li>提供成对的服务 （如打开，关闭）</li>
<li>把不相关的信息移到其它类中</li>
<li>尽可能让接口可编程，而不是表达语义</li>
<li>谨防在修改时破坏类的抽象</li>
<li>不要添加与接口抽象不一致的公用成员</li>
<li>同时考虑类的抽象性和内聚性</li>
</ol>


<!-- more -->


<h2>良好的封装</h2>

<ol>
<li>尽可能地限制类和成员的可访问性</li>
<li>不要公开暴露成员数据</li>
<li>避免把私用的实现细节放入类的接口中 （C++应该使用信封类）</li>
<li>不要对类的使用者做出任何假设</li>
<li>避免使用友元</li>
<li>不要因为一个子程序里仅使用了公用子程序，就把它归入公开接口中</li>
<li>让阅读代码比编写代码更方便</li>
<li>警惕从语义上破坏封装性 （如在调用B之前要先调用A初始化数据，但是由于开发人员知道B中会去调用A，所以不调用A）</li>
<li>留意过于紧密的耦合关系</li>
</ol>


<h2>有关设计和实现的问题</h2>

<h3>包含关系</h3>

<ul>
<li>通过包含来实现有一个的关系</li>
<li>在万不得已情况下才使用private继承来实现有一个关系</li>
<li>数据成员应该控制5~9个</li>
</ul>


<h3>继承关系</h3>

<ul>
<li>用public继承来实现“是一个”的关系</li>
<li>使用继承时必须进行详细说明</li>
<li>遵循LSP原则（派生类完全可以通过基类的接口来使用，而使用者无须了解两者之间的差异）</li>
<li>确保只继承需要继承的部分</li>
<li>把共用的接口，数据和操作尽可能的放在更高的抽象层次上</li>
<li>只有一个实例的继承值得怀疑</li>
<li>只有一个派生类也值得怀疑（提前设计？）</li>
<li>派生类覆盖某个子程序，但在其中不做任何操作，值得怀疑</li>
<li>避免让继承体系过深</li>
<li>尽量使用多态，避免大量的类型检查</li>
<li>让所有数据都是private的</li>
</ul>


<h3>成员函数和数据成员</h3>

<ol>
<li>让类中的子程序数量尽可能少</li>
<li>禁止隐示的产生不需要的成员函数和运算符</li>
<li>对其它类的子程序调用尽可能少</li>
<li>尽量减少类和类之间的合作范围

<blockquote><p>所实例化的类的数量
调用其它类的子程序的数量
调用其它对象返回对象的子程序的数量</p></blockquote></li>
</ol>


<h3>构造函数</h3>

<p>优化采用深层Copy而不是浅Copy，除非论证浅Copy的可行性。 浅Copy虽然会提升性能，但会加大管理的复杂度，过早代码性能优化是没有意义的，后期可以很容易的把深Copy重构为浅Copy</p>

<h3>创建类的原因</h3>

<p>每次创建类时，都应该问一下自己创建这个类的原因。</p>

<ul>
<li>为现实世界中的对象建模</li>
<li>为抽象的对象建模</li>
<li>降低复杂度</li>
<li>隔离复杂度</li>
<li>建立一个控制中心</li>
<li>限制变动的范围</li>
<li>隐藏实现的细节</li>
<li>隐藏全局数据</li>
<li>让参数传递更顺畅</li>
<li>让代码容易重用</li>
<li>把易变的区域封装</li>
<li>把相关操作包装到一起</li>
<li>实现某种特定的重构</li>
</ul>


<h2>核对表</h2>

<h3>抽象</h3>

<ul>
<li>类是否有一个中心目的，类的命名是否符合这个中心目的？</li>
<li>类的接口是否展现一致的抽象？</li>
<li>类的接口是否让人明白应该如何使用它？</li>
<li>类的接口是否足够抽象，是否是个黑盒子？</li>
<li>是否从类中去除无关信息？</li>
<li>是否可以进一步分解为一组类？</li>
<li>修改类时，是否保证其接口的完整性？

<h3>封装</h3></li>
<li>是否把类的成员的可访问性降到最低？</li>
<li>是否完全隐藏了自己的实现细节？</li>
<li>类是松耦合的吗？</li>
<li>类是否避免了对其使用者做假设？

<h3>继承</h3></li>
<li>派生类是否遵循LSP原则？</li>
<li>派生类是否避免了覆盖，不可覆盖的方法？</li>
<li>基类中的数据是否是private的？</li>
<li>继承层次是否很浅？

<h4>跟实现相关的其它问题</h4></li>
<li>类中是否只有大约七个或更少的成员？</li>
<li>类调用其它类的子程序降低到最少了吗？</li>
<li>类是否在绝对必要时才与其它类协作？</li>
<li>所有数据成员是否在构造函数中初始化了？</li>
<li>是否在没有论证的情况下使用了浅拷贝，而不是深拷贝？</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关键的设计概念摘要]]></title>
    <link href="http://sweetdark.github.com/blog/2014/09/02/key-design-concepts/"/>
    <updated>2014-09-02T22:01:20+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/09/02/key-design-concepts</id>
    <content type="html"><![CDATA[<h2>管理复杂度</h2>

<ul>
<li>软件首要的技术使命就是管理复杂度。</li>
<li>我们不应该同时把整个程序塞进大脑里，而应该试着以某种方式组织程序，使得我们在某一时刻只关注于一个特定的部分。</li>
<li>人更易于理解多项简单的东西，而不是一项复杂的东西。</li>
<li>保持子程序的短小精悍可以减小大脑的负担，在抽象层上工作也可以减小大脑的负担。

<h2>如何应对复杂度</h2>

<p>高代价，低效率的设计的三个根源</p></li>
<li>用复杂的方法解决简单的问题</li>
<li>用简单但错误的方法解决复杂的问题</li>
<li>用不恰当的复杂方法解决复杂的问题
正确的方法</li>
<li>把本质的复杂度降至最低</li>
<li>尽可能减少偶然性复杂度

<h2>理想的设计特征</h2></li>
<li>最小的复杂度

<blockquote><p>如果你的设计方案不能让你在专注于程序的一部分时，忽略其它部分，那么这样的设计就是有问题的</p></blockquote></li>
<li>易于维护</li>
<li>松散耦合

<blockquote><p>相互关联的类尽可能的少</p></blockquote></li>
<li>可扩展性</li>
<li>可重用性</li>
<li>高扇入 （一个底层的类被大量的引用）</li>
<li>低扇出 （一个类少量的用其它的类）</li>
<li>可移植性</li>
<li>精简性</li>
<li>层次性 （各个层次保持概念的完整性）

<blockquote><p>如果旧代码不合理，编写一个新系统时，封装一层来调用旧代码</p></blockquote></li>
<li>标准技术 （尽可能的用标准技术）

<h2>设计的层次</h2>

<p>设计分为五层</p></li>
<li>软件系统设计</li>
<li>分解为子系统和包</li>
<li>分解为类</li>
<li>分解为子程序</li>
<li>子程序的详细设计

<blockquote><p>在分解子系统时如果让子系统之间可以的相互通信，那么就失去了分解的意义。应当规定子系统之间的通信规则。</p></blockquote></li>
</ul>


<p><img src="http://i.imgur.com/8M70dbQ.jpg" width="150" height="250" title="'常用的子系统'" ></p>

<!-- more -->


<h2>信息隐藏</h2>

<p><strong>隐藏的是某个易变的区域，某种文件格式，某种数据类型，某个隔离区域, 把这些易变信息的影响限制在某个类或子程序内。 隐藏复杂度，隐藏变化源</strong></p>

<h3>信息隐藏的障碍</h3>

<ul>
<li>信息过度分散</li>
<li>循环依赖</li>
<li>把类内数据误认为全局数据</li>
<li>误认为的性能损耗
在编写类时，时常问自己“这个类需要隐藏什么”

<h3>找出容易改变的区域</h3></li>
<li>找出看起来容易变化的项目</li>
<li>把容易变化的项目分离出来</li>
<li>把容易变化的项目隔离开</li>
</ul>


<blockquote><p>易变化的区域
业务规则
对硬件的依赖
输入输出
非标准的库
状态变量 （用枚举而不是布尔）
数据常量</p></blockquote>

<h3>预料不同程度的变化</h3>

<p><strong>不要把精力放在那些不太可能发生而又很难设计的变化上</strong></p>

<p>首先找出那些对用户有用的尽可能小的子集，这一子集构成系统的核心，不易发生变化。接下来进行尽可能小的扩充，慢慢的扩充。</p>

<h3>松散的耦合</h3>

<p>模块之间的耦合关系应该松散到应该可以很容易的被其它模块使用。</p>

<h4>耦合标准</h4>

<ul>
<li>规模 这里的规模指的是模块之间的连接数。一个参数的子程序比六个参数的子程序的耦合性更低</li>
<li>可见性 模块之间的关系应该是显著的。避免通过操作全局变量的方式来实现模块之间的关联，一个模块不应该了解其它模块的实现细节。</li>
<li>灵活性 灵活性是指模块之间的连接是否容易改动。</li>
</ul>


<p>简而言之，一个模块越容易被其它模块调用，那么它们之间的耦合性就越松散。</p>

<h4>耦合的种类</h4>

<p>下面的耦合关系递增排列</p>

<ol>
<li>简单参数数据耦合 （两个对象传的参数都是基本类型的数据）</li>
<li>简单对象耦合 （一个模块实例化一个对象）</li>
<li>对象参数耦合 （Object1 要求 Object2 传一个Object3给它）</li>
<li>语义上的耦合 （最难缠的耦合关系）

<blockquote><ul>
<li>Model1传个控制标志给Model2，告诉Model2应该做什么。 这种方法要求Model1对Model2的工作细节有了解。 参数是枚举或对象会好一些</li>
<li>Model2修改了某个全局数据之后，Model1使用它。</li>
<li>Model1要求它的Initialize方法必须在它的Routin方法之前调用。Model2知道Routin方法会去调用Initialize方法，所以Model2不调用Initialize</li>
<li>Model1传个部分初始化的Object给Model2，因为它知道Model2只使用Object 7个方法中的3全方法，只用到其中的部分数据。</li>
<li>Modle1传个BaseObject， Model2知道是DerivedObject，强制转成DerivedObject，然后使用DerivedObject的方法</li>
</ul>
</blockquote></li>
</ol>


<p><strong>语义上的耦合是非常危险的，因为更改被调用的模块会破坏调用的模块，而这种错误是编译器无法检查的。</strong>
<strong>松耦合在于一个模块提供了一种间接层次的抽象，另一个模块可以放心的使用它，而不用管里面的细节</strong></p>

<h3>设计模式的益处</h3>

<ul>
<li>设计模式通过提供现成的抽象来减小复杂度</li>
<li>设计模式通过把常见的解决方案的细节予以制度化来减小出错</li>
<li>设计模式通过多种设计方案而带来启发性的价值</li>
<li>设计模式通过把设计对话提高到一个更高的层次来简化交流

<h3>其它启发式方法</h3></li>
<li>高内聚性</li>
<li>构造分层结构</li>
<li>严格描述类契约</li>
<li>分配职责 （单一职责）</li>
<li>为测试而设计 （为了更容易测试，须要模块化，松耦合）</li>
<li>避免失误</li>
<li>有意识的选择绑定时间</li>
<li>创建中央控制点 (控制可以集中在类，子程序，甚至具名常量里。这样为了找到某样事物，你需要查找的地方越少)</li>
<li>画图</li>
<li>保持设计的模块化</li>
<li>使用蛮力</li>
</ul>


<h3>记录你的设计成果</h3>

<ul>
<li>把设计文档插入到代码中。（文档少的情况下，JavaDoc可以生成文档）</li>
<li>用Wiki来记录设计的决策</li>
<li>写总结邮件 （写完发给项目组的所有人，维持一个邮件列表）</li>
<li>用数码相机 拍下画板上的设计图，这种比在电脑上画图高效</li>
<li>在适当的细节使用UML图</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样算是一分优秀的架构规格书]]></title>
    <link href="http://sweetdark.github.com/blog/2014/08/30/architecture-prerequisite/"/>
    <updated>2014-08-30T19:09:52+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/08/30/architecture-prerequisite</id>
    <content type="html"><![CDATA[<h2>架构的先决条件</h2>

<p>架构的质量决定了系统的概念完整性。后者继而决定了软件的最终质量。</p>

<h2>架构的典型组成部分</h2>

<h3>程序组织</h3>

<ol>
<li>系统架构首先要以概要的形式对有关系统做一个综述。</li>
<li>架构定义主要的构造块。根据程序规模的不同，各个构造块可以由单个类或者多个类组成的子系统。每条列在需求中的功能特性至少有一个构造块覆盖到。</li>
<li>明确定义各个构造块的责任。构造块之间的关系和接口。各个构造块之间应该知道的越少越好。明确层次关系，对于每个构造块，可以调用哪些构造块，可以间接调用哪些构造块，不可以调用哪些构造块。</li>
</ol>


<h3>主要的类</h3>

<p>定义20%完成80%的需求的类。</p>

<h3>数据设计</h3>

<p>明确使用什么样的数据形式，为什么不用其它的形式。使用文件还是数据库，为什么？</p>

<h3>业务规则</h3>

<p>如果架构须要依赖于特定的业务，那么要主细描述这么规则。</p>

<h3>用户界面设计</h3>

<p>架构中应当说明使用哪种UI，什么格式，是桌面的，WEB的，命令行接口还是其它的形式。</p>

<h3>变更策略</h3>

<p>明确的需求发生变更时，应当执行什么样的策略，怎样管理。</p>

<h3>资源管理</h3>

<p>一些有限的资源像线程，句柄，内存，硬盘。应当如何合理的使用，统一使用的方式。在嵌入式中，资源短缺的情况下，更应该注重资源的管理。</p>

<h3>安全性</h3>

<p>架构应该描述实现设计层面和代码层面的安全性的方法。</p>

<h3>性能</h3>

<p>明确性能目标，性能要达到什么样的程度。</p>

<h3>可伸缩性</h3>

<p>可伸缩性是指系统增长满足未来需求的能力</p>

<h3>输入输出</h3>

<p>架构应该详细定义读取策略，而且应该描述在哪一层检测IO错误。</p>

<h3>错误处理</h3>

<p>架构应该清楚的说明一种“一致处理错误错误”的策略
* 错误处理是进行纠正还是仅仅检测
* 错误检测是主动还是被动
* 程序的错误如何传播
* 错误消息的处理有什么约定
* 如何处理异常
* 程序在什么层次上处理错误
* 每个类的错误处理上负什么样的责任。是每个类负责处理错误，还是由一组类来处理整个系统的错误
* 使用运行环境中的内部支持的错误处理机制还是自己编写错误处理机制</p>

<h3>容错性</h3>

<p>架构应该定义所期望的容错种类。</p>

<h3>架构的可行性</h3>

<p>应该认证系统的技术可行性</p>

<h3>架构的总体质量</h3>

<ul>
<li>优秀的架构规格书的特点在于讨论了系统中的类，每个类背后的隐藏信息，讨论了“采纳或排斥所有替代方案的理由”</li>
<li>架构的目标应该清楚的表述</li>
<li>架构在很大程度止是与机器和编程语言无关的</li>
<li>架构应该描述所有决策的主要动机</li>
<li>架构应该明确的指出有风险的区域</li>
<li>架构应该在“欠描述”和“过度描述”之间的那条分界线上</li>
<li>架构不应该包含很难理解的东西</li>
</ul>


<blockquote><p>摘自代码大全</p></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Message Queue Introduction]]></title>
    <link href="http://sweetdark.github.com/blog/2014/08/28/windows-message-queue-introduction/"/>
    <updated>2014-08-28T20:59:07+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/08/28/windows-message-queue-introduction</id>
    <content type="html"><![CDATA[<p>Windows 的消息队列和消息处理方式一直没有非常系统的学习过。正如某位名人所说的“一知半解，最危险”。</p>

<blockquote><p>“一知半解”就是对事物的吸收囫囵吞枣、不求甚解，导致判断失准而不自知。因为不彻底了解事物，不精准分辨事物细微差异，以致陷入断章取义、冯京当马凉、张飞打岳飞打得满天飞。而且正因为自以为很懂，他甚至听不进去别人的观点、劝告，当然赖之作出的判断，就会差之毫厘失之千里，甚至造成很大的错误。</p></blockquote>


<p></p>

<h2>创建消息循环</h2>

<p>系统只会为那些须要消息队列来执行某些操作的线程创建消息队列。如果一个线程创建了一个或多个窗口，那么就必须创建一个消息循环来处理消息队列中的消息。（窗口都会有显示和关闭的消息），这个消息循环会从线程的消息队列中检索消息(<code>PeekMessage</code>和<code>GetMessage</code>)，然后分发给相应的处理过程。</p>

<p>由于应用程序中系统会把消息分发给各个窗口，所以线程在创建消息循环之前至少要创建一个窗口。传统的应用程序中，应用会WinMain函数中注册一个窗口类作为主窗口，创建和显示窗口，然后启动消息循环。</p>

<!-- more -->


<p>我们可以使用<code>GetMessage</code>和<code>DispatchMessage</code>函数来创建消息循环。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">HINSTANCE</span> <span class="n">hinst</span><span class="p">;</span>
</span><span class='line'><span class="n">HWND</span> <span class="n">hwndMain</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">PASCAL</span> <span class="nf">WinMain</span><span class="p">(</span><span class="n">HINSTANCE</span> <span class="n">hInstance</span><span class="p">,</span> <span class="n">HINSTANCE</span> <span class="n">hPrevInstance</span><span class="p">,</span>
</span><span class='line'>    <span class="n">LPSTR</span> <span class="n">lpszCmdLine</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nCmdShow</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">MSG</span> <span class="n">msg</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOL</span> <span class="n">bRet</span><span class="p">;</span>
</span><span class='line'>    <span class="n">WNDCLASS</span> <span class="n">wc</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UNREFERENCED_PARAMETER</span><span class="p">(</span><span class="n">lpszCmdLine</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Register the window class for the main window. </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">hPrevInstance</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">style</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">lpfnWndProc</span> <span class="o">=</span> <span class="p">(</span><span class="n">WNDPROC</span><span class="p">)</span> <span class="n">WndProc</span><span class="p">;</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">cbClsExtra</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">cbWndExtra</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">hInstance</span> <span class="o">=</span> <span class="n">hInstance</span><span class="p">;</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">hIcon</span> <span class="o">=</span> <span class="n">LoadIcon</span><span class="p">((</span><span class="n">HINSTANCE</span><span class="p">)</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>            <span class="n">IDI_APPLICATION</span><span class="p">);</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">hCursor</span> <span class="o">=</span> <span class="n">LoadCursor</span><span class="p">((</span><span class="n">HINSTANCE</span><span class="p">)</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>            <span class="n">IDC_ARROW</span><span class="p">);</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">hbrBackground</span> <span class="o">=</span> <span class="n">GetStockObject</span><span class="p">(</span><span class="n">WHITE_BRUSH</span><span class="p">);</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">lpszMenuName</span> <span class="o">=</span>  <span class="s">&quot;MainMenu&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">lpszClassName</span> <span class="o">=</span> <span class="s">&quot;MainWndClass&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">RegisterClass</span><span class="p">(</span><span class="o">&amp;</span><span class="n">wc</span><span class="p">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">hinst</span> <span class="o">=</span> <span class="n">hInstance</span><span class="p">;</span>  <span class="c1">// save instance handle </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create the main window. </span>
</span><span class='line'>
</span><span class='line'>    <span class="n">hwndMain</span> <span class="o">=</span> <span class="n">CreateWindow</span><span class="p">(</span><span class="s">&quot;MainWndClass&quot;</span><span class="p">,</span> <span class="s">&quot;Sample&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">WS_OVERLAPPEDWINDOW</span><span class="p">,</span> <span class="n">CW_USEDEFAULT</span><span class="p">,</span> <span class="n">CW_USEDEFAULT</span><span class="p">,</span>
</span><span class='line'>        <span class="n">CW_USEDEFAULT</span><span class="p">,</span> <span class="n">CW_USEDEFAULT</span><span class="p">,</span> <span class="p">(</span><span class="n">HWND</span><span class="p">)</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="n">HMENU</span><span class="p">)</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">hinst</span><span class="p">,</span> <span class="p">(</span><span class="n">LPVOID</span><span class="p">)</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// If the main window cannot be created, terminate </span>
</span><span class='line'>    <span class="c1">// the application. </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">hwndMain</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Show the window and paint its contents. </span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ShowWindow</span><span class="p">(</span><span class="n">hwndMain</span><span class="p">,</span> <span class="n">nCmdShow</span><span class="p">);</span>
</span><span class='line'>    <span class="n">UpdateWindow</span><span class="p">(</span><span class="n">hwndMain</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Start the message loop. </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="p">(</span><span class="n">bRet</span> <span class="o">=</span> <span class="n">GetMessage</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">bRet</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// handle the error and possibly exit</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">TranslateMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>            <span class="n">DispatchMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Return the exit code to the system. </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">msg</span><span class="p">.</span><span class="n">wParam</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>线程，窗口，消息队列，消息循环，消息处理过程</h2>

<p>如果一个线程须要消息来处理某些操作，那么可以创建一个（只可以是一个）消息循环来检查消息队列，获取有取的消息并做处理。每个线程有它自己的一个消息队列（如其它线程可以通过PostThreadMessage 来向某个线程发送消息，这个消息会被发到相应的消息队列中），线程可以用PeekMessage来获取消息并处理。线程可以创建一个窗口，这个窗口有自己的消息处理程序如WndProc。线程在接收到消息后可以通过DispatchMessage来分发消息到各个窗口中。</p>

<h2>什么是UI线程</h2>

<p>UI线程指的是有窗口，或控件的线程，有消息队列和消息循环。UI线程有以下几个特点
1.  UI线程有一个消息队列，这个消息队列由操作系统分配。在创建第一个窗体时就分配。
2.  UI线程需要一个消息汞（消息循环）来检索消息，然后分发消息给各个窗体或者控件。
3. COM在这个线程止初始化.一个STA（单线程单元需要让许多窗体特征正常运行，因为这些不是线程安全的）COM确保这些特性是线程安全的。
4. 线程不会在任何操作阻塞。
5. UI线程可以创建多个窗体和控件，这些控件都是由一个消息循环来分发消息的。</p>

<p>在Windows中操作系统只会为UI线程创建消息队列。基本上我们只需要一个UI线程。
MSDN： The system does not automatically create a message queue for each thread，Instead, the system creates a message queue only for threads that perform operations which require a message queue.</p>

<h2>消息队列函数</h2>

<h3>DispatchMessage</h3>

<figure class='code'><figcaption><span>C++</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">LRESULT</span> <span class="n">WINAPI</span> <span class="nf">DispatchMessage</span><span class="p">(</span>
</span><span class='line'>      <span class="n">_In_</span> <span class="k">const</span> <span class="n">MSG</span> <span class="o">*</span><span class="n">lpmsg</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个函数会分发消息到窗口的处理过程中，一般和GetMessage一起用。<strong>note: 这个函数会等待窗口处理过程的返回 是阻塞式的</strong>
如果lpmsg指向一个<code>WM_TIMER</code>和lParam参数不为空，那么这个lParam指向的函数将会被调用，而不会调用窗口的处理过程。</p>

<h3>PeekMessage</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">BOOL</span> <span class="n">WINAPI</span> <span class="nf">PeekMessage</span><span class="p">(</span>
</span><span class='line'>  <span class="n">_Out_</span>     <span class="n">LPMSG</span> <span class="n">lpMsg</span><span class="p">,</span>
</span><span class='line'>  <span class="n">_In_opt_</span>  <span class="n">HWND</span> <span class="n">hWnd</span><span class="p">,</span>
</span><span class='line'>  <span class="n">_In_</span>      <span class="n">UINT</span> <span class="n">wMsgFilterMin</span><span class="p">,</span>
</span><span class='line'>  <span class="n">_In_</span>      <span class="n">UINT</span> <span class="n">wMsgFilterMax</span><span class="p">,</span>
</span><span class='line'>  <span class="n">_In_</span>      <span class="n">UINT</span> <span class="n">wRemoveMsg</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim 插件]]></title>
    <link href="http://sweetdark.github.com/blog/2014/08/27/vim-plugin/"/>
    <updated>2014-08-27T20:59:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/08/27/vim-plugin</id>
    <content type="html"><![CDATA[<p>记录一些常用的好用的Vim插件</p>

<h2>通用</h2>

<ol>
<li><a href="https://github.com/gmarik/Vundle.vim">Vbundle</a> 这个可以很方便的安装和管理Vim的插件。最好是也装上git，因为很多插件托管在github上</li>
<li><a href="http://www.vim.org/scripts/script.php?script_id=2899">txtbrowser</a> 高效处理纯文本,提供快速的搜索和打开URL等功能，支持Email的格式等</li>
<li><a href="https://github.com/scrooloose/nerdtree">nerdtree</a> 非常好的目录浏览的插件，功能强大</li>
<li><a href="https://github.com/kien/ctrlp.vim">ctrlp</a> 文件和buffer的模糊查询</li>
<li><a href="https://github.com/tpope/vim-surround">vim-surround</a> 引号，括号等操作，非常方便</li>
</ol>


<h2>编程</h2>

<ol>
<li><a href="https://github.com/klen/python-mode">pythonmode</a> python必备</li>
<li><a href="https://github.com/vim-debug.vim">vim-debug</a> 支持python 和php debug</li>
<li><a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a> git的插件可以在Vim中执行git命令，非常方便, 类似的有git-vim</li>
<li><a href="www.vim.org/script.php?script_id=31">a.vim</a>在头文件和cpp,c文件中切换</li>
<li><a href="https://github.com/Shougo/neocomplcache.vim">neocomplcache.vim</a> 强大的自动补全插件</li>
<li><a href="https://github.com/scrooloose/syntastic">syntastic</a> Python和其它多种语言的语法检查</li>
</ol>


<h2>样式</h2>

<ol>
<li><a href="https://github.com/bling/vim-airline">vim-airline</a>让vim的用户体验更好</li>
<li><a href="http://files.werx.dk/wombat.vim">Wombat</a>一种样式</li>
</ol>


<!-- more -->


<figure class='code'><figcaption><span>_vimrc的配置</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">nocompatible</span> <span class="c">&quot;去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限</span>
</span><span class='line'><span class="k">filetype</span> off                  <span class="c">&quot; required</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; set the runtime path to include Vundle and initialize</span>
</span><span class='line'><span class="k">set</span> <span class="nb">rtp</span><span class="p">+=~</span><span class="sr">/.vim/</span>bundle<span class="sr">/vundle/</span>
</span><span class='line'><span class="k">let</span> <span class="nb">path</span><span class="p">=</span><span class="s1">&#39;$VIMFILES/bundle/&#39;</span>
</span><span class='line'><span class="k">call</span> vundle#begin<span class="p">(</span><span class="nb">path</span><span class="p">)</span>
</span><span class='line'><span class="c">&quot; alternatively, pass a path where Vundle should install plugins</span>
</span><span class='line'><span class="c">&quot;call vundle#begin(&#39;~/some/path/here&#39;)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; let Vundle manage Vundle, required</span>
</span><span class='line'>Plugin <span class="s1">&#39;gmarik/Vundle.vim&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; The following are examples of different formats supported.</span>
</span><span class='line'><span class="c">&quot; Keep Plugin commands between vundle#begin/end.</span>
</span><span class='line'><span class="c">&quot; plugin on GitHub repo</span>
</span><span class='line'>Plugin <span class="s1">&#39;tpope/vim-fugitive&#39;</span>
</span><span class='line'><span class="c">&quot; Python and PHP Debugger</span>
</span><span class='line'>Bundle <span class="s1">&#39;fisadev/vim-debug.vim&#39;</span>
</span><span class='line'><span class="c">&quot; Better file browser</span>
</span><span class='line'>Bundle <span class="s1">&#39;scrooloose/nerdtree&#39;</span>
</span><span class='line'><span class="c">&quot; Code commenter</span>
</span><span class='line'>Bundle <span class="s1">&#39;scrooloose/nerdcommenter&#39;</span>
</span><span class='line'><span class="c">&quot; Class/module browser</span>
</span><span class='line'>Bundle <span class="s1">&#39;majutsushi/tagbar&#39;</span>
</span><span class='line'><span class="c">&quot; Code and files fuzzy finder</span>
</span><span class='line'>Bundle <span class="s1">&#39;kien/ctrlp.vim&#39;</span>
</span><span class='line'><span class="c">&quot; Extension to ctrlp, for fuzzy command finder</span>
</span><span class='line'>Bundle <span class="s1">&#39;fisadev/vim-ctrlp-cmdpalette&#39;</span>
</span><span class='line'><span class="c">&quot; Git integration</span>
</span><span class='line'>Bundle <span class="s1">&#39;motemen/git-vim&#39;</span>
</span><span class='line'><span class="c">&quot; Tab list panel</span>
</span><span class='line'>Bundle <span class="s1">&#39;kien/tabman.vim&#39;</span>
</span><span class='line'><span class="c">&quot; Airline</span>
</span><span class='line'>Bundle <span class="s1">&#39;bling/vim-airline&#39;</span>
</span><span class='line'><span class="c">&quot; Terminal Vim with 256 colors colorscheme</span>
</span><span class='line'>Bundle <span class="s1">&#39;fisadev/fisa-vim-colorscheme&#39;</span>
</span><span class='line'><span class="c">&quot; Consoles as buffers</span>
</span><span class='line'>Bundle <span class="s1">&#39;rosenfeld/conque-term&#39;</span>
</span><span class='line'><span class="c">&quot; Pending tasks list</span>
</span><span class='line'><span class="c">&quot;Bundle &#39;fisadev/FixedTaskList.vim&#39;</span>
</span><span class='line'><span class="c">&quot; Surround</span>
</span><span class='line'>Bundle <span class="s1">&#39;tpope/vim-surround&#39;</span>
</span><span class='line'><span class="c">&quot; Autoclose</span>
</span><span class='line'>Bundle <span class="s1">&#39;Townk/vim-autoclose&#39;</span>
</span><span class='line'><span class="c">&quot; Indent text object</span>
</span><span class='line'>Bundle <span class="s1">&#39;michaeljsmith/vim-indent-object&#39;</span>
</span><span class='line'><span class="c">&quot; Python mode (indentation, doc, refactor, lints, code checking, motion and</span>
</span><span class='line'><span class="c">&quot; operators, highlighting, run and ipdb breakpoints)</span>
</span><span class='line'>Bundle <span class="s1">&#39;klen/python-mode&#39;</span>
</span><span class='line'><span class="c">&quot; Better autocompletion</span>
</span><span class='line'>Bundle <span class="s1">&#39;Shougo/neocomplcache.vim&#39;</span>
</span><span class='line'><span class="c">&quot; Automatically sort python imports</span>
</span><span class='line'>Bundle <span class="s1">&#39;fisadev/vim-isort&#39;</span>
</span><span class='line'><span class="c">&quot; Drag visual blocks arround</span>
</span><span class='line'>Bundle <span class="s1">&#39;fisadev/dragvisuals.vim&#39;</span>
</span><span class='line'><span class="c">&quot; Window chooser</span>
</span><span class='line'><span class="c">&quot;Bundle &#39;t9md/vim-choosewin&#39;</span>
</span><span class='line'><span class="c">&quot; Python and other languages code checker</span>
</span><span class='line'>Bundle <span class="s1">&#39;scrooloose/syntastic&#39;</span>
</span><span class='line'><span class="c">&quot; Search results counter</span>
</span><span class='line'>Bundle <span class="s1">&#39;IndexedSearch&#39;</span>
</span><span class='line'><span class="c">&quot; XML/HTML tags navigation</span>
</span><span class='line'>Bundle <span class="s1">&#39;matchit.zip&#39;</span>
</span><span class='line'><span class="c">&quot; Gvim colorscheme</span>
</span><span class='line'>Bundle <span class="s1">&#39;Wombat&#39;</span>
</span><span class='line'><span class="c">&quot; Yank history navigation</span>
</span><span class='line'>Bundle <span class="s1">&#39;YankRing.vim&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; All of your Plugins must be added before the following line</span>
</span><span class='line'><span class="k">call</span> vundle#<span class="k">end</span><span class="p">()</span>            <span class="c">&quot; required</span>
</span><span class='line'><span class="k">filetype</span> plugin indent <span class="k">on</span>    <span class="c">&quot; required</span>
</span></code></pre></td></tr></table></div></figure>


<p>暂时先介绍这么多，后续更新</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[buildbot tips]]></title>
    <link href="http://sweetdark.github.com/blog/2014/08/24/buildbot-tips/"/>
    <updated>2014-08-24T22:45:16+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/08/24/buildbot-tips</id>
    <content type="html"><![CDATA[<h2>目录</h2>

<ol>
<li>命令最终执行的代码的目录是 build配置的slave builddir(没有则默认是slave的name) + step的workdir</li>
</ol>


<h2>Scheduler</h2>

<ol>
<li>Dependant Scheduler只依赖于上层的Scheduler。当上层的Scheduler成功时，才会执行，而不关心其它的改变。须要注意的是如果ChangeSourcerevision为None，那这意味着Head revision。如果在上流的Scheduler执行成功后，触发Dependant的期间，ChangeSource发生了改变，那么Dependant会取最新的Head revision。 如果想要更灵活的方式，可以考虑用Triggerable Scheduler的方式</li>
</ol>


<h2>Steps</h2>

<ol>
<li>steps中的SVN的checkout和update会先删掉checkout目录，然后重新checkout一份代码。所以不要在这个目录下放一些非SVN服务器上的东西。</li>
<li>steps中可以获得build设置的property，可以通过这些property来执行相应的代码。更灵活的方式是用render</li>
<li>steps可以设置Property来给下一个steps用，使用SetProperty(property=&ldquo;&rdquo;, value=&ldquo;&rdquo;) values可以是string和 Interpolate对象,这样就可以把一些steps根据property来执行</li>
</ol>


<figure class='code'><figcaption><span>例子</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">buildbot.steps.vstudio</span> <span class="kn">import</span> <span class="n">vc8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">buildbot.process.properties</span> <span class="kn">import</span> <span class="n">Property</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">buildbot.process.factory</span> <span class="kn">import</span> <span class="n">BuildFactory</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">buildbot.steps.master</span> <span class="kn">import</span> <span class="n">SetProperty</span>
</span><span class='line'>
</span><span class='line'><span class="n">vc</span> <span class="o">=</span> <span class="n">vc8</span><span class="p">(</span><span class="n">projectfile</span><span class="o">=</span><span class="s">&quot;youproject.sln&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">mode</span><span class="o">=</span><span class="s">&quot;build&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">config</span><span class="o">=</span><span class="n">Property</span><span class="p">(</span><span class="s">&quot;buildconfig&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">build</span> <span class="o">=</span> <span class="n">BuildFactory</span><span class="p">()</span>
</span><span class='line'><span class="n">build</span><span class="o">.</span><span class="n">addStep</span><span class="p">(</span><span class="n">SetProperty</span><span class="p">(</span><span class="nb">property</span><span class="o">=</span><span class="s">&quot;buildconfig&quot;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;release&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">build</span><span class="o">.</span><span class="n">addStep</span><span class="p">(</span><span class="n">vc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[buildbot的搭建总结]]></title>
    <link href="http://sweetdark.github.com/blog/2014/07/23/buildbot-build/"/>
    <updated>2014-07-23T18:56:27+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/07/23/buildbot-build</id>
    <content type="html"><![CDATA[<p><strong>PlatForm</strong>                    <em>win32 64bit</em>
<strong>python version</strong>              <em>python2.7 32bit</em></p>

<h2>入门</h2>

<p>如果是Linux系统的<a href="http://docs.buildbot.net/current/tutorial/firstrun.html">FirstRun</a>，可以按照官方这个步骤去做。官方说Windows也差不多，但在我的环境下有问题，（我安装了Cygwin，在Cygwin环境下运行的）。 virtualenv  这个的easy_install太旧了。我用sandbox运行 easy_install buildbot总是提示缺少库。更新easy_install 也没用。 关于用easy_install -U setuptool的产生的Perssion Denied问题可以看<a href="http://stackoverflow.com/questions/17601020/easy-install-exe-permission-denied-on-windows-8">这里</a></p>

<p>Windows 下的安装步骤。参考<a href="http://trac.buildbot.net/wiki/RunningBuildbotOnWindows">这里</a> 下面说一下我遇到的问题。
我的建议是都安装x86的版本。python  PyWin32版本。 有一些需要编译的python库很麻烦如pysqlite 。python2.7的大部分库是用VS2008编译的，可以去下个VS2008的Express。如果是Windows 64bit出现问题参考<a href="http://stackoverflow.com/questions/4676728/value-error-trying-to-install-python-for-windows-extensions">这里</a>
因为我装了好几个版本的VS。我的问题弄了好久没解决。还好网上有编译好的版本。
<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pywin32">http://www.lfd.uci.edu/~gohlke/pythonlibs/#pywin32</a> 我在这里下了个pysqlite的exe.
如果下载的是.zip文件，则解压，然后dos进入该目录，执行<code>python setup.py install</code>命令即可
也在网上找了个OpenSSL windwos版的下载安装好了。
大部分需要的组件我都上传的网盘了地址<a href="http://pan.baidu.com/s/1dD7tlUp">http://pan.baidu.com/s/1dD7tlUp</a>
检查是否buildbot和buildbot-slave是否安装好了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>buildbot --version
</span><span class='line'>buildslave --version</span></code></pre></td></tr></table></div></figure>


<p>如果一切正常那可以按照<a href="http://docs.buildbot.net/current/tutorial/firstrun.html">FirstRun</a> 这里后面的继续去做了。</p>

<!--more-->


<h2>Creating a master</h2>

<p>At the terminal, type:</p>

<p>buildbot create-master master
mv master/master.cfg.sample master/master.cfg
Now start it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>buildbot start master
</span><span class='line'>tail -f master/twistd.log</span></code></pre></td></tr></table></div></figure>


<p>You will now see all of the log information from the master in this terminal. You should see lines like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2011-12-04 10:04:40-0600 [-] Starting factory &lt;buildbot.status.web.baseweb.RotateLogSite instance at 0x2e36638&gt;
</span><span class='line'>2011-12-04 10:04:40-0600 [-] Setting up http.log rotating 10 files of 10000000 bytes each
</span><span class='line'>2011-12-04 10:04:40-0600 [-] WebStatus using (/home/dustin/tmp/buildbot/master/public_html)
</span><span class='line'>2011-12-04 10:04:40-0600 [-] removing 0 old schedulers, updating 0, and adding 1
</span><span class='line'>2011-12-04 10:04:40-0600 [-] adding 1 new changesources, removing 0
</span><span class='line'>2011-12-04 10:04:40-0600 [-] gitpoller: using workdir '/home/dustin/tmp/buildbot/master/gitpoller-workdir'
</span><span class='line'>2011-12-04 10:04:40-0600 [-] gitpoller: initializing working dir from git://github.com/buildbot/pyflakes.git
</span><span class='line'>2011-12-04 10:04:40-0600 [-] configuration update complete
</span><span class='line'>2011-12-04 10:04:41-0600 [-] gitpoller: checking out master
</span><span class='line'>2011-12-04 10:04:41-0600 [-] gitpoller: finished initializing working dir from git://github.com/buildbot/pyflakes.git at rev 1a4af6ec1dbb724b884ea14f439b272f30439e4d</span></code></pre></td></tr></table></div></figure>


<h2>Creating a slave</h2>

<p>Open a new terminal and enter the same sandbox you created before:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd
</span><span class='line'>cd tmp/buildbot
</span><span class='line'>source sandbox/bin/activate
</span><span class='line'>Install the buildslave command:</span></code></pre></td></tr></table></div></figure>


<p>easy_install buildbot-slave
Now, create the slave:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>buildslave create-slave slave localhost:9989 example-slave pass</span></code></pre></td></tr></table></div></figure>


<p>The user:host pair, username, and password should be the same as the ones in master.cfg; verify this is the case by looking at the section for c[&lsquo;slaves&rsquo;] and c[&lsquo;slavePortnum&rsquo;]:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat master/master.cfg</span></code></pre></td></tr></table></div></figure>


<p>Now, start the slave:</p>

<p>buildslave start slave
Check the slave&rsquo;s log:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tail -f slave/twistd.log</span></code></pre></td></tr></table></div></figure>


<p>You should see lines like the following at the end of the worker log:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2009-07-29 20:59:18+0200 [Broker,client] message from master: attached
</span><span class='line'>2009-07-29 20:59:18+0200 [Broker,client] SlaveBuilder.remote_print(buildbot-full): message from master: attached
</span><span class='line'>2009-07-29 20:59:18+0200 [Broker,client] sending application-level keepalives every 600 seconds
</span><span class='line'>Meanwhile, in the other terminal, in the master log, if you tail the log you should see lines like this:
</span><span class='line'>
</span><span class='line'>2011-03-13 18:46:58-0700 [Broker,1,127.0.0.1] slave 'example-slave' attaching from IPv4Address(TCP, '127.0.0.1', 41306)
</span><span class='line'>2011-03-13 18:46:58-0700 [Broker,1,127.0.0.1] Got slaveinfo from 'example-slave'
</span><span class='line'>2011-03-13 18:46:58-0700 [Broker,1,127.0.0.1] bot attached
</span><span class='line'>2011-03-13 18:46:58-0700 [Broker,1,127.0.0.1] Buildslave example-slave attached to runtests</span></code></pre></td></tr></table></div></figure>


<p>You should now be able to go to <a href="http://localhost:8010,">http://localhost:8010,</a> where you will see a web page similar to:
<img src="http://docs.buildbot.net/current/_images/index.png"></p>

<p>Click on the Waterfall Display link and you get this:</p>

<p><img src="http://docs.buildbot.net/current/_images/waterfall-empty.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vs编译错误及解决办法]]></title>
    <link href="http://sweetdark.github.com/blog/2014/07/17/vs-error-collection/"/>
    <updated>2014-07-17T18:18:48+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/07/17/vs-error-collection</id>
    <content type="html"><![CDATA[<h3>error C2220: 警告被视为错误 &ndash; 没有生成“object”文件</h3>

<p>这种错误的原因是：原因是该文件的代码页为英文，而我们系统中的代码页为中文。
解决方案：
1. 在VS2010以后在文件->高级保存选项，设置UTF-8的格式，重新保存一次。 或者用其它的程序保存成UTF-8的格式。</p>

<ol>
<li>如果上述不能去掉错误，还可以点击项目，右击选择属性->配置属性->c/c++&ndash;>常规，将“警告视为错误”的选项改为“否”。就可以！</li>
</ol>


<h3>error C2143: 语法错误 : 缺少“;”(在“类型”的前面)</h3>

<p>C99之前都要求，函数内的局部变量要在开始处定义。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">f</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;j is %d&quot;</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这可能出现在c文件编译的时候，VS2012都不完全支持C99。须要调整一下代码。把函数内的局部变量放到函数开头去定义。或者改成cpp后缀的文件</p>

<p>VS2010之后开始支持C99，所以在VS2008之前如果出现 找不到 stdint.h 文件的话。可以升级到VS2010之后。</p>

<h3>LNK2001: 无法解析的外部符号 __iob 问题的解决方法</h3>

<ol>
<li><p>缺少libc.lib
解决这个问题的方法是去掉链接到libc.lib，具体地点：项目-〉属性-〉配置属性-〉链接器-〉忽略特定库。</p></li>
<li><p>unresolved external symbol <code>__iob</code>
这个<code>__iob</code>找不到的问题费了我大部分的时间。跟踪到stdio.h文件，发现那里有个关于iob的宏，终于搞定。加入一句话到.cpp文件中：<code>extern "C" { FILE _iob[3] = {__iob_func()[0], __iob_func()[1], __iob_func()[2]}; }</code></p></li>
<li><p>NULL iterator
STL已经不能有NULL迭代器这么一说了，想想也对，在NULL迭代器上进行++或&mdash;之类的是不成立的。</p></li>
<li><p>结构体默认函数
在VC6中，结构体的默认运算符==或者&lt;之类的如果不实现也可以作为STL元素放入list等容器中。但VC8不行了，因为它已经不再为结构体生成缺省的操作符函数。</p></li>
</ol>


<p>该错误主要是由于静态库在VC6编译而主程序在VC2005编译，大家用的CRT不同。解决办法，代码中增加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="kt">FILE</span> <span class="n">_iob</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">__iob_func</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span> <span class="n">__iob_func</span><span class="p">()[</span><span class="mi">1</span><span class="p">],</span> <span class="n">__iob_func</span><span class="p">()[</span><span class="mi">2</span><span class="p">]};</span>
</span></code></pre></td></tr></table></div></figure>


<p>此错误的产生根源：
在VC6的stdio.h之中有如下定义</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">_CRTIMP</span> <span class="k">extern</span> <span class="kt">FILE</span> <span class="n">_iob</span><span class="p">[];</span>
</span><span class='line'><span class="cp">#define stdin (&amp;_iob[0])</span>
</span><span class='line'><span class="cp">#define stdout (&amp;_iob[1])</span>
</span><span class='line'><span class="cp">#define stderr (&amp;_iob[2])</span>
</span></code></pre></td></tr></table></div></figure>


<p>stdin、stdout、stderr是通过查<em>iob数组得到的。所以，VC6编译的程序、静态库只要用到了printf、scanf之类的函数，都要链接</em>iob数组。</p>

<p>而在vc2005中，stdio.h中变成了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">_CRTIMP</span> <span class="kt">FILE</span> <span class="o">*</span> <span class="kr">__cdecl</span> <span class="nf">__iob_func</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="cp">#define stdin (&amp;__iob_func()[0])</span>
</span><span class='line'><span class="cp">#define stdout (&amp;__iob_func()[1])</span>
</span><span class='line'><span class="cp">#define stderr (&amp;__iob_func()[2])</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>_iob</code>数组不再是显式的暴露出来了，需要调用<em><em>iob_func()函数获得。所以vc6的静态库链接VC2005的C运行库就会找不到</em>iob数组.
通过重新定义
<code>FILE _iob[3] = {__iob_func()[0], __iob_func()[1], __iob_func()[2]};</code>
就把vc6需要用到的</em>iob数组搞出来了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JNI Manual GetFieldID]]></title>
    <link href="http://sweetdark.github.com/blog/2014/07/09/jni-manual/"/>
    <updated>2014-07-09T21:32:08+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/07/09/jni-manual</id>
    <content type="html"><![CDATA[<p>在JNI中要访问结构体中的字段，首先要获得这个字段的FieldID。然后通过Get<Type>Field和Set<Type>Field来访问和修改。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//C的接口</span>
</span><span class='line'><span class="n">jfieldID</span> <span class="nf">GetFieldID</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clazz</span><span class="p">,</span>
</span><span class='line'>      <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">sig</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//C++的接口</span>
</span><span class='line'><span class="n">jfieldID</span> <span class="nf">GetFieldID</span><span class="p">(</span><span class="n">jclass</span> <span class="n">clazz</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">sig</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>描述</strong></p>

<blockquote><p>返回一个字段的FieldID或者为NULL（如果操作失败），这个字段是用字段和描述串来指定的。然后把FieldID作为Get<Type>Field和Set<Type>Field的参数来访问这个字段。这个字段必须是可以通过clazz来访问的. 当然这个字段可以是clazz类的父类, clazz必须是非空的。
GetFieldID会初始化未初始化的类
GetFieldID不可以用来获取数组的长度。应该用GetArrayLength来获取数组的长度。</p></blockquote>

<p><strong>异常</strong></p>

<blockquote><p>NoSuchFiledError: 如果指定的字段没有找到
ExceptionInInitializeError: 如果类初始化失败。
OutOfMemoryError：系统内存不够</p></blockquote>

<figure class='code'><figcaption><span>Java结构体Person.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ID</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">native</span> <span class="n">Person</span> <span class="nf">OnePerson</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>本地方法的实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jobject</span> <span class="n">JNICALL</span> <span class="nf">Java_Person_OnePerson</span>
</span><span class='line'>  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse 工具]]></title>
    <link href="http://sweetdark.github.com/blog/2014/07/09/eclipse-tools/"/>
    <updated>2014-07-09T19:33:01+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/07/09/eclipse-tools</id>
    <content type="html"><![CDATA[<h2>配置Javap工具</h2>

<p>在Eclipse的Menu中打开Run->External Tools->External Tools Configurations
添加一个新的项。
<img src="https://farm3.staticflickr.com/2928/14617040064_088658d740_o.png">
<img src="https://farm3.staticflickr.com/2912/14639067183_6776a117b8_b.jpg">
javap这个工具可以用来输出java类 对应jni的描述。
<img src="http://farm3.staticflickr.com/2939/14619183735_dfb1841c44_b.jpg">
把Signature 后面的字符串拷贝就行了（<strong>后面的分号也要拷贝</strong>）。这样可以在GetField中使用了。
env->GetField(cls, &ldquo;fieldName&rdquo;, &ldquo;Signature&rdquo;);
javah的工具配置类似。</p>

<h2>定位文件目录</h2>

<p>跟VS一样，VS在标签中右键打开文件目录一样。Eclipse须要配置。也是在External Tool中。
新建一个
<img src="http://farm3.staticflickr.com/2931/14618685852_2340a8acab_b.jpg">
Build选项下面就不要勾上build before launch了。</p>

<p><a href="http://www.open-open.com/bbs/view/1320934157953/">Eclipse快捷键 10个最有用的快捷键</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Andriod ndk error local reference table overflow Max 512]]></title>
    <link href="http://sweetdark.github.com/blog/2014/07/09/local-reference-table-overflow/"/>
    <updated>2014-07-09T12:57:43+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/07/09/local-reference-table-overflow</id>
    <content type="html"><![CDATA[<h1>引言</h1>

<p>在Android开发中，常会遇到 local reference table overflow的错误。原因是从java代码进入jni层的本地代码调用时，Dalvik就会创建一张local reference表来存储local reference， 这张表的表项数有最大限制。一般为512个。当表项数超过最大值限制时，Dalvik就会抛出异常。</p>

<figure class='code'><figcaption><span>下面这段代码就会导致溢出</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">jclass</span> <span class="n">strinClass</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">800</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">stringClass</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="s">&quot;java/lang/String&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">.....</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>什么是Local References？</h1>

<p>大多数的JNI函数都创建了Local reference（以下简称为<em>LR</em>）。 比如 NewObject, NewString&hellip;. 和 FindClass 等。</p>

<p>一个<em>LR</em>只有在创建它的的一个局部作用域内有效。在超出这个作用域之后，就可能会被释放。 所有的<em>LR</em>在本地函数调用时创建的，在这个本地函数返回时就会被释放。</p>

<p>你不能把一个Local reference 保存在静态变量中，然后在后面继续调用，这是不安全的。</p>

<figure class='code'><figcaption><span>错误的例子</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* This code is illegal */</span>
</span><span class='line'><span class="n">jstring</span>
</span><span class='line'><span class="nf">MyNewString</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jchar</span> <span class="o">*</span><span class="n">chars</span><span class="p">,</span> <span class="n">jint</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">jclass</span> <span class="n">stringClass</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">jmethodID</span> <span class="n">cid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">jcharArray</span> <span class="n">elemArr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">jstring</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">stringClass</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">stringClass</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="n">env</span><span class="p">,</span>
</span><span class='line'>                                        <span class="s">&quot;java/lang/String&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">stringClass</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span> <span class="cm">/* exception thrown */</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/* It is wrong to use the cached stringClass here,</span>
</span><span class='line'><span class="cm">       because it may be invalid. */</span>
</span><span class='line'>    <span class="n">cid</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetMethodID</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">stringClass</span><span class="p">,</span>
</span><span class='line'>                              <span class="s">&quot;&lt;init&gt;&quot;</span><span class="p">,</span> <span class="s">&quot;([C)V&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">elemArr</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewCharArray</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewObject</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">stringClass</span><span class="p">,</span> <span class="n">cid</span><span class="p">,</span> <span class="n">elemArr</span><span class="p">);</span>
</span><span class='line'>    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">elemArr</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span>
</span><span class='line'><span class="nf">Java_C_f</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">c_str</span> <span class="o">=</span> <span class="p">...;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">MyNewString</span><span class="p">(</span><span class="n">c_str</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Java 中</span>
</span><span class='line'><span class="p">...</span> <span class="o">=</span> <span class="n">C</span><span class="p">.</span><span class="n">f</span><span class="p">();</span>
</span><span class='line'><span class="p">...</span> <span class="o">=</span> <span class="n">C</span><span class="p">.</span><span class="n">f</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>假设我调用了两次Java_C_f。 其中调用了MyNewString， MyNewString的想法是把stringClass这个<em>LR</em> 初始化一次后保存起来，下次可以继续用。但根据JNI的规则。在MyNewString返回时，所有的<em>LR</em>都会被释放。所以第二次调用时stringClass就是Invalid的。</p>

<p>虽然VM会在本地函数返回时，释放所有的<em>LR</em>，但我们也可以显示的控制<em>LR</em>的释放。<em>LR</em>引用的对象只有在，<em>LR</em>无效的时候才会被GC回收，在MyNewString函数中调用的DeleteLocalRef 释放中间的变量elemArr，这样GC可以立即回收这个<em>LR</em> 不然elemArr这个<em>LR</em>会等到本地函数MyNewString返回时才被回收。</p>

<p><em>LR</em>只能在创建它的线程中使用，在其它的线程中使用它是错误的。所以用一个全局变量保存在其它线程中用是不可行的。</p>

<!--more-->


<h2>释放引用</h2>

<figure class='code'><figcaption><span>错误的例子</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//1.FindClass </span>
</span><span class='line'>
</span><span class='line'><span class="c1">//例如，</span>
</span><span class='line'>
</span><span class='line'><span class="n">jclass</span> <span class="n">ref</span><span class="o">=</span> <span class="p">(</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="s">&quot;java/lang/String&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">ref</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="mf">2.</span><span class="n">NewString</span><span class="o">/</span> <span class="n">NewStringUTF</span><span class="o">/</span><span class="n">NewObject</span><span class="o">/</span><span class="n">NewByteArray</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//例如，</span>
</span><span class='line'>
</span><span class='line'><span class="n">jstring</span>     <span class="p">(</span><span class="o">*</span><span class="n">NewString</span><span class="p">)(</span><span class="n">JNIEnv</span><span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="n">jchar</span><span class="o">*</span><span class="p">,</span> <span class="n">jsize</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="n">jchar</span><span class="o">*</span> <span class="p">(</span><span class="o">*</span><span class="n">GetStringChars</span><span class="p">)(</span><span class="n">JNIEnv</span><span class="o">*</span><span class="p">,</span> <span class="n">jstring</span><span class="p">,</span> <span class="n">jboolean</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>        <span class="p">(</span><span class="o">*</span><span class="n">ReleaseStringChars</span><span class="p">)(</span><span class="n">JNIEnv</span><span class="o">*</span><span class="p">,</span> <span class="n">jstring</span><span class="p">,</span> <span class="k">const</span> <span class="n">jchar</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">jstring</span>     <span class="p">(</span><span class="o">*</span><span class="n">NewStringUTF</span><span class="p">)(</span><span class="n">JNIEnv</span><span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="p">(</span><span class="o">*</span><span class="n">GetStringUTFChars</span><span class="p">)(</span><span class="n">JNIEnv</span><span class="o">*</span><span class="p">,</span> <span class="n">jstring</span><span class="p">,</span> <span class="n">jboolean</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>        <span class="p">(</span><span class="o">*</span><span class="n">ReleaseStringUTFChars</span><span class="p">)(</span><span class="n">JNIEnv</span><span class="o">*</span><span class="p">,</span> <span class="n">jstring</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">ref</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="mf">3.</span> <span class="n">GetObjectField</span><span class="o">/</span><span class="n">GetObjectClass</span><span class="o">/</span><span class="n">GetObjectArrayElement</span>
</span><span class='line'>
</span><span class='line'><span class="n">jclass</span> <span class="n">ref</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetObjectClass</span><span class="p">(</span><span class="n">robj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">ref</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="mf">4.</span><span class="n">GetByteArrayElements</span>
</span><span class='line'>
</span><span class='line'><span class="n">jbyte</span><span class="o">*</span> <span class="n">array</span><span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetByteArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="n">jarray</span><span class="p">,</span><span class="o">&amp;</span><span class="n">isCopy</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseByteArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="n">jarray</span><span class="p">,</span><span class="n">array</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">input</span> <span class="o">=</span><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="n">jinput</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">isCopy</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="n">jinput</span><span class="p">,</span><span class="n">input</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ol>
<li><p><a href="http://journals.ecs.soton.ac.uk/java/tutorial/native1.1/implementing/refs.html">Local and Global References</a></p></li>
<li><p><a href="http://www.soi.city.ac.uk/~kloukin/IN2P3/material/jni.pdf">The Java ™  Native Interface Programmer’s Guide and Specification</a></p></li>
<li><p><a href="http://mysuperbaby.iteye.com/blog/1603817">http://mysuperbaby.iteye.com/blog/1603817</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多个github用户配置SSH KEY的切换]]></title>
    <link href="http://sweetdark.github.com/blog/2014/07/05/config-mutil-ssh-key-user/"/>
    <updated>2014-07-05T17:01:53+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/07/05/config-mutil-ssh-key-user</id>
    <content type="html"><![CDATA[<p>如果你在github有多个帐户。那要在不同的帐户之间切换SSH Key。可以config来配置SSH key
假设你有两个private key文件为 id_rsa1 和 id_rsa2
生成ssh key的命令如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen -t rsa -C "youremail"</span></code></pre></td></tr></table></div></figure>


<p>在git bash下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/.ssh
</span><span class='line'>touch config
</span><span class='line'>#打开config 如果你用的是vim 可以 vim config 
</span></code></pre></td></tr></table></div></figure>


<p>打开后编辑如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host firstkey 
</span><span class='line'>  HostName github.com
</span><span class='line'>  User git
</span><span class='line'>  IdentityFile ~/.ssh/id_rsa1
</span><span class='line'>Host secondkey
</span><span class='line'>  HostName github.com
</span><span class='line'>  User git
</span><span class='line'>  IdentityFile ~/.ssh/id_rsa2</span></code></pre></td></tr></table></div></figure>


<p><strong>注意 Host是你的 git的SSH地址对应的地址。 也就是说 git@firstkey:yourname/your.git  这样就会找到Host 为firstkey的key了</strong>
只需要把原先的<a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#58;&#103;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#x62;&#46;&#x63;&#111;&#x6d;">&#103;&#105;&#x74;&#64;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#x6d;</a> 改为git@firstkey 就可以了,更改远程地址的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote set-url [name] [url]
</span><span class='line'>git remote set-url --push [name] [url]</span></code></pre></td></tr></table></div></figure>


<p>还要把key加入到ssh-agent中，命令如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-add ~/.ssh/id_rsa1
</span><span class='line'>ssh-add ~/.ssh/id_rsa2
</span><span class='line'>#该命令如果报错：Could not open a connection to your authentication agent.无法连接到ssh agent
</span><span class='line'>#可先执行
</span><span class='line'>eval "ssh-agent -s" 或者 ssh-agent bash</span></code></pre></td></tr></table></div></figure>


<p>例子：</p>

<figure class='code'><figcaption><span>在同一机器不同目录下克隆远程同一个repo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git@firstkey:xxx.git
</span><span class='line'>
</span><span class='line'>git clone git@secondkey:xxx.git
</span></code></pre></td></tr></table></div></figure>


<p>上面的两条clone命令，虽然关联到同一个repo，却是通过不同ssh连接，当然也是不同的git账号。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何部署已有的octopress Blog]]></title>
    <link href="http://sweetdark.github.com/blog/2014/07/03/how-to-install-octproess/"/>
    <updated>2014-07-03T17:06:14+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/07/03/how-to-install-octproess</id>
    <content type="html"><![CDATA[<p><strong>注意 你的系统的环境变量一定不要有中文, 如果Rake中提示 invalid byte sequence in UTF-8 (ArgumentError) 请检查你的所有的系统环境变量</strong></p>

<ol>
<li>下载和安装git， 把git安装目录的bin和cmd文件目录加到path中。</li>
<li>下载和安装ruby1.9.3，安装时可以勾选 加到path中。 安装完成后可以通过ruby &mdash;version来测试是否安装成功</li>
<li>去网上下载一个<a href="https://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe">DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe</a> 解压到一个目录如E:/Devkit。dos cd 到这个目录。执行如下命令:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby dk.rb init 
</span><span class='line'>ruby dk.rb install</span></code></pre></td></tr></table></div></figure>


<p><strong>
安装之后，要把这个 E:/Devkit/mingw/bin这个目录加到你的系统环境path，如果已经安装了MinGw并且在path中配置好的，要把这个mingw拷贝过去覆盖掉。
</strong></p>

<p>博客的代码高亮需要python环境的支持。去下个python2.7安装。python 安装完成后。执行下面的命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>easy_install pygments</span></code></pre></td></tr></table></div></figure>


<h2>设置本地环境</h2>

<p>为了支持中文UTF-8编码，在Windows的环境变量中增加下面的选项。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LANG = zh_CN.UTF-8
</span><span class='line'>LC_ALL = zh_CN.UTF-8</span></code></pre></td></tr></table></div></figure>


<ul>
<li>配置git</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global user.name "yourname"
</span><span class='line'>git config --global user.email "youremail"</span></code></pre></td></tr></table></div></figure>


<p>更新gem的更新源，ruby的官方网站经常被和谐。换成国内的更新源，这样速度就快多了，变更如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem sources -a http://ruby.taobao.org/
</span><span class='line'>gem sources -r http://rubygems.org/</span></code></pre></td></tr></table></div></figure>


<h2>下载并配置Blog</h2>

<p>在某个目录下，DOS命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:sweetdark/sweetdark.github.com.git sweetdark
</span><span class='line'>
</span><span class='line'>如果clone下来只有master分支，那可以新建个source分支，
</span><span class='line'>git checkout -b source 
</span><span class='line'>这个命令会新建source分支并切换到source分支。
</span><span class='line'>再执行git pull origin source 把远程的github上source分支拉到本地source分支。
</span><span class='line'>
</span><span class='line'>cd sweetdark
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>配置好之后，DOS cd 到sweetdark目录下就可以写blog了。请确保你在source 分支下，通过git branch 命令可以查看。你在哪个分支下。 git checkout source 可以切换到source分支</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["title"] #创建个新的文章，在source/_post目录下，打开它，就可以编辑了。
</span><span class='line'>
</span><span class='line'>编辑完保存之后。
</span><span class='line'>rake generate #生成网页
</span><span class='line'>rake preview #预览 打开127.0.0.1:4000 可以看到。
</span><span class='line'>rake deploy #发布
</span><span class='line'>
</span><span class='line'>然后记得提交，须要权限，要ssh的private key。
</span><span class='line'>git add .
</span><span class='line'>git commit -m "your commit message"
</span><span class='line'>git push origin source
</span></code></pre></td></tr></table></div></figure>


<p>git remote -v 命令可以查远程的地址。
<img src="../images/gitremote.png" alt="" />
有不懂的git命令都可以用git command &mdash;help 来查这个command。</p>

<p>为了确保安全不造成混乱，以后每次写blog之前，都要检查，你是否是在source分支下，是否跟服务器上是一致的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout source #切换到source分支
</span><span class='line'>git pull origin source #更新服务器上的内容到本地</span></code></pre></td></tr></table></div></figure>


<h2>注意事项</h2>

<ul>
<li>图片最好是上传到一些可以保存图片的网站上，然后用 octopress 的Image 标签来引用， 相关用法<a href="http://octopress.org/docs/plugins/image-tag/%E3%80%82">http://octopress.org/docs/plugins/image-tag/%E3%80%82</a>
用markdown语法也是可以的，不要写本地的相对路径（如上面的那张图片，会导致在Tag目录下看不到</li>
</ul>


<p>相关的文章
octopress+github 构建blog <a href="http://xuhehuan.com/783.html">在Github上搭建Octopress博客</a></p>

<p><a href="http://octopress.org/">http://octopress.org/</a> 官方文档必看。这里有许多官方的plugin介绍。包括代码高亮，插入网络上图片等。</p>

<p><a href="http://qingbo.net/picky/502-markdown-syntax.html">MarkDonw的语法，文章就是用markdown语法的，很简单。</a></p>

<p>-git的学习</p>

<p>英文10本
<a href="http://sixrevisions.com/resources/git-tutorials-beginners/#comments">http://sixrevisions.com/resources/git-tutorials-beginners/#comments</a></p>

<p>中文</p>

<p><a href="http://gitbook.liuhui998.com/index.html">http://gitbook.liuhui998.com/index.html</a></p>

<p>详解系列
<a href="http://blog.jobbole.com/24379/">http://blog.jobbole.com/24379/</a>
<a href="http://blog.jobbole.com/25808/">http://blog.jobbole.com/25808/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim 命令组合]]></title>
    <link href="http://sweetdark.github.com/blog/2013/08/08/vim-component/"/>
    <updated>2013-08-08T21:14:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/08/08/vim-component</id>
    <content type="html"><![CDATA[<h4>以下的命令都是在非insert模式下执行的</h4>

<h1>vim 与跳转命令的组合</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dw 从光标处开始往后删除一个字
</span><span class='line'>dW 从光标处开始往后删除一个长字
</span><span class='line'>d$ 从光标处开始往后删除到行尾
</span><span class='line'>d0 从光标处开始往前删除到行头
</span><span class='line'>d^ 从光标处开始往前删除到第一个字符头
</span><span class='line'>D  删除一整行
</span><span class='line'>dnw 往后删除多个字符
</span><span class='line'>dd 删除一行包含换行符
</span><span class='line'>df* 删除到第一个出现*包括*字符的字符串.
</span><span class='line'>
</span><span class='line'>&lt;action&gt;i&lt;object&gt; 对在object范围中的内容进行action操作
</span><span class='line'>如：
</span><span class='line'>di) 在删除当前光标匹配的括号中的字符
</span><span class='line'>(i &gt;= 3 && i &lt; 5)  此时将删除括号内的内容，只留下括号
</span><span class='line'>&lt;action&gt;a&lt;object&gt; 对object范围包含object进行action操作
</span><span class='line'>da) 把括号也删除
</span><span class='line'>
</span><span class='line'>同理适用于 yank的一切
</span><span class='line'>yw 复制一个字
</span><span class='line'>yy, ydw, yW, yf* ynf* yi) ya) 等等
</span><span class='line'>
</span><span class='line'>同理也适用于v 可视模式
</span><span class='line'>vw vW vf* vi) 等等
</span><span class='line'>......
</span></code></pre></td></tr></table></div></figure>


<h1>与寄存器的组合</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"byy 把一行复制到寄存器b
</span><span class='line'>"bp 粘贴寄存器b的内容
</span><span class='line'>同理适用于 [a-zA-Z]的寄存器</span></code></pre></td></tr></table></div></figure>


<h1>重复命令</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>. 重复执行上一次操作
</span><span class='line'>@a 执行寄存器a记录的操作
</span><span class='line'>@@ 执行寄存器的操作
</span><span class='line'>n@@ 执行多次</span></code></pre></td></tr></table></div></figure>


<h1>录制宏</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>qa 开始记录操作 保存到寄存器a
</span><span class='line'>....
</span><span class='line'>q 在非insert 模式下完成记录
</span><span class='line'>
</span><span class='line'>@a 执行寄存器a中的操作</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim 移动命令]]></title>
    <link href="http://sweetdark.github.com/blog/2013/08/07/vim-8-7/"/>
    <updated>2013-08-07T21:27:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/08/07/vim-8-7</id>
    <content type="html"><![CDATA[<h2>Vim移动命令小结：</h2>

<h3>word和WORD 字和长字的介绍</h3>

<p>word代表一个单词，有字母和数字组成 或者使 一列非字母和数字的字符串， 不包含空格，tab,和换行。
A word consists of a sequence of letters, digits and underscores, or a sequence of other non-blank characters, separated with white space (spaces, tabs, <EOL>). An empty line is also considered to be a word.
Use &lsquo;w&rsquo;, &lsquo;e&rsquo;, and &lsquo;b&rsquo; to navigate words.
Special case: &ldquo;cw&rdquo; is treated like &ldquo;ce&rdquo; if the cursor is on a non-blank. This is because &ldquo;cw&rdquo; is interpreted as change-word, and a word does not include the following white space.</p>

<p>Example: (each word is surrounded by a rectangle)</p>

<p>|while| |(|next_line1| |!==| |&ldquo;|The END|!&rdquo;)| |do| |{|</p>

<p>  |next_line1| |=| |readNextLine|();|</p>

<p>|}|</p>

<p>WORD 长字代表一系列的字符串。 由blank tab 换行区分
A WORD consists of a sequence of non-blank characters, separated with white space. An empty line is also considered to be a WORD.
Use &lsquo;W&rsquo;, &lsquo;E&rsquo;, and &lsquo;B&rsquo; to navigate WORDs.
Special case: &ldquo;cW&rdquo; is treated like &ldquo;cE&rdquo; if the cursor is on a non-blank. This is because &ldquo;cW&rdquo; is interpreted as change-WORD, and a WORD does not include the following white space.
Example: (each WORD is surrounded by a rectangle)</p>

<p>|while| |(next_line1| |!==| |&ldquo;The END!&rdquo;)| |do| |{|</p>

<p>  |next_line1| |=| |readNextLine();|</p>

<p>|}|</p>

<h1>vim移动命令Normal模式下</h1>

<h2>文件滚动</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;C-u&gt; 上滚动半屏
</span><span class='line'>
</span><span class='line'>&lt;C-d&gt; 下滚动半屏
</span><span class='line'>
</span><span class='line'>&lt;C-f&gt; 下滚动全屏
</span><span class='line'>
</span><span class='line'>&lt;C-b&gt; 上滚动全屏
</span><span class='line'>
</span><span class='line'>H 跳到当前页首行
</span><span class='line'>
</span><span class='line'>M 跳到当前页中间
</span><span class='line'>
</span><span class='line'>L 跳到当前页尾行
</span><span class='line'>
</span><span class='line'>N% 按百分比跳
</span><span class='line'>
</span><span class='line'>% 单独一个%代表在(),[],{}寻找匹配移动
</span><span class='line'>
</span><span class='line'>[{ 跳转到匹配当前}的 {位置
</span><span class='line'>
</span><span class='line'>]} 跳转到匹配当前{的 }位置。
</span><span class='line'>
</span><span class='line'>NG 或:n 跳转到N行
</span><span class='line'>
</span><span class='line'>n n为数字，从当前行往下移动n行
</span><span class='line'>
</span><span class='line'>nf* 跳转到第n个出现*字符的位置，包含*字符  大写F 为反向
</span><span class='line'>
</span><span class='line'>nt* 跳转到第n个出现*字符的前面，不包含*字符 如t, 跳转到第一个,的前面。大写T为反向</span></code></pre></td></tr></table></div></figure>


<h2>大段移动</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[ 跳转到下一段的{处
</span><span class='line'>
</span><span class='line'>]] 跳转打下一段的}处</span></code></pre></td></tr></table></div></figure>


<h2>标记移动</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>m[a-z|A-Z] 来标记位置 ，然后通过'[a-z|A-Z]来移动到标记的行，行首。使用\`[a-z|A-Z]则移动精确的行和列</span></code></pre></td></tr></table></div></figure>


<h2>相对于光标滚屏</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>在阅读代码时，有时我们需要根据光标所在的位置滚屏，把光标所在行移动窗口的顶端、中间或底部，这时就可以用到”zt“、”zz“和”zb“。</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>不同窗口间的移动</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;C-w&gt; + hjkl 在上下左右分屏的窗口移动
</span><span class='line'>
</span><span class='line'>&lt;C-w&gt; + w 一次跳到下一个窗口</span></code></pre></td></tr></table></div></figure>


<h2>文件间切换命令</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:bn 在当前窗口打开下一个文件
</span><span class='line'>
</span><span class='line'>:bp 在当前窗口打开前一个文件
</span><span class='line'>
</span><span class='line'>:sp filename 用分屏的方式打开另一个文件</span></code></pre></td></tr></table></div></figure>


<h2>折叠行并移动</h2>

<p>···</p>

<pre><code>zo – 打开光标下的折叠
zO – 循环打开光标下的折叠，也就是说，如果存在多级折叠，每一级都会被打开
zc – 关闭光标下的折叠
zC – 循环关闭光标下的折叠 
</code></pre>

<p>···
更多的命令，请参阅手册(:help folding)。</p>

<p>vim提供了一些命令在折叠间快速移动：
···</p>

<pre><code>[z – 到当前打开折叠的开始
]z – 到当前打开折叠的结束
zj – 向下移动到下一个折叠的开始处
zk – 向上移动到上一个折叠的结束处 
</code></pre>

<p>···</p>

<h2>跳转</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;C-o&gt; 跳转到前一次跳转的位置
</span><span class='line'>&lt;C-i&gt; 跳转到后一次跳转的位置
</span><span class='line'>'.  跳转到上一次编辑修改过的位置</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ogl step9 插值]]></title>
    <link href="http://sweetdark.github.com/blog/2013/07/10/ogl-step9/"/>
    <updated>2013-07-10T07:27:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/07/10/ogl-step9</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sweetdark/openglex">Get The Source</a></p>

<h1>背景</h1>

<p>这节主要演示3D管道的重要部分————插值是光栅化处理程序处理从顶点缓冲区取出来的变量。正如你所看到的，为了能在屏幕上显示，你需要指明VS的输出变量是&#8217;gl_Position&#8217;. 这是一个4维的向量包含着顶点的齐次坐标。向量的XYZ分量除以W分量（透视分割），XY分量超出范围[-1,1]的Z分量超出[0,1]的都将被裁剪。结果被转换到屏幕空间坐标，然后几何图元通过光栅化程序被渲染到屏幕上。光栅化程序在三角形的三个顶点间进行插值，然后访问每一个在三角形内的像素执行片段着色器进行处理。
片段着色器返回一个颜色缓冲区中的像素颜色。如果片段着色器没处理该变量那么驱动器会进行优化，放弃VS中影响该变量的指令（在这种情况下着色程序会合并VS和FS）</p>

<p>两个非常常见的依赖于插值的变量是三角形的法线和纹理坐标。顶点的法线会在所有包含这个顶点的三角形中法线计算一个平均值。 如果对象不是完全平滑的那就意味着每个三角形的三个顶点的法线是各不相同的。 法线用于光照计算产生更真实的光照影响。纹理坐标也是相似的。这些纹理是模型的一部分有每个顶点指定。 为了用纹理覆盖三角形，需要对每个像素进行采样操作。为么个像素选择正确的纹理坐标。这些坐标是由插值产生的。</p>

<p>在这一节我们会看到使用插值产生不同的颜色覆盖三角形的表面。 由于我很懒，我们直接在VS里产生颜色。一个更乏味的方法是从顶点缓冲区中提供。一般你不会通过顶点缓冲区提供，你会提供一个纹理坐标然后从纹理中采样一个颜色。这个颜色在后面会进行光照计算。</p>

<hr />

<h1>代码漫游</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">out</span> <span class="n">vec4</span> <span class="n">Color</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在管道之间传输的参数要声明为&#8217;out&#8217;，在着色器中定义为全局变量。这个颜色是一个4-vector，XYZ分量代表RGB值，W分量代表alpha值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Color</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="n">clamp</span><span class="p">(</span><span class="n">Position</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">),</span> <span class="mf">1.0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>颜色在图形管道中通常用范围为[0.0, 1.0]的浮点数进行表示。该值随后会被映射到0~255的颜色通道上。我们设置顶点的位置作为颜色值。首先我们使用内建的函数clamp();确保值在0.0-1.0的范围内。这是因为三角形的左下角的点位于(-1,-1)，且小于等于0的值都会被渲染为黑色。这样的话左下角的角都会是黑色的。我们通过夹紧使得左下角的颜色值大于0.</p>

<p>clamp函数并不会改变向量的维数，智慧改变它的值。但我们输出的变量是4-vector的形式。所以我们使用GLSL的符号&#8217;vec4(vec3,W)&lsquo;来创建一个4-vector包含了3-vector并增加了一个w值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">in</span> <span class="n">vec4</span> <span class="n">Color</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>VS输出的变量，在FS中接受输入的变量。因为这个变量会被光栅化程序进行插值处理，所以每一个FS会对应一个不同的颜色值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">FragColor</span> <span class="o">=</span> <span class="n">Color</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们使用插值的颜色作为片段的颜色。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ogl step8 缩放Scaling Transformation]]></title>
    <link href="http://sweetdark.github.com/blog/2013/07/07/ogl-step8/"/>
    <updated>2013-07-07T22:02:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/07/07/ogl-step8</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sweetdark/openglex">Get The Source</a></p>

<h1>背景</h1>

<p>缩放变换很简单，就是改变物体的大小。如果你想使用同一个模型构造大小不一样的物体以适应不同的分辨率。你可以同时缩放3个坐标轴，也可以只缩放其中的一个或者两个来让物体变得更瘦身，更精简。</p>

<p>你想要缩放哪一维，只需对应的改变矩阵对角线上的值就可以了。</p>

<h1>代码漫游</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">sinf</span><span class="p">(</span><span class="n">Scale</span><span class="p">);</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mf">0.0f</span><span class="p">;</span>        <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="mf">0.0f</span><span class="p">;</span>        <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'><span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mf">0.0f</span><span class="p">;</span>        <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">sinf</span><span class="p">(</span><span class="n">Scale</span><span class="p">);</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="mf">0.0f</span><span class="p">;</span>        <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'><span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mf">0.0f</span><span class="p">;</span>        <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mf">0.0f</span><span class="p">;</span>        <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="n">sinf</span><span class="p">(</span><span class="n">Scale</span><span class="p">);</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'><span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mf">0.0f</span><span class="p">;</span>        <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mf">0.0f</span><span class="p">;</span>        <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="mf">0.0f</span><span class="p">;</span>        <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mf">1.0f</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>与上一节不同的只是这个矩阵。三角形会随着正弦值(0,1]由小变大，为0时缩放到最小三角形消失。在[-1, 0)时只是反过来而已。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ogl step7 旋转Rotation Transformation]]></title>
    <link href="http://sweetdark.github.com/blog/2013/07/07/ogl-step7/"/>
    <updated>2013-07-07T19:18:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/07/07/ogl-step7</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sweetdark/openglex">Get The Source</a></p>

<h1>背景</h1>

<p>这节主要讲旋转变换。给定一个点和一个角度，绕一个坐标轴旋转。在X，Y，Z中保持一个值不变（绕该轴旋转的值不变），另外两个坐标改变。我们可以绕Z轴，Y轴，X轴旋转。甚至可以绕任意向量进行宣召。
考虑下面的图形：
<img src="http://ogldev.atspace.co.uk/www/tutorial07/rotation.png">
我们沿着圆从(x1, yz)旋转到(x2,y2)。换句话说，我们把(x1, y1)旋转α角。假设半径是1.有如下的等式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x1 = cos(α1)
</span><span class='line'>y1 = sin(α1)
</span><span class='line'>x2 = cos(α1+α2)
</span><span class='line'>y2 = sin(α1+α2)</span></code></pre></td></tr></table></div></figure>


<p>三角函数</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cos(α+β) = cosαcosβ-sinαsinβ
</span><span class='line'>sin(α+β) = sinαcosβ+cosαsinβ</span></code></pre></td></tr></table></div></figure>


<p>使用上面的公式对x2和y2进行扩展得</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x2 = cosα1costα2 - sinα1sinα2
</span><span class='line'>y2 = sinα1cosα2 + cosα1sinα2</span></code></pre></td></tr></table></div></figure>


<p>上面的图形是，Z轴指向屏幕里面，从屏幕外向里看XY平面。如果X&amp;Y 是4维向量的一部分，绕Z轴旋转的矩阵的形式如下：
<img src="http://ogldev.atspace.co.uk/www/tutorial07/07_01.png">
绕Y轴旋转的矩阵：
<img src="http://ogldev.atspace.co.uk/www/tutorial07/07_02.png">
绕X轴旋转的矩阵：
<img src="http://ogldev.atspace.co.uk/www/tutorial07/07_03.png"></p>

<h1>代码漫游</h1>

<p>我们只需要把上一次的代码做稍微的修改，就可以实现旋转了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">cos</span><span class="p">(</span><span class="n">Scale</span><span class="p">);</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">sin</span><span class="p">(</span><span class="n">Scale</span><span class="p">);</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'><span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">Scale</span><span class="p">);</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">cos</span><span class="p">(</span><span class="n">Scale</span><span class="p">);</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'><span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'><span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在是绕z轴旋转。你可以尝试着绕其他轴旋转。但绕其他轴旋转没有3d到2d的投影变换，显得多余。接下来将会介绍所有的变换。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ogl step6 Translation Transformation]]></title>
    <link href="http://sweetdark.github.com/blog/2013/07/05/ogl-step6/"/>
    <updated>2013-07-05T12:34:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/07/05/ogl-step6</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sweetdark/openglex">Get The Source</a></p>

<h1>背景</h1>

<p>这一节开始介绍3D环境下物体的转换。通用的方式是用矩阵或多个矩阵连乘最后乘以顶点坐标来实现转换。后面的每一节都会详解一种转换。</p>

<p>下图是把左图的三角形平移到右图的位置。
<img src="http://ogldev.atspace.co.uk/www/tutorial06/translation.png">
一种方式是提供向量的位置作为一个一致变量给着色器然后在处理每一个顶点是加上这个向量来实现平移的效果。然而，这种方式不是通用的转换方式。另外的，如果这个顶点值改变了，那么后面的转换就是基于这个被改变的顶点进行转换了，而不是平移前的转换了。这很麻烦。一个更好的方式是用一个矩阵代表平移乘以其他的转换矩阵。但是你无法找到一个矩阵乘以左图三角形的左下角的点(0,0),能够得到（1,1）。实际情况是你无法在二维矩阵实现这种转换。通用的公式是M * P = P1(x + v1, y + v2, z + v3).我们需要的是一个矩阵M和一个点P(x, y, z)和一个向量V(v1, v2, v3)。矩阵M平移P到P+V的位置。在P1中我们观察到P1每一维的值是对应的P的值和V的值相加的结果。左边的值可以认为是与单位阵相乘的结果：I * P = P(x, y, z)。所以我们从单位阵开始去寻找一个能够实现右边的每一维的相加结果(&hellip;+V1, &hellip;+V2, &hellip;+V3)的矩阵。 如下图：</p>

<p><img src="http://ogldev.atspace.co.uk/www/tutorial06/equation1.png">
由上可以得出两个结论：
1.  a, b, c, d, e 和 f 其中的任意两个会对每一维度有影响，所以它们必须为0，如此又变为单位矩阵。
2.  因为x，y，z会影响三个维度的值，所以也必须为0.这样的话向量变为零向量，而零向量转换之后还是零向量。</p>

<p>我们必须找到一个矩阵能够提供如下的运算：</p>

<p><img src="http://ogldev.atspace.co.uk/www/tutorial06/equation2.png">
所以我们必须找到一种方式加上v1-v3，上面的a到f必须为0.我们把矩阵增加一行和一列。变为4X4的矩阵。把向量也增加一个维度w变为四维的。最终得到我们的平移矩阵如下：</p>

<p><img src="http://ogldev.atspace.co.uk/www/tutorial06/equation3.png">
现在即使x,y,z都为0.我们也可以实现平移了。</p>

<h2>用4维向量来表示3维的向量也成为齐次坐标，在3D图形中是非常流行的方式。第四维称作&#8217;w&#8217;。在之前的着色器中gl_Position也是齐次坐标。w维在3D投影到2D中扮演着十分重要的角色。在一般情况下点使用w=1,向量则用w=0.原因是点可以被平移而向量不行。你可以改变向量的长度和方向，所有长度和方向一样的向量被认为是一样的，向量是相对的。所以如果w=0，向量乘以平移矩阵结果是一样的向量。</h2>

<!-- more -->


<h1>代码漫游</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">Matrix4f</span> <span class="p">{</span>
</span><span class='line'><span class="kt">float</span> <span class="n">m</span><span class="p">[</span><span class="mi">4</span><span class="p">][</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们把4x4矩阵的定义放在math_3.h中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">GLuint</span> <span class="n">gWorldLocation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们用这个句柄去访问着色器中的一致变量world matrix。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Matrix4f</span> <span class="n">World</span><span class="p">;</span>
</span><span class='line'><span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">Scale</span><span class="p">);</span>
</span><span class='line'><span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'><span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'><span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span> <span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.0f</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面定义的矩阵会在X坐标[-1 1]之间平移。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">glUniformMatrix4fv</span><span class="p">(</span><span class="n">gWorldLocation</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">GL_TRUE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">World</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是glUniform*函数的一种形式加载一致变量到着色器中。这里指定了加载4x4的矩阵，当然还有其他的版本2x2, 3x3 &hellip;。第一个参数是一直变量的位置（我们可以通过glGetUniformLocation()获取)。第二个参数表示我们要更新的矩阵的个数，第三个参数代表数组的方位顺序，GL_TRUE代表行主顺序的数组，C语言就是用这种顺序的。GL_FALSE代表列主顺序的数组，典型的是Fortran语言。</p>

<p>下面的是着色器的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="n">mat4</span> <span class="n">gWorld</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个4x4矩阵的一致变量，还有mat2 和 mat3分别代表2x2 和 3x3的矩阵。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gl_Position</span> <span class="o">=</span> <span class="n">gWorld</span> <span class="o">*</span> <span class="n">vec4</span><span class="p">(</span><span class="n">Position</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在顶点缓冲区中三角顶点是3维的，上面的语句是把它扩充到4维，用1填充。有两种方式来表示4维的顶点，一种是像上面那样，先定义一个3维的顶点，然后在顶点缓冲区中去扩充。第二种是直接定义一个4维的顶点。很明显第二种方式比较浪费空间，因为第4维的值一直是1. 更好的方式是第一种，保留原先的3维的顶点然后在着色器中去连接第四维w。在GLSL中的语法是&#8217;vec4(Position, 1.0)&lsquo;。
总结：在每一帧中我们都生成一个平移矩阵，实现X坐标在[-1 1]之间平移。三角形被平移的归一化盒子外面的将被裁剪。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ogl step5 Uniform Variables]]></title>
    <link href="http://sweetdark.github.com/blog/2013/07/01/ogl-step5/"/>
    <updated>2013-07-01T13:19:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/07/01/ogl-step5</id>
    <content type="html"><![CDATA[<h1>背景</h1>

<p>在这一节中我们将会使用到一个新的着色器变量————一致变量。属性变量与一致变量的不同在于，属性变量是由顶点指定的并在每一次的着色器调用中都会去从顶点缓冲区中读取。然而一致变量是在整个绘制调用保持一致。这也就意味着你在绘制调用前赋了一个值，然后你在每一次调用顶点着色器的时候使用的都是同一个值。着色器有两种类型的参数：一致变量（Uniform variables）指得是在一帧当中保持恒定的数值，典型的参数包括视口的方向和灯光的方向。而易变变量（Varying variables）对于每一个执行单元（包括顶点着色器中的顶点，以及片元着色器中的片元）都是变化的。</p>

<p>在这一节中我们将会用一组一致变量在每一帧中都进行改变，通过GLUT提供的idle回调函数来实现。GLUT只有在窗体改变了尺寸和被其他窗体覆盖的时候会调用回调函数。如果在程序加载之后，我们什么都不做那么回调函数只会被调用一次。我们通过注册一个idle的回调函数来实现循环绘制画面，idle函数会在窗体系统没有接收到任何消息的时候被调用。</p>

<hr />

<h1>代码漫游</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">glutIdleFunc</span><span class="p">(</span><span class="n">RenderSceneCB</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里我们注册一个idle函数。如果你想要使用一个有用的idle回调函数，你需要在它结束是添加一个glutPostRedisplay()函数。否则idle函数会被一直调用，但是渲染函数却不会。glutPostRedisplay()标志了当前窗体需要被重新显示，在下一个GLUT的main循环中绘制回调函数将会被调用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gScaleLocation</span> <span class="o">=</span> <span class="n">glGetUniformLocation</span><span class="p">(</span><span class="n">ShaderProgram</span><span class="p">,</span> <span class="s">&quot;gScale&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">assert</span><span class="p">(</span><span class="n">gScaleLocation</span> <span class="o">!=</span> <span class="mh">0xFFFFFFFF</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在链接了程序之后，我们通过glGetUniformLocation方法去获得gScale一致变量的地址。这是一种C\C++程序执行环境映射到着色器的执行环境。你不能直接访问着色器里的内容也不能直接修改里面的变量。当你编译着色器是，GLSL的编译器就为每一个一致变量建立了一个索引。着色器器内部是通过这个索引对变量进行操作。我们也可以通过glGetUniformLocation获得某个程序内部的变量名的索引。这个函数返回索引，出错时返回-1。检查错误非常重要，着色器内部不存在这个变量（<font color="red">你的变量名拼写错误</font>）或者编译器对这个变量进行了优化（<font color="red">为被使用的变量</font>)都会导致glGetUniformLocation调用失败。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">float</span> <span class="n">Scale</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'><span class="n">Scale</span> <span class="o">+=</span> <span class="mf">0.001f</span><span class="p">;</span>
</span><span class='line'><span class="n">glUniform1f</span><span class="p">(</span><span class="n">gScaleLocation</span><span class="p">,</span> <span class="n">sinf</span><span class="p">(</span><span class="n">Scale</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用一个静态变量Scale，在每次渲染调用是递增。传给着色器的值是Scale的正弦值。会产生一个在-1.0到1.0之间的值。 通过glUniform1f传给着色器。OpenGl提供了多种形式glUniform{1234}{if}。glUniform2i glUniform3f&hellip;etc. glUniform传的第一个参数是索引。</p>

<p>我们只对上一教程的VS段进行修改，FS保持不变</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="kt">float</span> <span class="n">gScale</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>定义一个一致变量。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gl_Position</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="n">gScale</span> <span class="o">*</span> <span class="n">Position</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">gScale</span> <span class="o">*</span> <span class="n">Position</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">Position</span><span class="p">.</span><span class="n">z</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们队X和Y的值进行转换。你知道为什么三角形会在循环到一半时倒过来吗？</p>
]]></content>
  </entry>
  
</feed>
