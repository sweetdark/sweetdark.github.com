<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mario's Blog]]></title>
  <link href="http://sweetdark.github.com/atom.xml" rel="self"/>
  <link href="http://sweetdark.github.com/"/>
  <updated>2013-01-04T22:09:23+08:00</updated>
  <id>http://sweetdark.github.com/</id>
  <author>
    <name><![CDATA[Mario]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2013-1-4随笔]]></title>
    <link href="http://sweetdark.github.com/blog/2013/01/04/new-rome/"/>
    <updated>2013-01-04T22:07:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/01/04/new-rome</id>
    <content type="html"><![CDATA[<p>今天是2013年1月4号，201314即爱你一生一世，很有寓意的一天。无论精神多么独立的人，其情感都会寻找依附。爱情真是让人期盼，令人着迷。</p>

<p>对于爱，多么的期盼那是一份真情。自己一直在做得就是“去伪存真”。我虽然不能完全保证对方的真情实意，但必须保证自己是真情实意的，自己不欺人骗世也就心安了，对于他人的虚情假意，实在没必要为之而气愤和痛苦，拿比人的错误来惩罚自己。我也不希望自己爱上的只是爱的表象，是自己虚幻构造出来的。我变得小心谨慎，特别是在夜深的时候，不要因为寂寞而爱上一个人。我希望我说的每一句话都是真心的，都是发自于当时的真实情感。<strong>感情不能随便拿来开玩笑，时光易逝人很快就会老去，能拥有一份真情是多么幸福的事情，时间唯有真情才能长久</strong>。爱不是一种束缚，不要去争那些无所谓的对与错，输和赢，不要去比较谁付出的更多。我希望她也有她的生活，她的朋友，她的自由，我们能彼此互相理解，宽容，关心和爱护，这就很美好。</p>

<p>如果决定了去爱一个人，就要好好爱她。如果在这个过程中失去了你，我会心痛，但不允许自己去后悔。<strong>“能够失去的东西就不是属于自己的”</strong>，Follow Your Heart！做好自己就是了，其他的一切会随之而来的。</p>

<p>从动心的那一刻开始，我就会去准备，需要耐心~。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非本机快速写博客]]></title>
    <link href="http://sweetdark.github.com/blog/2013/01/04/how-to-pull/"/>
    <updated>2013-01-04T12:51:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/01/04/how-to-pull</id>
    <content type="html"><![CDATA[<p>有时出差，或者去别的地方。要在其他地方写博客怎么办呢。首先安装好机子上的本地环境。参考<a href="http://xuhehuan.com/783.html">这里</a>的搭建本地环境和更新本地环境。然后从github中clone 远程的仓库到本地。
具体步骤：
git clone git://github.com/sweetdark/sweetdark.github.com.git octopress
进入该目录
cd octopress
你用git branch -a命令查看分支
你会发现只是clone了master的分支，没有克隆和创建source分支的。source的文件夹和文件没有克隆下来：
<img src="http://p13.freep.cn/p.aspx?u=v20_p13_photo_1301041302488150_0.jpg"></p>

<p>那么我们要从本地区抓取远程的source分支。
可以执行
git checkout &#8211;track -b reps-branch origin/reps-branch  抓取 reps-branch, 並將此 branch 建立於 local 的 reps-branch
再看一下你的目录：
<img src="http://p13.freep.cn/p.aspx?u=v20_p13_photo_1301041303593154_0.jpg">
是不是可以了。
附上全部命令截图：
<img src="http://p13.freep.cn/p.aspx?u=v20_p13_photo_1301041304293434_0.jpg"></p>

<p>初始化你的github页面的地址
rake setup_github_pages</p>

<p>然后写完博客rake gen_deploy发布之后，别忘了。
用git status检查哪些还没有提交，用git add . 和 git commit -m &#8220;yourmessage&#8221;提交更新
最后要git push origin source</p>

<p>一切搞定。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Markdown写Markdown语法说明]]></title>
    <link href="http://sweetdark.github.com/blog/2013/01/02/write-markdown/"/>
    <updated>2013-01-02T20:16:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/01/02/write-markdown</id>
    <content type="html"><![CDATA[<h2><a href="http://wowubuntu.com/markdown/">原文markdown语法地址</a>  <a href="http://wowubuntu.com/markdown/basic.html">markdown快速入门</a></h2>

<ul>
<li><a href="#overview">概述</a>

<ul>
<li><a href="#philosophy">宗旨</a></li>
<li><a href="#html">兼容HTML</a></li>
<li><a href="#autoescape">特殊字符自动转换</a></li>
</ul>
</li>
<li><a href="#block">区块元素</a>

<ul>
<li><a href="#p">段落和换行</a></li>
<li><a href="#header">标题</a></li>
<li><a href="#blockquote">区块引用</a></li>
<li><a href="#list">列表</a></li>
<li><a href="#precode">代码区块</a></li>
<li><a href="#hr">分隔线</a></li>
</ul>
</li>
</ul>


<hr>


<!-- more -->


<h2 id="overview">概述</h2>


<h3 id="philosophy">宗旨</h3>


<p>Markdown 的目标是实现「易读易写」。</p>

<p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。</p>

<p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>

<h3 id="html">兼容 HTML</h3>


<p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p>

<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>

<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>

<p>要制约的只有一些 HTML 区块元素――比如&lt;div>、&lt;table>、&lt;pre>、&lt;p> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 &lt;p> 标签。</p>

<p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>这是一个普通段落
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>Foo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span><span class='line'>
</span><span class='line'>这是另一个普通段落。
</span></code></pre></td></tr></table></div></figure>


<p>效果如下</p>

<p>这是一个普通段落</p>

<table>
    <tr>
        <td>Foo</td>
    </tr>
</table>


<p>这是另一个普通段落。</p>

<p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的*强调*会没有效果。</p>

<p>HTML 的区段（行内）标签如 &lt;span>、&lt;cite>、&lt;del> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 &lt;a> 或 &lt;img> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p>

<p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p>

<h3 id="autoescape">特殊字符自动转换</h3>


<p>在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &amp;lt; 和 &amp;amp;。</p>

<p>&amp; 字符尤其让网络文档编写者受折磨，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;T」。而网址中的 &amp; 字符也要转换。比如你要链接到：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>http://images.google.com/images?num=30<span class="err">&amp;</span>q=larry+bird
</span></code></pre></td></tr></table></div></figure>


<p>你必须要把网址转换写为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>http://images.google.com/images?num=30<span class="ni">&amp;amp;</span>q=larry+bird
</span></code></pre></td></tr></table></div></figure>


<p>才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p>

<p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;。
所以你如果要在文档中插入一个版权符号 ©，你可以这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;copy;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Markdown 会保留它不动。而若你写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>AT<span class="err">&amp;</span>T
</span></code></pre></td></tr></table></div></figure>


<p>Markdown 就会将它转为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>AT<span class="ni">&amp;amp;</span>T
</span></code></pre></td></tr></table></div></figure>


<p>类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>4 <span class="nt">&lt; 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Markdown 将会把它转换为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>4 <span class="ni">&amp;lt;</span> 5
</span></code></pre></td></tr></table></div></figure>


<p>不过需要注意的是，code 范围内，不论是行内还是区块， &lt; 和 &amp; 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 &amp; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p>

<hr />

<h2 id="block">区块元素</h2>


<h3 id="p">段落和换行</h3>


<p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p>

<p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成<code>&lt;br /&gt;</code> 标签。</p>

<p>如果你确实想要依赖 Markdown 来插入<code>&lt;br /&gt;</code>标签的话，在插入处先按入两个以上的空格然后回车。</p>

<p>的确，需要多费点事（多加空格）来产生 <code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。</p>

<h3 id="header">标题</h3>


<p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。</p>

<p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>This is an H1
</span><span class='line'>=============
</span><span class='line'>
</span><span class='line'>This is an H2
</span><span class='line'>-------------
</span></code></pre></td></tr></table></div></figure>


<p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p>

<p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'># 这是 H1
</span><span class='line'>
</span><span class='line'>## 这是 H2
</span><span class='line'>
</span><span class='line'>###### 这是 H6
</span></code></pre></td></tr></table></div></figure>


<p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'># 这是 H1 #
</span><span class='line'>
</span><span class='line'>## 这是 H2 ##
</span><span class='line'>
</span><span class='line'>### 这是 H3 ######
</span></code></pre></td></tr></table></div></figure>


<h3 id="blockquote">区块引用 Blockquotes</h3>


<p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
</span><span class='line'>&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
</span><span class='line'>&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
</span><span class='line'>&gt;
</span><span class='line'>&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
</span><span class='line'>&gt; id sem consectetuer libero luctus adipiscing.
</span></code></pre></td></tr></table></div></figure>


<p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
</span><span class='line'>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
</span><span class='line'>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
</span><span class='line'>
</span><span class='line'>&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
</span><span class='line'>id sem consectetuer libero luctus adipiscing.
</span></code></pre></td></tr></table></div></figure>


<p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>&gt; This is the first level of quoting.
</span><span class='line'>&gt;
</span><span class='line'>&gt; &gt; This is nested blockquote.
</span><span class='line'>&gt;
</span><span class='line'>&gt; Back to the first level.
</span></code></pre></td></tr></table></div></figure>


<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>&gt; ## 这是一个标题。
</span><span class='line'>&gt;
</span><span class='line'>&gt; 1.   这是第一行列表项。
</span><span class='line'>&gt; 2.   这是第二行列表项。
</span><span class='line'>&gt;
</span><span class='line'>&gt; 给出一些例子代码：
</span><span class='line'>&gt;
</span><span class='line'>&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);
</span></code></pre></td></tr></table></div></figure>


<p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p>

<h3 id="list">列表</h3>


<p>Markdown 支持有序列表和无序列表。</p>

<p>无序列表使用星号、加号或是减号作为列表标记：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>*   Red
</span><span class='line'>*   Green
</span><span class='line'>*   Blue
</span></code></pre></td></tr></table></div></figure>


<p>等同于：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>+   Red
</span><span class='line'>+   Green
</span><span class='line'>+   Blue
</span></code></pre></td></tr></table></div></figure>


<p>也等同于：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>-   Red
</span><span class='line'>-   Green
</span><span class='line'>-   Blue
</span></code></pre></td></tr></table></div></figure>


<p>有序列表则使用数字接着一个英文句点：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>1.  Bird
</span><span class='line'>2.  McHale
</span><span class='line'>3.  Parish
</span></code></pre></td></tr></table></div></figure>


<p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ol&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>Bird<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>McHale<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>Parish<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ol&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你的列表标记写成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>1.  Bird
</span><span class='line'>1.  McHale
</span><span class='line'>1.  Parish
</span></code></pre></td></tr></table></div></figure>


<p>或甚至是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>3. Bird
</span><span class='line'>1. McHale
</span><span class='line'>8. Parish
</span></code></pre></td></tr></table></div></figure>


<p>效果：</p>

<ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>


<p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p>

<p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p>

<p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>

<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
</span><span class='line'>    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
</span><span class='line'>    viverra nec, fringilla in, laoreet vitae, risus.
</span><span class='line'>*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
</span><span class='line'>    Suspendisse id sem consectetuer libero luctus adipiscing.
</span></code></pre></td></tr></table></div></figure>


<p>但是如果你懒，那也行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
</span><span class='line'>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
</span><span class='line'>viverra nec, fringilla in, laoreet vitae, risus.
</span><span class='line'>*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
</span><span class='line'>Suspendisse id sem consectetuer libero luctus adipiscing.
</span></code></pre></td></tr></table></div></figure>


<p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code>&lt;p&gt;</code>标签包起来，举例来说：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>*   Bird
</span><span class='line'>*   Magic
</span></code></pre></td></tr></table></div></figure>


<p>会被转换为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>Bird<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>Magic<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这个：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>*   Bird
</span><span class='line'>
</span><span class='line'>*   Magic
</span></code></pre></td></tr></table></div></figure>


<p>会被转换为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;&lt;p&gt;</span>Bird<span class="nt">&lt;/p&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;&lt;p&gt;</span>Magic<span class="nt">&lt;/p&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果：</p>

<ul>
<li><p>Bird</p></li>
<li><p>Magic</p></li>
</ul>


<p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>1.  This is a list item with two paragraphs. Lorem ipsum dolor
</span><span class='line'>    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
</span><span class='line'>    mi posuere lectus.
</span><span class='line'>
</span><span class='line'>    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
</span><span class='line'>    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
</span><span class='line'>    sit amet velit.
</span><span class='line'>
</span><span class='line'>2.  Suspendisse id sem consectetuer libero luctus adipiscing.
</span></code></pre></td></tr></table></div></figure>


<p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>*   This is a list item with two paragraphs.
</span><span class='line'>
</span><span class='line'>    This is the second paragraph in the list item. You&#39;re
</span><span class='line'>only required to indent the first line. Lorem ipsum dolor
</span><span class='line'>sit amet, consectetuer adipiscing elit.
</span><span class='line'>
</span><span class='line'>*   Another item in the same list.
</span></code></pre></td></tr></table></div></figure>


<p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>*   A list item with a blockquote:
</span><span class='line'>
</span><span class='line'>    &gt; This is a blockquote
</span><span class='line'>    &gt; inside a list item.
</span></code></pre></td></tr></table></div></figure>


<p>如果要放代码区块的话，该区块就需要缩进<em>两次</em>，也就是 8 个空格或是 2 个制表符：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>*   一列表项包含一个列表区块：
</span><span class='line'>
</span><span class='line'>        <span class="err">&lt;</span>代码写在这&gt;
</span></code></pre></td></tr></table></div></figure>


<p>效果：</p>

<ul>
<li><p>一列表项包含一个列表区块：</p>

<pre><code>&lt;代码写在这&gt;
</code></pre></li>
</ul>


<p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>1986. What a great season.
</span></code></pre></td></tr></table></div></figure>


<p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>1986\. What a great season.
</span></code></pre></td></tr></table></div></figure>


<h3 id="precode">代码区块</h3>


<p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p>

<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>这是一个普通段落：
</span><span class='line'>
</span><span class='line'>    这是一个代码区块。
</span></code></pre></td></tr></table></div></figure>


<p>Markdown 会转换成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span>这是一个普通段落：<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>这是一个代码区块。
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Here is an example of AppleScript:
</span><span class='line'>
</span><span class='line'>    tell application &quot;Foo&quot;
</span><span class='line'>        beep
</span><span class='line'>    end tell
</span></code></pre></td></tr></table></div></figure>


<p>会被转换为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span>Here is an example of AppleScript:<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>tell application &quot;Foo&quot;
</span><span class='line'>    beep
</span><span class='line'>end tell
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p>

<p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;footer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="ni">&amp;copy;</span> 2004 Foo Corporation
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>会被转换为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>div class=&quot;footer&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;amp;</span>copy; 2004 Foo Corporation
</span><span class='line'><span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p>

<h3 id="hr">分隔线</h3>


<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>* * *
</span><span class='line'>
</span><span class='line'>***
</span><span class='line'>
</span><span class='line'>*****
</span><span class='line'>
</span><span class='line'>- - -
</span><span class='line'>
</span><span class='line'>---------------------------------------
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>(未完待续)
此文件的源代码点击<a href="https://raw.github.com/sweetdark/sweetdark.github.com/source/source/_posts/2013-01-02-write-markdown.markdown">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客主题的配置]]></title>
    <link href="http://sweetdark.github.com/blog/2013/01/02/blog-config/"/>
    <updated>2013-01-02T12:17:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/01/02/blog-config</id>
    <content type="html"><![CDATA[<p><strong>首先<a href="https://github.com/sweetdark/sweetdark.github.com/tree/source/.themes">我的博客主题</a>下载。把mario目录拷贝到.themes目录下。执行rake install[&#8220;mario&#8221;]</strong> 由于categories不支持中文，我加了tags标签。
装完之后，要改一下_config.yml的配置，在适当的位置添加一行tag_dir: blog/tags  。然后在文章里，添加tags: 标签下面添你的标签名，例如：  tags: [&#8216;Github&#8217;,&#8217;octopress&#8217;]
<img src="http://p13.freep.cn/p.aspx?u=v20_p13_photo_1301021334145207_0.png"></p>

<p>我还在导航栏里 添加了关于我的页面，修改的话，请修改about目录下的index.html文件即可。</p>

<p>关于在侧边栏添加微博插件的问题，我在_includes\asides 下增加了weibo_sina.html只要修改这个文件，替换为你的微博Html代码。微博的html代码的，只要登录你的微博，在设置里，点击我的工具可以产生。
<img src="http://p13.freep.cn/p.aspx?u=v20_p13_photo_1301021321353343_0.png">
然后再_config.yml修改一下配置
default_asides: [asides/recent_posts.html, asides/github.html, asides/weibo_sina.html, asides/googleplus.html]  加上asides/weibo_sina.html即可。</p>

<p>编写markdown文件的工具可以使用<a href="http://markdownpad.com/">markdownPad</a>，推荐使用notepad++编写博客，把经常使用的插件代码用宏录制好，避免重复性的工作。上传图片的工具可以使用http://www1.freep.cn/。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年要点列表]]></title>
    <link href="http://sweetdark.github.com/blog/2013/01/01/important-list/"/>
    <updated>2013-01-01T23:36:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/01/01/important-list</id>
    <content type="html"><![CDATA[<ol>
<li>锻炼身体</li>
<li>认真工作，努力学习</li>
<li>*******************（待填）</li>
<li>端正自己的态度</li>
<li>时刻反省自己</li>
<li>保持自信心</li>
<li>消除消极的和无用的杂念</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年随笔]]></title>
    <link href="http://sweetdark.github.com/blog/2013/01/01/mood/"/>
    <updated>2013-01-01T21:33:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2013/01/01/mood</id>
    <content type="html"><![CDATA[<p>“如果不把思路理清楚就不要回来了”,出去散步前默默的这么对自己说。进入2013年，想给自己定个目标，制定个计划。把那些不重要的琐碎的事先剔除掉，只留下重要的事，人生真的很短暂，尽量去做重要的事。希望自己能有个清醒的头脑，时刻提醒自己不要偏离了轨道，毕竟现实中有
太多的诱惑。那些看起来琐碎的事情以为没浪费多少时间，其实这些时间累积起来是很大的一个数。无论是事业还是感情，都必须清楚坚定，
犹豫不决浪费了很多时间。选择了就怀抱着一种信仰，坚定的走下去。人生有很多条路可以走，我们无法预知未来，也很难评判哪条路会更好。
最重要的事追随自己的内心，去做你想做的事，不要去重复别人的生活。看到别人走了另一条路成功了，就后悔当初为什么没有选择另外一条路是没有意义的，因为如果当初你选择了另一条路，
未必会比过的更好。跟随自己的内心，相信自己的当下的选择就是最好的。</p>

<p><strong>听说过这样一个故事：</strong>
<strong>20岁的年轻人迈斯决定离开家乡，到外面的世界去开创自己的前途。</strong>
<strong>动身之前，迈斯先来拜访本族的族长，请求指点。</strong>
<strong>老族长听了迈斯的打算，想了想，拿出一张纸，在上面写了3个字：“不要怕。”</strong>
<strong>然后抬起头来，望着迈斯说：“孩子，人生的秘诀只有6个字，今天先告诉你3个，供你半生受用。”</strong>
<strong>转眼30年过去了，当年20岁的小伙子迈斯已是50岁的中年人了。他有了一些成就，也平添了很多遗憾。</strong>
<strong>这一天，他回到了家乡，又特意来拜访那位族长。到了族长家里，他才知道老人家几年前已经去世。</strong>
<strong>族长的儿子取出一个密封的信封对他说：“这是我父亲生前留给你的，他说万一有一天你回来时，可能想看它。”</strong>
<strong>迈斯这才想起，30年前他在这里只听到了人生秘诀的一半。另一半是什么呢？</strong>
<strong>他急切地拆开信，打开信纸，上面赫然写着3个大字：“不要悔。”</strong>
<strong>人生在世，中年以前不要怕，中年以后不要悔，这是经验的提炼，智慧的浓缩，也是人人都想追求的人生境界。</strong>
<strong>要做事就不要怕，做过了就不要悔。</strong></p>

<hr />

<p><em>留人间多少爱，迎浮生千重变，和有情人做快乐事，别问是劫是缘。</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随笔]]></title>
    <link href="http://sweetdark.github.com/blog/2012/12/30/daily/"/>
    <updated>2012-12-30T20:55:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2012/12/30/daily</id>
    <content type="html"><![CDATA[<p>  要搬家了，今天先过去把房子打扫干净。我和我姐，还有房东，清理了一整天。。房子实在是太脏了，到处都是灰尘。之前的租客是两个男孩子，住了半年估计都没有打  扫过卫生，房东张姐很生气的，决定以后不租给男孩子住的，因为我和我姐合租，她才答应租给我们。房子的采光很好，冬天的阳光从窗户里照进来，那种感觉很温暖。小区也很安静，房子在顶层九楼就更安静了。安静的享受冬日的阳光，安静的看书，安静的思考，多么美好~哈。</p>

<p>  今天是今年最冷的一天了，水很凉，一开始手浸下去觉得冷的刺骨。但后面活动起来，身子热了就不觉得冷了。我们细心的把房间的每个柜子，格子，窗，床都擦了一遍，看着房子变得亮堂起来，觉得很欣慰。姐总是唠叨着，这里擦干净点，那也擦干净点。张姐也称赞我们打扫的很干净。我说这是习俗吧，年前大扫除，新的一年希望有一个崭新的开始。新的一年为了自己的梦想，为了自己的未来，努力去把眼前的每一步做好。</p>

<p> 新年就要来到了，好期待新的生活，对未来充满信心！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建博客遇到的问题以及总结]]></title>
    <link href="http://sweetdark.github.com/blog/2012/12/29/build-blog-problem/"/>
    <updated>2012-12-29T19:55:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2012/12/29/build-blog-problem</id>
    <content type="html"><![CDATA[<p> 使用octorepss+github搭建博客，在这个过程中遇到了很多问题。其实根本原因是自己过于浮躁，没有详细的研究文档，很匆忙的搭建，并乱改乱折腾，所以到处碰壁。Linux下搭建参考官方文档<br/>
  关于Windows下如何搭建octopress博客这篇文章讲的挺详细的。<a href="http://xuhehuan.com/783.html" title="在Github上搭建Octopress博客">在Github上搭建Octopress博客</a>
  第一个遇到的问题：
<img src="http://ww1.sinaimg.cn/mw690/7485f70fjw1e00h3kzw2cj.jpg"></p>

<p>  我是在windows上装的，但是我按照octopress官网上的Linux的方式去装，装了ruby 1.9.3然后又按照<a href="http://xuhehuan.com/783.html"     title="在Github上搭建Octopress博客">在Github上搭建Octopress博客</a>上介绍的windows的方式去装，结果导致了版本不一致的问题，建议版本最好是按照文章中建议的来装。如果装错了呢，怎么办。会提示版本对应不上的情况，可以修改Gemfile和Gemfile.lock下面的配置，设置到对应的版本号。</p>

<figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>group :development do
</span><span class='line'>  gem 'rake', '~> 10.0.3' #改为你所用的rake版本
</span><span class='line'>  gem 'rack', '~> 1.4.1'
</span><span class='line'>  gem 'jekyll', '~> 0.11.2'
</span><span class='line'>  gem 'rdiscount', '~> 1.6.8'
</span><span class='line'>  gem 'pygments.rb', '~> 0.2.12'
</span><span class='line'>  gem 'RedCloth', '~> 4.2.9'
</span><span class='line'>  gem 'haml', '~> 3.1.6'
</span><span class='line'>  gem 'compass', '~> 0.12.1'
</span><span class='line'>  gem 'rubypants', '~> 0.2.0'
</span><span class='line'>  gem 'rb-fsevent', '~> 0.9'
</span><span class='line'>  gem 'stringex', '~> 1.4.0'
</span><span class='line'>  gem 'liquid', '~> 2.3.0'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake (10.0.3)  #改为你所用的rake版本</span></code></pre></td></tr></table></div></figure>


<p>  如果是发布不成功，没有权限报错如下：那么就是没有添加ssh key。详细解决办法是添加一个ssh key。</p>

<p><img src="http://ww1.sinaimg.cn/mw690/7485f70fjw1e04hxitgftj.jpg"></p>

<p>详细参考这里https://help.github.com/articles/generating-ssh-keys 。
有一点要注意的是Octopress会有两个分支：source（编写博客）和master（生成好的博客）。一般我们用source编写博客，和使用rake generate生成博客。rake deploy是发布到远程的origin master主分支上的。请不要在本地仓库上对master进行编辑，添加，修改等操作，更不要使用git push origin master用本地仓库的master去同步远程的github仓库。你会遇到很多麻烦的，我就是瞎折腾，所以就弄得半死。我建议的操作方式是：步骤如下：</p>

<pre><code>1. git checkout source 切换到source分支上，进行编辑
2. pull origin source 从远程仓库获取最新的并与本地仓库进行合并(如果你是在其他的电脑上工作，这一步很重要），你也可以这样用git fetch orgin source,git merge 。
3. 编辑好博客之后使用 rake gen_deploy可以生成并发布，但不建议这样做，你可以先rake generate，然后用rake preview先在本地预览一下，觉得没问题了在rake deploy发布。
4. 发布完了，别忘记备份到github上。首先git status 检查本地仓库的状态，这时会打印列表并给出相应的指令，然后调用 git add 命令添加你新增的文件，或者合并解决冲突之后的文件。调用git commit -m "yourmessage" 提交。
最后再用git status确认一下，确认无误之后git push origin source，备份到github上。
</code></pre>

<!-- more -->


<p>关于github的一系列教程，推荐几篇文章。
git入门 http://rogerdudler.github.com/git-guide/index.zh.html</p>

<p><a href= "http://blog.jobbole.com/25775/">git 详解系列</a></p>

<p><a href="http://blog.longwin.com.tw/2009/05/git-learn-initial-command-2009/">git命令详解</a></p>

<p>http://blog.jobbole.com/23398/ git管理策略。</p>

<p>附加一些自己遇到的问题：</p>

<p><img src="http://img.my.csdn.net/uploads/201212/29/1356783166_1307.png"></p>

<p>解决办法stackoverflow有人给出。http://stackoverflow.com/questions/2452226/master-branch-and-origin-master-have-diverged-how-to-undiverge-branches</p>

<p><img src="http://img.my.csdn.net/uploads/201212/29/1231245.jpg"></p>

<p>改变远程的仓库的地址请看这里https://help.github.com/articles/changing-a-remote-s-url</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决问题的科学方法]]></title>
    <link href="http://sweetdark.github.com/blog/2012/12/27/solve-problem/"/>
    <updated>2012-12-27T12:15:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2012/12/27/solve-problem</id>
    <content type="html"><![CDATA[<p>科学的方法分为两种归纳法和演绎法。
归纳法就是由通过一些个别现象归纳出普遍性的结论。是一种由个别到一般的论证方法。
而演绎法则是从一般的原则推论出特定的结果。归纳法的例子：
今天早上8点多去上班发现公司还没开门，等到9点才有人来开门。明天还是8点多去，还没开门，后天还是如此。你大概会归纳出，公司没有9点是不会开门的。</p>

<p>演绎法的例子：</p>

<p>电脑的BIOS用的电，是由电池提供的。那么你设置了BIOS的设置，保存之后，发现下次进去是出厂设置。那么你可以推断，是BIOS的电池没电了。</p>

<p>遇到复杂的问题时，你先拿出一个笔记本，把所有的状况写下来，这样你就知道情况如何，问题要怎么解决。不然的话，问题会复杂到让你忘记摸不着头脑，然后忘记了该如何解决，最后只得放弃。
要把问题正确的写下来，要兼顾到六个方面：</p>


<!--more-->


<ol>
<li>问题是什么</li>
<li>假设问题的原因</li>
<li>证实每个问题的假设</li>
<li>预测实验的结果</li>
<li>观察实验的结果</li>
<li>有实验得出结论</li>
</ol>


<p> 科学方法的主要目的是让你能够准确地知道事情的真相，而不会误入歧途。每一个工程师都曾经因为没有准确地思考而大伤脑经。
 这就是为什么大部分科学和机械方面的研究总是显得非常沉闷而小心谨慎。在科学式的思考当中，第一步把问题写下来，只有你确实知道的东西才写下来。</p>

<p>1.问题应该是简单准确的。比如：在打开某个网页的时候，键盘的按键k按了没反应。不要写：键盘有什么问题。这样问题就大了，会导致你后面的假设，和证明的困难</p>

<p>2.假设想到了就可以写下来，但一眼就能看出该假设是错误的就没必要写下来。
根据上面的问题，可以产生下面的假设。</p></p>

<ul>
<li>1.浏览器出错了，识别不了键盘K？</li>
<li>2.键盘K键被其他应用截获，作为快捷键了？</li>
<li>3.键盘K键被该网页截获，作为某个功能的快捷键使用了？</li>
<li>4.电压不稳定引起的？</li>
</ul>


<p>一开始就小心谨慎地记录下来，能节省你不少时间，也不至于完全走迷了路。或者想不起来当时的所做的假设了。所以科学问题从表面上看起来往往非常枯燥，为的就是避免将来可能产生的错误.</p>

<p>3.实验证明的几个步骤
这个证明过程应该是严谨的，必须使推论合理而且准去。例如，摩托车的喇叭响了，修理人员就认为整个电路系统没问题，那么他的问题可就大了。</p>

<p>4.写结论，结论不能写的更多，也不能写的更少，力求要精确，写清楚你做了什么事，经过这个过程得出的确切结果。例如结论只是证明了，电路系统没问题。我们就不能写这辆车是没问题的</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试图片]]></title>
    <link href="http://sweetdark.github.com/blog/2012/12/27/test/"/>
    <updated>2012-12-27T10:13:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2012/12/27/test</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://img.xshuma.com/201211/20525412112642806.jpg"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">abc</span> <span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Use the <code>printf()</code> function.</p>

<p><link rel='stylesheet' type='text/css' href='http://www.osctools.net/js/syntaxhighlighter_3.0.83/styles/shCoreDefault.css'/><div id="highlighter_476120" class="syntaxhighlighter  c"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="c comments">/<em>&nbsp;---示例代码----</em>/</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="c color1 bold">int</code>&nbsp;<code class="c plain">main&nbsp;()&nbsp;{</code></div><div class="line number4 index3 alt1"><code class="c spaces">&nbsp;&nbsp;</code><code class="c keyword bold">return</code>&nbsp;<code class="c plain">0;</code></div><div class="line number5 index4 alt2"><code class="c plain">}</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="c comments">/<em>&nbsp;---示例代码----</em>/</code></div><div class="line number8 index7 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code>&nbsp;</div></div></td></tr></tbody></table></div></p>
]]></content>
  </entry>
  
</feed>
