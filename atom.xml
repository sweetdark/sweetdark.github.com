<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mario's Blog]]></title>
  <link href="http://sweetdark.github.com/atom.xml" rel="self"/>
  <link href="http://sweetdark.github.com/"/>
  <updated>2014-10-12T22:16:08+08:00</updated>
  <id>http://sweetdark.github.com/</id>
  <author>
    <name><![CDATA[Mario]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java 风格指南]]></title>
    <link href="http://sweetdark.github.com/blog/2014/10/09/java-programming-guide/"/>
    <updated>2014-10-09T21:07:38+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/10/09/java-programming-guide</id>
    <content type="html"><![CDATA[<p>[TOC]</p>

<h1>Java Programming Guide</h1>

<blockquote><p>软件首要的技术革命是管理复杂度</p><footer><strong>Steve McConnel</strong> <cite>Code Complete</cite></footer></blockquote>


<blockquote><p>代码越多，问题也就越多</p><footer><strong>Biggie Smalls</strong></footer></blockquote>


<blockquote><p>代码被阅读的次数远远多于写的次数
任何一个傻瓜都会写出能够让机器理解的代码，只有好的程序员才能写出人类可以理解的代码</p></blockquote>

<p>编码规范的目的是在团队中达成一种共识，从而编写出易于阅读和维护的代码。值得庆幸的是Java中有现成的规范和代码风格工具，以及风格检查工具。</p>

<!-- 使用github MarkdDown扩展的语法 -->


<h2>通用命名规范</h2>

<ul>
<li>包命名规范

<blockquote><p>包名统一用小写 mypackage, cn.ritu.cn</p></blockquote></li>
<li>类型名用大小写混合的方式，第一个字母大写. UserInfo</li>
<li>变量名也用大小写混合的方式，第一个字母小写 lineCount</li>
<li>常量全部大写，多个单词之间用_下划线隔开

<blockquote><p>常量是指那些它的内容一直不会改变的量,而不只是声明为final就可以了,如</p></blockquote></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MIN_TIMES</span> <span class="o">=</span> <span class="mi">30</span><span class="o">;</span>
</span><span class='line'> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableList</span><span class="o">&lt;</span> <span class="n">String</span> <span class="o">&gt;</span> <span class="n">NAMES</span> <span class="o">=</span> <span class="n">ImmutableList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;Ed&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="c1">//下面的不是常量</span>
</span><span class='line'> <span class="kd">final</span> <span class="n">String</span> <span class="n">nonStatic</span> <span class="o">=</span> <span class="s">&quot;non-static&quot;</span><span class="o">;</span>
</span><span class='line'> <span class="kd">static</span> <span class="n">String</span> <span class="n">nonFinal</span> <span class="o">=</span> <span class="s">&quot;non-final&quot;</span><span class="o">;</span>
</span><span class='line'> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Set</span><span class="o">&lt;</span> <span class="n">String</span> <span class="o">&gt;</span> <span class="n">mutableCollection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span> <span class="n">String</span> <span class="o">&gt;();</span>
</span><span class='line'> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableSet</span><span class="o">&lt;</span> <span class="n">SomeMutableType</span> <span class="o">&gt;</span> <span class="n">mutableElements</span> <span class="o">=</span> <span class="n">ImmutableSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">mutable</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>方法名用动名词结合的方式，第一个字母小写，大小写混合的方式。不要出现模糊不清的命名情况，如search();</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">getName</span><span class="o">();</span>
</span><span class='line'><span class="n">vertex</span><span class="o">.</span><span class="na">findNearestVertex</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在名字中如果有缩写也要使用大小写混合的方式</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">exportHtmlSource</span><span class="o">();</span> <span class="c1">//而不是exportHTMLSource();</span>
</span><span class='line'> <span class="n">openDvdPlayer</span><span class="o">();</span> <span class="c1">//而不是openDvdPlayer();</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>类中的私有变量要单独用一种方式来表示，在名字后面用_下划线,或者用m_开头，有待讨论。 如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">class</span> <span class="nc">Person</span>
</span><span class='line'> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name_</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>通用的常量的名字应该和它的类型保持一致</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kt">void</span> <span class="nf">setTopic</span><span class="o">(</span><span class="n">Topic</span> <span class="n">topic</span><span class="o">)</span> <span class="c1">// NOT: void setTopic(Topic value)</span>
</span><span class='line'>                            <span class="c1">// NOT: void setTopic(Topic aTopic)</span>
</span><span class='line'>                            <span class="c1">// NOT: void setTopic(Topic t)</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">void</span> <span class="nf">connect</span><span class="o">(</span><span class="n">Database</span> <span class="n">database</span><span class="o">)</span> <span class="c1">// NOT: void connect(Database db)</span>
</span><span class='line'>                                 <span class="c1">// NOT: void connect(Database oracleDB)</span>
</span><span class='line'><span class="c1">// 更具体一点，可以用角色加类型组合的方式来表达</span>
</span><span class='line'> <span class="n">Point</span> <span class="n">startingPoint</span><span class="o">,</span> <span class="n">centerPoint</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>作用域大的变量必须使用具体的长名字来表示，很小范围的可以用缩写如循环中的循环变量i,j,k 如果是多层嵌套则要考虑使用更具体的名字来命名循环变量，如bookIndex</li>
<li>尽量给临时变量起一个更好的名字，不要用temp。</li>
<li>不要把对象的名字或类的名字包含在方法名中</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">line</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span> <span class="c1">//NOT：line.getLineLength();</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>特定的命名规范</h3>

<ul>
<li>get/set 用于访问成员的属性</li>
<li>is前缀的用于布尔变量和返回布尔的方法，有时用has和can前缀更加合适</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">isSet</span><span class="o">,</span> <span class="n">isVisible</span><span class="o">,</span> <span class="n">isFinished</span><span class="o">,</span> <span class="n">isFound</span><span class="o">,</span> <span class="n">isOpen</span>
</span><span class='line'> <span class="kt">void</span> <span class="nf">setFound</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">isFound</span><span class="o">);</span>
</span><span class='line'> <span class="kt">boolean</span> <span class="nf">hasLicense</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li><em>compute</em>可以被用于那些表示计算的方法</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">valueSet</span><span class="o">.</span><span class="na">computeAverage</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li><em>find</em>用于查找的方法</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">vertex</span><span class="o">.</span><span class="na">findNearestVertex</span><span class="o">();</span>
</span><span class='line'><span class="n">matrix</span><span class="o">.</span><span class="na">findSmallestElement</span><span class="o">();</span>
</span><span class='line'><span class="n">node</span><span class="o">.</span><span class="na">findShortestPath</span><span class="o">(</span><span class="n">Node</span> <span class="n">destinationNode</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>initialize</em> 术语用在对象初始化的时候，不要使用<em>init</em>

<blockquote><p>printer.initializeFontSet();</p></blockquote></li>
<li>GUI控件的命名应该包含控件的类型

<blockquote><p>widthScale, nameTexField, leftScrollbar</p></blockquote></li>
<li>复数用于表示集合对象</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Collection</span><span class="o">&lt;</span> <span class="n">Point</span> <span class="o">&gt;</span> <span class="n">points</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">values</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>n</em>前缀可以用于表示若干个对象，这种情况下num不应该被使用

<blockquote><p>nPoints, nLines</p></blockquote></li>
<li><em>No</em>或者<em>total</em>后缀表示对象的总数，而且仅仅使用其中一种方式来表示，不要同时使用</li>
<li><p><em>Min</em>, <em>Total</em>, <em>Sum</em>, <em>Max</em>，<em>Average</em> 这些表示数量,总量，平均值，最大值，总额的限定词统一作为后缀
不要出现前后都有的情况，revenueTotal和totalRevenue这会产生迷惑</p>

<blockquote><p>revenueTotal（总收入），expanseTotal（总支出）</p></blockquote></li>
<li><p>使用对仗词语来命名，如果出现了其中一个，通常情况下也要有另外一个。常见的对仗词有</p>

<blockquote><p>get/set, add/remove, create/destroy, start/stop, insert/delete,
increment/decrement, old/new, begin/end, first/last, up/down, min/max,
next/previous, old/new, open/close, show/hide, suspend/resume, etc.</p></blockquote></li>
<li>不要使用缩写，除了那些领域中的专业词汇。如：html, cpu

<blockquote><p>下列的缩写是不可取的:
cmd 代替 command
comp 代替 compute,compare
cp 代替 copy
init 代替 initialize</p></blockquote></li>
<li>不要使用否定的布尔变量

<blockquote><p>bool isError; // NOT: isNoError
bool isFound; // NOT: isNotFound</p></blockquote></li>
<li>常量要加上类型的前缀</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">int</span>  <span class="n">COLOR</span><span class="err">\</span><span class="n">_RED</span>   <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kd">final</span> <span class="kt">int</span>  <span class="n">COLOR</span><span class="err">\</span><span class="n">_GREEN</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'><span class="kd">final</span> <span class="kt">int</span>  <span class="n">COLOR</span><span class="err">\</span><span class="n">_BLUE</span>  <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'><span class="c1">//或者使用</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">Color</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'> <span class="kd">final</span> <span class="kt">int</span> <span class="n">RED</span>   <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'> <span class="kd">final</span> <span class="kt">int</span> <span class="n">GREEN</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'> <span class="kd">final</span> <span class="kt">int</span> <span class="n">BLUE</span>  <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>异常类后缀应该加上Exception</li>
<li>接口的默认实现应该加上前缀Default</li>
<li>Singleton 单例类通过getInstance方法来获取单例</li>
<li>工厂类创建对象使用new[类名]的方法来创建</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">PointFactory</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Point</span> <span class="nf">newPoint</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{...}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>函数在名称中应该包含它要返回的类型信息，过程的名称则应该具体的描述它做了什么</li>
</ul>


<h2>文件规范</h2>

<ul>
<li>Java文件名首字母大写如Point.java</li>
<li>每个类单独为一个文件，并且和文件名一样。私有的类可以声明为内部的嵌套类</li>
<li>每一行的长度应该控制在80列以内</li>
<li>统一使用2个空格作用缩进，TAB要转换为缩进</li>
<li>未完成的行应该明显的表示出来。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">totalSum</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span> <span class="o">+</span>
</span><span class='line'>         <span class="n">d</span> <span class="o">+</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'><span class="n">method</span><span class="o">(</span><span class="n">param1</span><span class="o">,</span> <span class="n">param2</span><span class="o">,</span>
</span><span class='line'>     <span class="n">param3</span><span class="o">);</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">tableNo</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">tableNo</span> <span class="o">&lt;</span> <span class="n">nTables</span><span class="o">;</span>
</span><span class='line'>   <span class="n">tableNo</span> <span class="o">+=</span> <span class="n">tableStep</span><span class="o">)</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">* 在逗号，分号和操作符等断开,然后下一行的开始与上一行表达式的开始平行</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h2>语句</h2>

<h3>package和import语句</h3>

<ul>
<li>package语句必须在文件的第一句，import语句跟在package语句的后面。 按照功能进行分组，每个组之间用空行分开。按照字典顺序进行排序。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.URL</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.rmi.RmiServer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.rmi.server.Server</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.swing.JPanel</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.swing.event.ActionEvent</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.linux.apache.server.SoapServer</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>引入的类要列出来，不要使用整个包引入的方式java.util.* 来引入整个包;

<h3>类和接口</h3></li>
<li>类和接口的声明顺序

<blockquote><ol>
<li>类和接口的文档说明</li>
<li>类和接口的语句 class 或者 interface</li>
<li>类和接口的变量（包括静态变量）按照public, protected, package,private的顺序列出</li>
<li>构造函数</li>
<li>方法

<h3>方法</h3></li>
</ol>
</blockquote></li>
<li>方法修饰符的顺序

<blockquote><p>访问权限( public, protected, private ) static abstract synchronized final native的顺序</p></blockquote></li>
<li>类型转换

<h3>类型</h3></li>
<li>类型转换必须强制声明,强制转换的前后要留空格 int length = (int) getLength();</li>
<li>数组的声明[]应该紧跟着类型名 String[] names; int[] values;

<h3>变量</h3></li>
<li>变量应该的定义的时候初始化，定义在最小的作用域范围内，在要使用的地方进行定义</li>
<li>一个变量名不应该有双重含义, 如变量 x的第一位来表示某个标志位，后面的倍数来表示坐标</li>
<li>类变量不应该被声明为pulibc，除非这个类是作为结构体使用</li>
<li>变量的生命周期应该保持最短，资源用完应该及时释放

<h3>循环</h3></li>
<li>只有循环控制语句应该被放在for()结构中</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>  <span class="n">sum</span> <span class="o">+=</span> <span class="n">value</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>  <span class="n">sum</span> <span class="o">+=</span> <span class="n">value</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'><span class="c1">// NOT: for (i = 0, sum = 0; i &lt; 100; i++)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>循环变量应该紧挨着循环结构</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">isDone</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>           <span class="c1">// NOT: bool isDone = false;</span>
</span><span class='line'><span class="k">while</span> <span class="o">(!</span><span class="n">isDone</span><span class="o">)</span> <span class="o">{</span>         <span class="c1">//      :</span>
</span><span class='line'>  <span class="o">:</span>                       <span class="c1">//      while (!isDone) {</span>
</span><span class='line'><span class="o">}</span>                         <span class="c1">//        :</span>
</span><span class='line'>                          <span class="c1">//      }</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在循环中避免使用do-while语句</li>
<li>在循环中尽量避免使用continue和break语句</li>
</ul>


<h3>条件</h3>

<ul>
<li>避免复杂的条件判断语句，可以引用临时的布尔变量来降低复杂度</li>
<li>正常情况应该被放在if语句中，异常情况放在else语句中</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">isOK</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">doSomething</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">exception</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>条件语句应该写在单独一行，后面不要接其它的语句了</li>
<li>不要在判断中去执行语句</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">InputStream</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">File</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">fileName</span><span class="o">,</span> <span class="s">&quot;w&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">stream</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">:</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// NOT:</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">File</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">fileName</span><span class="o">,</span> <span class="s">&quot;w&quot;</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">:</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>不要使用魔数，使用具名常量代替</li>
<li>浮点数的书写至少要有一个小数位</li>
<li>静态方法要使用类名来调用，不要使用对象。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span> <span class="c1">//NOT: thread.sleep(1000); getThread().sleep(1000);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>布局和注释</h2>

<h3>布局</h3>

<ul>
<li>缩进为两个空格，TAB符要设置转换为空格</li>
<li>块布局可以是下面的两种</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">while</span> <span class="o">(!</span><span class="n">done</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">doSomething</span><span class="o">();</span>
</span><span class='line'>   <span class="n">done</span> <span class="o">=</span> <span class="n">moreToDo</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="k">while</span> <span class="o">(!</span><span class="n">done</span><span class="o">)</span>
</span><span class='line'> <span class="o">{</span>
</span><span class='line'>   <span class="n">doSomething</span><span class="o">();</span>
</span><span class='line'>   <span class="n">done</span> <span class="o">=</span> <span class="n">moreToDo</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>类的布局如下</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">class</span> <span class="nc">Rectangle</span> <span class="kd">extends</span> <span class="n">Shape</span>
</span><span class='line'>   <span class="kd">implements</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">Serializable</span>
</span><span class='line'> <span class="o">{</span>
</span><span class='line'>   <span class="o">...</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>方法的布局如下</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">someMethod</span><span class="o">()</span>
</span><span class='line'>   <span class="kd">throws</span> <span class="n">SomeException</span>
</span><span class='line'> <span class="o">{</span>
</span><span class='line'>   <span class="o">...</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>条件语句的布局如下，判断条件要另起一行不要跟}在一行</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">condition</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">statements</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">condition</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">statements</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">statements</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">condition</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">statements</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">condition</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">statements</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">statements</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>for语句和while语句的布局如下</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">for</span> <span class="o">(</span><span class="n">initialization</span><span class="o">;</span> <span class="n">condition</span><span class="o">;</span> <span class="n">update</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">statements</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="err">空循环如下：</span>
</span><span class='line'> <span class="k">for</span> <span class="o">(</span><span class="n">initialization</span><span class="o">;</span> <span class="n">condition</span><span class="o">;</span> <span class="n">update</span><span class="o">)</span>
</span><span class='line'> <span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>switch语句的布局如下，switch语句一定要有default:即使是空的</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">switch</span> <span class="o">(</span><span class="n">condition</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">case</span> <span class="n">ABC</span> <span class="o">:</span>
</span><span class='line'>     <span class="n">statements</span><span class="o">;</span>
</span><span class='line'>     <span class="c1">// Fallthrough</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">case</span> <span class="n">DEF</span> <span class="o">:</span>
</span><span class='line'>     <span class="n">statements</span><span class="o">;</span>
</span><span class='line'>     <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">case</span> <span class="n">XYZ</span> <span class="o">:</span>
</span><span class='line'>     <span class="n">statements</span><span class="o">;</span>
</span><span class='line'>     <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">default</span> <span class="o">:</span>
</span><span class='line'>     <span class="n">statements</span><span class="o">;</span>
</span><span class='line'>     <span class="k">break</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>try-catch语句布局如下</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">statements</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">statements</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">statements</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">statements</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">statements</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>空格</h3>

<ul>
<li>操作符两边要有空格</li>
<li>Java保留字后面要跟空格 如 while () , if ()</li>
<li>逗号后面要有空格</li>
<li>冒号两边都要有空格</li>
<li>在for语句中的分号后面要有空格</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">a</span> <span class="o">=</span> <span class="o">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="o">)</span> <span class="o">*</span> <span class="n">d</span><span class="o">;</span> <span class="c1">// NOT: a=(b+c)*d</span>
</span><span class='line'>
</span><span class='line'> <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>   <span class="c1">// NOT: while(true){</span>
</span><span class='line'>   <span class="o">...</span>
</span><span class='line'>
</span><span class='line'> <span class="n">doSomething</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">d</span><span class="o">);</span>  <span class="c1">// NOT: doSomething(a,b,c,d);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">case</span> <span class="mi">100</span> <span class="o">:</span>  <span class="c1">// NOT: case 100:</span>
</span><span class='line'>
</span><span class='line'> <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>  <span class="c1">// NOT: for(i=0;i&lt;10;i++){</span>
</span><span class='line'>   <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>逻辑单元之间要隔一行空行</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="c1">// Create a new identity matrix</span>
</span><span class='line'> <span class="n">Matrix4x4</span> <span class="n">matrix</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Matrix4x4</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// Precompute angles for efficiency</span>
</span><span class='line'> <span class="kt">double</span> <span class="n">cosAngle</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">cos</span><span class="o">(</span><span class="n">angle</span><span class="o">);</span>
</span><span class='line'> <span class="kt">double</span> <span class="n">sinAngle</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">sin</span><span class="o">(</span><span class="n">angle</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// Specify matrix as a rotation transformation</span>
</span><span class='line'> <span class="n">matrix</span><span class="o">.</span><span class="na">setElement</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span>  <span class="n">cosAngle</span><span class="o">);</span>
</span><span class='line'> <span class="n">matrix</span><span class="o">.</span><span class="na">setElement</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span>  <span class="n">sinAngle</span><span class="o">);</span>
</span><span class='line'> <span class="n">matrix</span><span class="o">.</span><span class="na">setElement</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="n">sinAngle</span><span class="o">);</span>
</span><span class='line'> <span class="n">matrix</span><span class="o">.</span><span class="na">setElement</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span>  <span class="n">cosAngle</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// Apply rotation</span>
</span><span class='line'> <span class="n">transformation</span><span class="o">.</span><span class="na">multiply</span><span class="o">(</span><span class="n">matrix</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>类中的每个方法之间前后要有空行</li>
<li>变量的声明要左对齐</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">TextFile</span>  <span class="n">file</span><span class="o">;</span>
</span><span class='line'> <span class="kt">int</span>       <span class="n">nPoints</span><span class="o">;</span>
</span><span class='line'> <span class="kt">double</span>    <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>语句之间也要对齐</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">if</span>      <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">lowValue</span><span class="o">)</span>    <span class="n">compueSomething</span><span class="o">();</span>
</span><span class='line'> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">mediumValue</span><span class="o">)</span> <span class="n">computeSomethingElse</span><span class="o">();</span>
</span><span class='line'> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">highValue</span><span class="o">)</span>   <span class="n">computeSomethingElseYet</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'> <span class="n">value</span> <span class="o">=</span> <span class="o">(</span><span class="n">potential</span>        <span class="o">*</span> <span class="n">oilDensity</span><span class="o">)</span>   <span class="o">/</span> <span class="n">constant1</span> <span class="o">+</span>
</span><span class='line'>         <span class="o">(</span><span class="n">depth</span>            <span class="o">*</span> <span class="n">waterDensity</span><span class="o">)</span> <span class="o">/</span> <span class="n">constant2</span> <span class="o">+</span>
</span><span class='line'>         <span class="o">(</span><span class="n">zCoordinateValue</span> <span class="o">*</span> <span class="n">gasDensity</span><span class="o">)</span>   <span class="o">/</span> <span class="n">constant3</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'> <span class="n">minPosition</span>     <span class="o">=</span> <span class="n">computeDistance</span><span class="o">(</span><span class="n">min</span><span class="o">,</span>     <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">z</span><span class="o">);</span>
</span><span class='line'> <span class="n">averagePosition</span> <span class="o">=</span> <span class="n">computeDistance</span><span class="o">(</span><span class="n">average</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">z</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">switch</span> <span class="o">(</span><span class="n">phase</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">case</span> <span class="n">PHASE_OIL</span>   <span class="o">:</span> <span class="n">text</span> <span class="o">=</span> <span class="s">&quot;Oil&quot;</span><span class="o">;</span>   <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="n">PHASE_WATER</span> <span class="o">:</span> <span class="n">text</span> <span class="o">=</span> <span class="s">&quot;Water&quot;</span><span class="o">;</span> <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="n">PHASE_GAS</span>   <span class="o">:</span> <span class="n">text</span> <span class="o">=</span> <span class="s">&quot;Gas&quot;</span><span class="o">;</span>   <span class="k">break</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>注释</h3>

<ul>
<li>代码应该能够自我解释。复杂的代码要考虑重写</li>
<li>Javadoc的注释使用下面的格式，可以通过工具生成,块注释每行的开头要有*号</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Return lateral location of the specified position.</span>
</span><span class='line'><span class="cm"> * If the position is unset, NaN is returned.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param x    X coordinate of position.</span>
</span><span class='line'><span class="cm"> * @param y    Y coordinate of position.</span>
</span><span class='line'><span class="cm"> * @param zone Zone of position.</span>
</span><span class='line'><span class="cm"> * @return     Lateral location.</span>
</span><span class='line'><span class="cm"> * @throws IllegalArgumentException  If zone is &lt;= 0.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">double</span> <span class="nf">computeLocation</span><span class="o">(</span><span class="kt">double</span> <span class="n">x</span><span class="o">,</span> <span class="kt">double</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">zone</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">throws</span> <span class="n">IllegalArgumentException</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>在注释后面要有空格，注释要跟着代码缩进</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// This is a comment    NOT: //This is a comment</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**                     NOT: /**</span>
</span><span class='line'><span class="cm"> * This is a javadoc          *This is a javadoc</span>
</span><span class='line'><span class="cm"> * comment                    *comment</span>
</span><span class='line'><span class="cm"> */</span>                           <span class="o">*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>       <span class="c1">// NOT:  while (true) { </span>
</span><span class='line'>  <span class="c1">// Do something             // Do something</span>
</span><span class='line'>  <span class="n">something</span><span class="o">();</span>                  <span class="n">something</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>所有公开的类和接口应该使用Javadoc的注释规范</li>
</ul>


<h3>References</h3>

<p>[1] Code Complete, Steve McConnel &ndash; Microsoft Press</p>

<p>[2] Java Code Conventions
<a href="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html</a></p>

<p>[3] Netscape&rsquo;s Software Coding Standards for Java
<a href="http://developer.netscape.com/docs/technote/java/codestyle.html">http://developer.netscape.com/docs/technote/java/codestyle.html</a></p>

<p>[4] C / C++ / Java Coding Standards from NASA
<a href="http://v2ma09.gsfc.nasa.gov/coding_standards.html">http://v2ma09.gsfc.nasa.gov/coding_standards.html</a></p>

<p>[5] Coding Standards for Java from AmbySoft
<a href="http://www.ambysoft.com/javaCodingStandards.html">http://www.ambysoft.com/javaCodingStandards.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[变量命名概要]]></title>
    <link href="http://sweetdark.github.com/blog/2014/10/08/naming-variables/"/>
    <updated>2014-10-08T22:22:05+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/10/08/naming-variables</id>
    <content type="html"><![CDATA[<h2>变量命名</h2>

<h3>命名的一般注意事项</h3>

<ul>
<li>名字是否完整的表达了变量所代表的含义</li>
<li>名字是否足够长，让人一看就懂</li>
<li>名字反映了现实世界中的问题，而不是编程语言中的解决方案</li>
<li>如果有计算值限定符，它们是否被放在了后面 employCount employTotal</li>
<li>是否使用Count和Index来代替Num</li>
</ul>


<h3>为特定的数据类型命名</h3>

<ul>
<li>循环下标的命名有意义吗？（如果是多层嵌套要注意下标的命名）</li>
<li>所有的临时变量都重新命名以更有意义</li>
<li>当布尔变量为真时，变量名能准确表达其意义</li>
<li>枚举类型的命名是否使用了前缀<code>Color_Red</code> <code>Color_Blue</code></li>
<li>具名常量根据其代表的实体，而不是它所代表的数字来命名</li>
</ul>


<h3>命名规则</h3>

<ul>
<li>规则能够区分全局数据，类数据，和局部数据吗？</li>
<li>规则能够区分类型名，具名常量，枚举类型和变量名吗？ 如类型名用大小写混合，具名常量用全部大写</li>
<li>规则能够区分子程序的输入和输出参数吗？</li>
<li>规则尽可能的与语言规则标准兼容吗？</li>
</ul>


<h3>短名字</h3>

<ul>
<li>除非有必要才用短名字</li>
<li>是否避免了为了节省一个字而缩写的情况</li>
<li>所有单词的缩写方式都一致吗</li>
<li>名字能够读出来吗</li>
<li>避免容易看错和读错的名字了吗？ 如i 1 l， o 0 O等</li>
<li>在缩写表里有对缩写进行说明吗</li>
</ul>


<h3>常见的命名问题</h3>

<ul>
<li>容易让人误解的名字</li>
<li>有相近含义的名字</li>
<li>只有一两个字符不同的名字</li>
<li>发音相近的名字</li>
<li>包含数字的名字</li>
<li>英语中经常拼错的名字</li>
<li>与标准的子程序或预定义的变量名冲突的名字</li>
<li>过于随意的名字</li>
<li>含有难读字符的名字</li>
</ul>


<h3>要点</h3>

<ul>
<li>名字要尽可能的具体。那些模糊的或者太通用的可以包含多种用途的名字通常都不是很好</li>
<li>现代编程语言很少需要用到缩写</li>
<li>代码阅读的次数要远多于编写的次数</li>
<li>命名规则应该能够很好的区分全局数据，局部数据，类数据。它们还应该区分类型名，具名常量，枚举类型和变量名</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LNK2001: unresolved external symbol __imp__GetTickCount64@0]]></title>
    <link href="http://sweetdark.github.com/blog/2014/09/25/lnk2001-unresolved-external-symbol-imp-gettickcount64-at-0/"/>
    <updated>2014-09-25T22:16:46+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/09/25/lnk2001-unresolved-external-symbol-imp-gettickcount64-at-0</id>
    <content type="html"><![CDATA[<p>这个链接错误的发生在链接MSVCRT.lib时，原因是链接了的错误版本kernel32.lib等库。修改link条件，把/LIBPATH:&ldquo;libpath&#8221;这个改为正确的path就可以了。如果自己写makefile文件，在使用编译器，链接器，头文件，和库时，要特别小心。如果使用了第三方的库要看这个第三方的库是用什么版本的CRT（运行时库）编译的，是多线程版的还是单线程版的，用Unicode的还是ASCII的。</p>

<p><strong>LINK : fatal error LNK1101: incorrect MSPDB80.DLL version;</strong> 这个错误是在使用cl.exe命令行编译时出现的错误，原因是VC\Bin\下没有“msobj80.dll,mspdb80.dll,mspdbcore.dll,mspdbsrv.exe”这四个文件。
解决的方法：</p>

<ul>
<li>直接从Common7\IDE\下复制这四个文件到VC\Bin\下即可解决</li>
<li>添加系统变量(Path)，这样：我的电脑->属性->高级->环境变量->系统变量，在path中添加C:\Program Files\Microsoft Visual Studio 8\Common7\IDE；，注意结尾最后用“；”隔开！</li>
</ul>


<p>附注：</p>

<blockquote><p>RUN-TIME LIBRARYRun-Time Library是编译器提供的标准库，提供一些基本的库函数和系统调用。
我们一般使用的Run-Time Library是C Run-Time Libraries。当然也有Standard C++ libraries。</p>

<p>C Run-Time Libraries实现ANSI C的标准库。VC安装目录的CRT目录有C Run-Time库的大部分源代码。 C Run-Time Libraries有静态库版本，也有动态链接库版本；有单线程版本，也有多线程版本；还有调试和非调试版本。</p>

<p>动态链接库版本：/MD Multithreaded DLL 使用导入库MSVCRT.LIB</p>

<p>/MDd Debug Multithreaded DLL 使用导入库MSVCRTD.LIB</p>

<p>静态库版本：/ML Single-Threaded 使用静态库LIBC.LIB</p>

<p>/MLd Debug Single-Threaded 使用静态库LIBCD.LIB</p>

<p>/MT Multithreaded 使用静态库LIBCMT.LIB</p>

<p>/MTd Debug Multithreaded 使用静态库LIBCMTD.LIB</p>

<p>若要使用其中的一个运行时库 请忽略其他库：</p>

<ul>
<li>libc.lib 单线程 libcmt.lib、msvcrt.lib、libcd.lib、libcmtd.lib、msvcrtd.lib</li>
<li>libcmt.lib 多线程 libc.lib、msvcrt.lib、libcd.lib、libcmtd.lib、msvcrtd.lib</li>
<li>msvcrt.lib 使用多线程 DLL libc.lib、libcmt.lib、libcd.lib、libcmtd.lib、msvcrtd.lib</li>
<li>libcd.lib 单线程调试 libc.lib、libcmt.lib、msvcrt.lib、libcmtd.lib、msvcrtd.lib</li>
<li>libcmtd.lib 多线程调试 libc.lib、libcmt.lib、msvcrt.lib、libcd.lib、msvcrtd.lib</li>
<li>msvcrtd.lib 使用多线程调试 DLL  libc.lib、libcmt.lib、msvcrt.lib、libcd.lib、libcmtd.lib</li>
</ul>


<p>设置方法：属性，链接器，输入，忽略指定库 libc.lib、libcmt.lib、msvcrt.lib、libcd.lib、libcmtd.lib （使用一个，忽略其他的）</p></blockquote>

<p>[1] 引用<a href="http://www.hz601.org/heaven/">http://www.hz601.org/heaven/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[防御式编程]]></title>
    <link href="http://sweetdark.github.com/blog/2014/09/16/defensive-programming/"/>
    <updated>2014-09-16T21:58:40+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/09/16/defensive-programming</id>
    <content type="html"><![CDATA[<p>防御式编程应该要检查数据的正确性，以及在出现错误数据时应该如何处理（避免程序崩溃，提示用户，让程序正确的崩溃，处理异常等）。
<em>其核心思想是：子程序不应该因传入错误的数据而被破坏，要承认程序都会有问题，都需要被修改。</em></p>

<h2>保护程序免遭非法输入数据的破坏</h2>

<ul>
<li><p>检查所有来源于外部的数据</p>

<blockquote><p>当从文件，用户，网络或其它外部中获取数据时，要检查所有的数据值，以确保值在合法的范围内。</p></blockquote></li>
<li><p>检查输入的参数</p></li>
<li>决定如何处理错误的数据</li>
</ul>


<h2>断言</h2>

<p>断言对于大型的复杂程序或可靠性要求极高的程序来说尤其有用。通过使用断言，程序员能更快排查出因修改代码或者别的原因而导致的错误。</p>

<ul>
<li>输入和输出参数处于合理的范围</li>
<li>子程序开始（结束）执行时，文件处于打开（关闭）状态</li>
<li>文件或流已用只读‘只写或可读写的方式打开</li>
<li>仅用于输入的变量没有被子程序所修改</li>
<li>指针非空</li>
<li>传入子程序的数组或其它窗口至少能容纳X个数据元素</li>
<li>表已初始化，存储着真实的数值</li>
</ul>


<p>断言只是用于开发和维护阶段。</p>

<ul>
<li>用错误处理代码来处理预期会发生的情况，断言来处理绝不应该发生的情况。</li>
<li>避免把要执行的代码放到断言中</li>
<li>用断言来注解前条件和后条件</li>
<li>对于高健壮性的代码，应该先使用断言再处理错误</li>
</ul>


<h2>错误处理技术</h2>

<p>当程序中出现错误数据时，可选的处理方式有如下几种</p>

<ul>
<li>返回中立值</li>
<li>换用下一个正确的数据</li>
<li>返回与前次相同的数据</li>
<li>换用最近的合法值</li>
<li>把警告信息记录到日志文件中</li>
<li>返回一个错误码</li>
<li>调用错误处理子程序</li>
<li>当错误发生时显示错误信息</li>
<li>用最妥当的方式在局部处理错误</li>
<li>关闭程序</li>
</ul>


<h2>异常</h2>

<p>异常是把代码的错误和异常事件传递给调用方的一种特殊手段。 异常和继承一样要审慎明智的使用。</p>

<ul>
<li>用异常通知程序的其余部分，发生了<em>不可忽略</em>的错误</li>
<li>不能用异常来推卸责任</li>
<li>避免在构造和析构函数中抛出异常，除非你在同一个地方捕获它们</li>
<li>在恰当的抽象层次抛出异常</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Employee</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">TaxID</span> <span class="n">GetTaxID</span><span class="p">()</span> <span class="k">throw</span> <span class="n">EOFException</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个EOFException就和GetTexID的抽象层次不一致，暴露了内部是用读取文件的方式实现的。然而在这个抽象层次，调用方是不关心也不依赖于你是用什么方式实现的。所以正确的做法是再抽象一个Exception。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Employee</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">TaxID</span> <span class="n">GetTaxID</span><span class="p">()</span> <span class="k">throw</span> <span class="n">EmployeeDataNotAvailable</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在异常消息中加入导致异常的全部消息</li>
<li>避免使用空的catch语句</li>
<li>了解所用函数库可能抛出的异常</li>
<li>考虑创建一个集中的异常报告机制。 可以自己定制一个异常的机类，里面实现了如何记录异常的方法</li>
<li>把项目中对异常的使用标准化</li>
<li>考虑异常的替换方案</li>
<li><p>使用防火墙的隔离技术，在某一层次上统一做数据的检查（数据验证层），下面的层次就可以不用做检查了。</p>

<blockquote><p>例如在类的public接口统一对传入的参数进行检测，private就不做这些检测了</p></blockquote></li>
<li><p>尽早引入辅助调试的代码和工具</p></li>
<li>计划移除辅助调试代码

<blockquote><ul>
<li>使用类似ant和make这样的工具</li>
<li>使用内置的预处理器 如DEBUG等</li>
<li>使用自己编写的预处理器</li>
<li>使用调试存根</li>
</ul>
</blockquote></li>
</ul>


<h2>采用进攻式编程</h2>

<p>异常情况应该尽早的在开发阶段让它显现出来。</p>

<ul>
<li>确保断言语句使程序终止运行</li>
<li>完全填充分配到的所有内存</li>
<li>完全填充已分配到的文件或流</li>
<li>确保每一个case语句中的default分支或else分支都能产生严重的错误。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高质量的子程序]]></title>
    <link href="http://sweetdark.github.com/blog/2014/09/14/high-quality-routines/"/>
    <updated>2014-09-14T10:24:12+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/09/14/high-quality-routines</id>
    <content type="html"><![CDATA[<p>创建子程序不仅仅是为了重用和更容易调试。下面给出更多合理的理由。</p>

<h2>创建子程序的正当理由</h2>

<ul>
<li>降低复杂度，隐藏细节。</li>
<li>引入中间，易懂的抽象。 把一段代码放进一个命名恰当的子程序中，这是对代码的最好说明，而不是用注释。</li>
<li>避免重复代码</li>
<li>支持子类化，如果是类的方法，那么可以在必要时可以用派生类重写这个方法</li>
<li>隐藏顺序 把事件处理的顺序隐藏起来</li>
<li>提高可移植性， 把一切非标准的API和操作系统等底层相关的API用一个子程序封装起来，可以提高可移植性。</li>
<li>简化复杂的布尔判断 把布尔判断放进子程序中</li>
<li>改善性能 通过使用子程序，你可以只在一个地方优化代码。</li>
<li>隔离复杂度</li>
<li>限制变化所带来的影响</li>
<li>形成中央控制点</li>
</ul>


<h2>在子程序上的设计</h2>

<p><strong>功能上的的内聚性,这个是最好的内聚性，这意味着这个子程序只完成一项功能。如sin, CloseFile，GetCustomerName</strong></p>

<p>不理想的内聚性</p>

<ul>
<li>顺序上的内聚性 指在子程序内包含有需要按特定顺序执行的操作，这些步骤需要共享数据，而且只在全部执行完成后才完成一项特定的功能</li>
<li>通信上的内聚性 指子程序只是共享了数据，代码之间不存在任何联系</li>
<li>临时的内聚性 指一些需要同时执行才放到一起操作的子程序。 如 StartUp。 解决这个问题是让这个子程序的代码分成多个子程序，去调用其它的多个子程序</li>
</ul>


<p>不可取的内聚性</p>

<ul>
<li>过程上的内聚性 指一个子程序按特定的顺序执行。 解决方式：可以把不同的操作放进各自的子程序中</li>
<li>逻辑上的内聚性 指若干个操作放入同一个子程序，通过传入一个控制标志来执行不同的操作。 如InputAll 根据控制标志来判断输入的是姓名，不是用户ID。如果这些子程序共享数据可以考虑包裹到类中</li>
<li>巧合的内聚性</li>
</ul>


<!-- more -->


<h2>好的子程序的名字</h2>

<ul>
<li>描述子程序做的所有事情。 如果这样使得这个子程序名字很长，那么要考虑这个子程序设计的是否合理，需要重构不。</li>
<li>避免使用模糊或表述不清的动词 如HandleCalculation, DealSomething, ProcessInput这些都不能准确说明子程序到底做了什么</li>
<li>不要仅通过数字来分别子程序</li>
<li>根据需要确定子程序名字的长度 最好是在9-15个字符之间</li>
<li>给函数名字时要描述它的返回值</li>
<li>给过程命名时要用强烈的动词加宾语的形式</li>
<li><p>准确使用对仗词</p>

<blockquote><p>add/remove    open/close  new/delete      begin/end
insert/delete show/hide   create/destroy  lock/unlock
get/put       first/last  start/stop      up/down
next/previous get/set     old/new</p></blockquote></li>
<li><p>为常用操作确立命名规则。 比如如何获取ID</p>

<blockquote><p>混乱的方式
employ.id.Get()
people.GetID()
product.id()</p></blockquote></li>
</ul>


<p><strong>子程序的长度尽量控制在200行以内</strong></p>

<h2>如何使用子程序的参数</h2>

<ul>
<li>按照输入-修改-输出的顺序放置参数</li>
<li>如果几个子程序使用了相同的参数，保持顺序一致</li>
<li>使用所有的参数。 不用的参数要删除</li>
<li>把状态或出错变量放到最后</li>
<li>不要把子程序的输入参数当作工作变量</li>
<li>在接口中对参数的假定加以说明。 比如度量信息，使用的是米，不是英里。 可以用注释说明，更好的方式是使用断言</li>
<li>为子程序传递用以维持其接口抽象的变量或对象</li>
<li>使用具名参数</li>
<li>确保实际参数各形式参数相匹配</li>
</ul>


<h2>使用函数，还是过程</h2>

<p>函数是指有返回值的子程序（没有输出参数，只有输入参数），过程是没有返回值的子程序（可以用输出参数）
简而言之，就是一个子程序的主要用途是返回其名字所指明的返回值，那么就用函数，否则用过程</p>

<h3>设置函数的返回值</h3>

<ul>
<li>检查所有可能的返回路径</li>
<li>不要返回局部引用和指针</li>
</ul>


<h2>要点</h2>

<ul>
<li>尽量不要使用宏子程序</li>
<li>创建子程序主要是管理复杂度，使得程序更可靠，更易读，易修改</li>
<li>如果子程序的名字糟糕但恰如其分，要重构代码</li>
<li>有时候把一些简单的操作写成子程序也是非常值得去做的。</li>
<li>只有在某个子程序主要目的是返回其名字所描述的返回值时才用函数，否则用过程</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[要抓住事物的本质才能应变]]></title>
    <link href="http://sweetdark.github.com/blog/2014/09/12/dayly-thinking/"/>
    <updated>2014-09-12T22:13:57+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/09/12/dayly-thinking</id>
    <content type="html"><![CDATA[<p>在许多事物中都存在着共性，如果没有掌握这种共性。每次来一样新的事物都要从头学起很浪费时间。这种不求甚解，靠死记的方式，在短时间内可以立即看到效果，但长时间来看是效率低下的。我们应该学会深入挖掘事物的本质，抽象出它们的共性，学会这样的方法。这样新的事物或技术出现，我们就立马可以与旧的事物联系起来，而且一旦建立起联系之后我们对新事物的记忆和理解也会更加深刻。所以那些一带而过的学习方式，这种看起来是一下子扩宽了知识面，其实是非常肤浅的，而且没有效率的。</p>

<ul>
<li>实验证明钻研式的学习更有效率，虽然难度大些，但这是非常值得。只有这样才能掌握以不变应万变的能力。</li>
<li>要用平常心去面对困难的事物，不要浮躁，不要轻易放弃。</li>
<li>T型人才应该从那一竖开始。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JNI本地多线程FindClass错误]]></title>
    <link href="http://sweetdark.github.com/blog/2014/09/10/jni-tips/"/>
    <updated>2014-09-10T20:47:24+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/09/10/jni-tips</id>
    <content type="html"><![CDATA[<p>今天在用JNI开发Android程序时，遇到一个奇怪的情况。我在本地C++层中用<code>pthread_create</code>创建一个线程，在回调函数中要使用Java层的类，使用FindClass来获取Java的类，但是返回的却是NULL。但在主线程中却是可以用的。后来在Google的<a href="http://developer.android.com/training/articles/perf-jni.html#faq_FindClass">Android Developer的JNI Tips文章</a>中找到了相关信息。</p>

<blockquote><p>If the class name looks right, you could be running into a class loader issue. FindClass wants to start the class search in the class loader associated with your code. It examines the call stack, which will look something like:</p>

<pre><code>Foo.myfunc(Native Method)
Foo.main(Foo.java:10)
dalvik.system.NativeStart.main(Native Method)
</code></pre>

<p>The topmost method is Foo.myfunc. FindClass finds the ClassLoader object associated with the Foo class and uses that.</p>

<p>This usually does what you want. You can get into trouble if you create a thread yourself (perhaps by calling pthread_create and then attaching it with AttachCurrentThread). Now the stack trace looks like this:</p>

<pre><code>dalvik.system.NativeStart.run(Native Method)
</code></pre>

<p>The topmost method is NativeStart.run, which isn&rsquo;t part of your application. If you call FindClass from this thread, the JavaVM will start in the &ldquo;system&rdquo; class loader instead of the one associated with your application, so attempts to find app-specific classes will fail.</p>

<p>There are a few ways to work around this:</p>

<ul>
<li>Do your FindClass lookups once, in JNI_OnLoad, and cache the class references for later use. Any FindClass calls made as part of executing JNI_OnLoad will use the class loader associated with the function that called System.loadLibrary (this is a special rule, provided to make library initialization more convenient). If your app code is loading the library, FindClass will use the correct class loader.</li>
<li>Pass an instance of the class into the functions that need it, by declaring your native method to take a Class argument and then passing Foo.class in.</li>
<li>Cache a reference to the ClassLoader object somewhere handy, and issue loadClass calls directly. This requires some effort.</li>
</ul>
</blockquote>

<p>通过Java层调用JNI的接口,JNI接口参数都会包含一个class的信息，从这个class中可以获取等到相应的ClassLoader。但是如果我自己创建了一个本地的线程来调用了FindClass，却找不到相应的ClassLoader，而使用了“系统”的ClassLoader，而不是你应用程序的ClassLoader，会找不到和这个app相关的类。
解决的方式有如下三种方式：</p>

<ul>
<li>在<code>JNI_OnLoad</code>方法中就去调用FindClass找到相应的jclass并存起来。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">static</span> <span class="n">jclass</span> <span class="n">yourClass</span><span class="p">;</span>
</span><span class='line'><span class="n">jclass</span> <span class="n">yourClass</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="s">&quot;yourClassName&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在你的本地方法中加一个类的参数，调用这个方法时传一个类的实例进去。比如Foo.class作为参数。</li>
<li>在某个地方缓存ClassLoader对象，然后自己通过这个对象调用loadClass方法。
这三个方法中，我觉得第三个方法对我目前的项目最适用吧，只须要把env->FindClass替换成一个方法，方法里面会先调用env->FindClass，如果返回为NULL，我再调用ClassLoader的loadClass方法去加载类。
我在StackOverFlow找到了相应的<a href="http://stackoverflow.com/a/16302771/2770848">实现</a>。</li>
</ul>


<!-- more -->


<p>但在Android中，通过JNI调用ClassLoader用findClass方法还是找不到类，需要用loadClass方法. 同时我想首先通过env->FindClass来找类，如果找不到就用CallObjectMethod调用loadClass去加载。但是发现在找到这个类class之后，调用env->GetMethodID时却会出错。不知道什么原因，在SO上提了个<a href="http://stackoverflow.com/questions/25782353/jni-getmethodid-cause-error-in-native-thread">问题</a>。希望有人能解答。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">JavaVM</span><span class="o">*</span> <span class="n">gJvm</span> <span class="o">=</span> <span class="n">nullptr</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">jobject</span> <span class="n">gClassLoader</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">jmethodID</span> <span class="n">gFindClassMethod</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span> <span class="nf">JNI_OnLoad</span><span class="p">(</span><span class="n">JavaVM</span> <span class="o">*</span><span class="n">pjvm</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">reserved</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">gJvm</span> <span class="o">=</span> <span class="n">pjvm</span><span class="p">;</span>  <span class="c1">// cache the JavaVM pointer</span>
</span><span class='line'>    <span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span> <span class="o">=</span> <span class="n">getEnv</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//replace with one of your classes in the line below</span>
</span><span class='line'>    <span class="n">jclass</span> <span class="n">randomClass</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="s">&quot;com/example/RandomClass&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">jclass</span> <span class="n">classClass</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetObjectClass</span><span class="p">(</span><span class="n">randomClass</span><span class="p">);</span>
</span><span class='line'>    <span class="n">jclass</span> <span class="n">classLoaderClass</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="s">&quot;java/lang/ClassLoader&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">jmethodID</span> <span class="n">getClassLoaderMethod</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetMethodID</span><span class="p">(</span><span class="n">classClass</span><span class="p">,</span> <span class="s">&quot;getClassLoader&quot;</span><span class="p">,</span>
</span><span class='line'>                                             <span class="s">&quot;()Ljava/lang/ClassLoader;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">jobject</span> <span class="n">localClassLoader</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">CallObjectMethod</span><span class="p">(</span><span class="n">randomClass</span><span class="p">,</span> <span class="n">getClassLoaderMethod</span><span class="p">);</span>
</span><span class='line'>  <span class="n">gClassLoader</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewGlobalRef</span><span class="p">(</span><span class="n">localClassLoader</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//我在Android中用findClass不行，改成loadClass才可以找到class</span>
</span><span class='line'>    <span class="n">gFindClassMethod</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetMethodID</span><span class="p">(</span><span class="n">classLoaderClass</span><span class="p">,</span> <span class="s">&quot;findClass&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="s">&quot;(Ljava/lang/String;)Ljava/lang/Class;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">JNI_VERSION_1_6</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">jclass</span> <span class="nf">findClass</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">jclass</span> <span class="n">result</span> <span class="o">=</span> <span class="n">nullptr</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">//这句会出错，所以要处理错误</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">Findclass</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>      <span class="n">jthrowable</span> <span class="n">exception</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">ExceptionOccurred</span><span class="p">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">exception</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">env</span><span class="o">-&gt;</span><span class="n">ExceptionClear</span><span class="p">();</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">jclass</span><span class="o">&gt;</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">CallObjectMethod</span><span class="p">(</span><span class="n">gClassLoader</span><span class="p">,</span> <span class="n">gFindClassMethod</span><span class="p">,</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">name</span><span class="p">)));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">JNIEnv</span><span class="o">*</span> <span class="nf">getEnv</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">status</span> <span class="o">=</span> <span class="n">gJvm</span><span class="o">-&gt;</span><span class="n">GetEnv</span><span class="p">((</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">env</span><span class="p">,</span> <span class="n">JNI_VERSION_1_6</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">status</span> <span class="o">=</span> <span class="n">gJvm</span><span class="o">-&gt;</span><span class="n">AttachCurrentThread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">env</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">nullptr</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">env</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[类的设计]]></title>
    <link href="http://sweetdark.github.com/blog/2014/09/08/working-classes/"/>
    <updated>2014-09-08T11:23:01+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/09/08/working-classes</id>
    <content type="html"><![CDATA[<h2>抽象数据类型</h2>

<p>抽象数据类型可以让你像在现实世界中一样操作实体，而不用关心其底层实现。
<strong>ADT的益处</strong></p>

<ul>
<li>隐藏实现细节</li>
<li>限制改动程序影响的范围</li>
<li>让接口提供更多的信息</li>
<li>让程序的正确性更显而易见，易于检查错误</li>
<li>程序更具自我说明性</li>
<li>无须在程序内部到处传递数据</li>
<li>像现实世界中那样操作实体，不用在底层操作它</li>
</ul>


<p><strong>注意事项</strong>
不要让ADT依赖于存储介质。在命名上须要注意。如操作税率表的RateFile类不如RateTable类的命名方式好，虽然目前是通过文件的方式实现的。</p>

<h2>类优秀的设计</h2>

<ol>
<li>类的接口应该展现一致的抽象层次</li>
<li>一定要理解类所实现的抽象是什么</li>
<li>提供成对的服务 （如打开，关闭）</li>
<li>把不相关的信息移到其它类中</li>
<li>尽可能让接口可编程，而不是表达语义</li>
<li>谨防在修改时破坏类的抽象</li>
<li>不要添加与接口抽象不一致的公用成员</li>
<li>同时考虑类的抽象性和内聚性</li>
</ol>


<!-- more -->


<h2>良好的封装</h2>

<ol>
<li>尽可能地限制类和成员的可访问性</li>
<li>不要公开暴露成员数据</li>
<li>避免把私用的实现细节放入类的接口中 （C++应该使用信封类）</li>
<li>不要对类的使用者做出任何假设</li>
<li>避免使用友元</li>
<li>不要因为一个子程序里仅使用了公用子程序，就把它归入公开接口中</li>
<li>让阅读代码比编写代码更方便</li>
<li>警惕从语义上破坏封装性 （如在调用B之前要先调用A初始化数据，但是由于开发人员知道B中会去调用A，所以不调用A）</li>
<li>留意过于紧密的耦合关系</li>
</ol>


<h2>有关设计和实现的问题</h2>

<h3>包含关系</h3>

<ul>
<li>通过包含来实现有一个的关系</li>
<li>在万不得已情况下才使用private继承来实现有一个关系</li>
<li>数据成员应该控制5~9个</li>
</ul>


<h3>继承关系</h3>

<ul>
<li>用public继承来实现“是一个”的关系</li>
<li>使用继承时必须进行详细说明</li>
<li>遵循LSP原则（派生类完全可以通过基类的接口来使用，而使用者无须了解两者之间的差异）</li>
<li>确保只继承需要继承的部分</li>
<li>把共用的接口，数据和操作尽可能的放在更高的抽象层次上</li>
<li>只有一个实例的继承值得怀疑</li>
<li>只有一个派生类也值得怀疑（提前设计？）</li>
<li>派生类覆盖某个子程序，但在其中不做任何操作，值得怀疑</li>
<li>避免让继承体系过深</li>
<li>尽量使用多态，避免大量的类型检查</li>
<li>让所有数据都是private的</li>
</ul>


<h3>成员函数和数据成员</h3>

<ol>
<li>让类中的子程序数量尽可能少</li>
<li>禁止隐示的产生不需要的成员函数和运算符</li>
<li>对其它类的子程序调用尽可能少</li>
<li>尽量减少类和类之间的合作范围

<blockquote><p>所实例化的类的数量
调用其它类的子程序的数量
调用其它对象返回对象的子程序的数量</p></blockquote></li>
</ol>


<h3>构造函数</h3>

<p>优化采用深层Copy而不是浅Copy，除非论证浅Copy的可行性。 浅Copy虽然会提升性能，但会加大管理的复杂度，过早代码性能优化是没有意义的，后期可以很容易的把深Copy重构为浅Copy</p>

<h3>创建类的原因</h3>

<p>每次创建类时，都应该问一下自己创建这个类的原因。</p>

<ul>
<li>为现实世界中的对象建模</li>
<li>为抽象的对象建模</li>
<li>降低复杂度</li>
<li>隔离复杂度</li>
<li>建立一个控制中心</li>
<li>限制变动的范围</li>
<li>隐藏实现的细节</li>
<li>隐藏全局数据</li>
<li>让参数传递更顺畅</li>
<li>让代码容易重用</li>
<li>把易变的区域封装</li>
<li>把相关操作包装到一起</li>
<li>实现某种特定的重构</li>
</ul>


<h2>核对表</h2>

<h3>抽象</h3>

<ul>
<li>类是否有一个中心目的，类的命名是否符合这个中心目的？</li>
<li>类的接口是否展现一致的抽象？</li>
<li>类的接口是否让人明白应该如何使用它？</li>
<li>类的接口是否足够抽象，是否是个黑盒子？</li>
<li>是否从类中去除无关信息？</li>
<li>是否可以进一步分解为一组类？</li>
<li>修改类时，是否保证其接口的完整性？

<h3>封装</h3></li>
<li>是否把类的成员的可访问性降到最低？</li>
<li>是否完全隐藏了自己的实现细节？</li>
<li>类是松耦合的吗？</li>
<li>类是否避免了对其使用者做假设？

<h3>继承</h3></li>
<li>派生类是否遵循LSP原则？</li>
<li>派生类是否避免了覆盖，不可覆盖的方法？</li>
<li>基类中的数据是否是private的？</li>
<li>继承层次是否很浅？

<h4>跟实现相关的其它问题</h4></li>
<li>类中是否只有大约七个或更少的成员？</li>
<li>类调用其它类的子程序降低到最少了吗？</li>
<li>类是否在绝对必要时才与其它类协作？</li>
<li>所有数据成员是否在构造函数中初始化了？</li>
<li>是否在没有论证的情况下使用了浅拷贝，而不是深拷贝？</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关键的设计概念摘要]]></title>
    <link href="http://sweetdark.github.com/blog/2014/09/02/key-design-concepts/"/>
    <updated>2014-09-02T22:01:20+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/09/02/key-design-concepts</id>
    <content type="html"><![CDATA[<h2>管理复杂度</h2>

<ul>
<li>软件首要的技术使命就是管理复杂度。</li>
<li>我们不应该同时把整个程序塞进大脑里，而应该试着以某种方式组织程序，使得我们在某一时刻只关注于一个特定的部分。</li>
<li>人更易于理解多项简单的东西，而不是一项复杂的东西。</li>
<li>保持子程序的短小精悍可以减小大脑的负担，在抽象层上工作也可以减小大脑的负担。

<h2>如何应对复杂度</h2>

<p>高代价，低效率的设计的三个根源</p></li>
<li>用复杂的方法解决简单的问题</li>
<li>用简单但错误的方法解决复杂的问题</li>
<li>用不恰当的复杂方法解决复杂的问题
正确的方法</li>
<li>把本质的复杂度降至最低</li>
<li>尽可能减少偶然性复杂度

<h2>理想的设计特征</h2></li>
<li>最小的复杂度

<blockquote><p>如果你的设计方案不能让你在专注于程序的一部分时，忽略其它部分，那么这样的设计就是有问题的</p></blockquote></li>
<li>易于维护</li>
<li>松散耦合

<blockquote><p>相互关联的类尽可能的少</p></blockquote></li>
<li>可扩展性</li>
<li>可重用性</li>
<li>高扇入 （一个底层的类被大量的引用）</li>
<li>低扇出 （一个类少量的用其它的类）</li>
<li>可移植性</li>
<li>精简性</li>
<li>层次性 （各个层次保持概念的完整性）

<blockquote><p>如果旧代码不合理，编写一个新系统时，封装一层来调用旧代码</p></blockquote></li>
<li>标准技术 （尽可能的用标准技术）

<h2>设计的层次</h2>

<p>设计分为五层</p></li>
<li>软件系统设计</li>
<li>分解为子系统和包</li>
<li>分解为类</li>
<li>分解为子程序</li>
<li>子程序的详细设计

<blockquote><p>在分解子系统时如果让子系统之间可以的相互通信，那么就失去了分解的意义。应当规定子系统之间的通信规则。</p></blockquote></li>
</ul>


<p><img src="http://i.imgur.com/8M70dbQ.jpg" width="150" height="250" title="'常用的子系统'" ></p>

<!-- more -->


<h2>信息隐藏</h2>

<p><strong>隐藏的是某个易变的区域，某种文件格式，某种数据类型，某个隔离区域, 把这些易变信息的影响限制在某个类或子程序内。 隐藏复杂度，隐藏变化源</strong></p>

<h3>信息隐藏的障碍</h3>

<ul>
<li>信息过度分散</li>
<li>循环依赖</li>
<li>把类内数据误认为全局数据</li>
<li>误认为的性能损耗
在编写类时，时常问自己“这个类需要隐藏什么”

<h3>找出容易改变的区域</h3></li>
<li>找出看起来容易变化的项目</li>
<li>把容易变化的项目分离出来</li>
<li>把容易变化的项目隔离开</li>
</ul>


<blockquote><p>易变化的区域
业务规则
对硬件的依赖
输入输出
非标准的库
状态变量 （用枚举而不是布尔）
数据常量</p></blockquote>

<h3>预料不同程度的变化</h3>

<p><strong>不要把精力放在那些不太可能发生而又很难设计的变化上</strong></p>

<p>首先找出那些对用户有用的尽可能小的子集，这一子集构成系统的核心，不易发生变化。接下来进行尽可能小的扩充，慢慢的扩充。</p>

<h3>松散的耦合</h3>

<p>模块之间的耦合关系应该松散到应该可以很容易的被其它模块使用。</p>

<h4>耦合标准</h4>

<ul>
<li>规模 这里的规模指的是模块之间的连接数。一个参数的子程序比六个参数的子程序的耦合性更低</li>
<li>可见性 模块之间的关系应该是显著的。避免通过操作全局变量的方式来实现模块之间的关联，一个模块不应该了解其它模块的实现细节。</li>
<li>灵活性 灵活性是指模块之间的连接是否容易改动。</li>
</ul>


<p>简而言之，一个模块越容易被其它模块调用，那么它们之间的耦合性就越松散。</p>

<h4>耦合的种类</h4>

<p>下面的耦合关系递增排列</p>

<ol>
<li>简单参数数据耦合 （两个对象传的参数都是基本类型的数据）</li>
<li>简单对象耦合 （一个模块实例化一个对象）</li>
<li>对象参数耦合 （Object1 要求 Object2 传一个Object3给它）</li>
<li>语义上的耦合 （最难缠的耦合关系）

<blockquote><ul>
<li>Model1传个控制标志给Model2，告诉Model2应该做什么。 这种方法要求Model1对Model2的工作细节有了解。 参数是枚举或对象会好一些</li>
<li>Model2修改了某个全局数据之后，Model1使用它。</li>
<li>Model1要求它的Initialize方法必须在它的Routin方法之前调用。Model2知道Routin方法会去调用Initialize方法，所以Model2不调用Initialize</li>
<li>Model1传个部分初始化的Object给Model2，因为它知道Model2只使用Object 7个方法中的3全方法，只用到其中的部分数据。</li>
<li>Modle1传个BaseObject， Model2知道是DerivedObject，强制转成DerivedObject，然后使用DerivedObject的方法</li>
</ul>
</blockquote></li>
</ol>


<p><strong>语义上的耦合是非常危险的，因为更改被调用的模块会破坏调用的模块，而这种错误是编译器无法检查的。</strong>
<strong>松耦合在于一个模块提供了一种间接层次的抽象，另一个模块可以放心的使用它，而不用管里面的细节</strong></p>

<h3>设计模式的益处</h3>

<ul>
<li>设计模式通过提供现成的抽象来减小复杂度</li>
<li>设计模式通过把常见的解决方案的细节予以制度化来减小出错</li>
<li>设计模式通过多种设计方案而带来启发性的价值</li>
<li>设计模式通过把设计对话提高到一个更高的层次来简化交流

<h3>其它启发式方法</h3></li>
<li>高内聚性</li>
<li>构造分层结构</li>
<li>严格描述类契约</li>
<li>分配职责 （单一职责）</li>
<li>为测试而设计 （为了更容易测试，须要模块化，松耦合）</li>
<li>避免失误</li>
<li>有意识的选择绑定时间</li>
<li>创建中央控制点 (控制可以集中在类，子程序，甚至具名常量里。这样为了找到某样事物，你需要查找的地方越少)</li>
<li>画图</li>
<li>保持设计的模块化</li>
<li>使用蛮力</li>
</ul>


<h3>记录你的设计成果</h3>

<ul>
<li>把设计文档插入到代码中。（文档少的情况下，JavaDoc可以生成文档）</li>
<li>用Wiki来记录设计的决策</li>
<li>写总结邮件 （写完发给项目组的所有人，维持一个邮件列表）</li>
<li>用数码相机 拍下画板上的设计图，这种比在电脑上画图高效</li>
<li>在适当的细节使用UML图</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样算是一分优秀的架构规格书]]></title>
    <link href="http://sweetdark.github.com/blog/2014/08/30/architecture-prerequisite/"/>
    <updated>2014-08-30T19:09:52+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/08/30/architecture-prerequisite</id>
    <content type="html"><![CDATA[<h2>架构的先决条件</h2>

<p>架构的质量决定了系统的概念完整性。后者继而决定了软件的最终质量。</p>

<h2>架构的典型组成部分</h2>

<h3>程序组织</h3>

<ol>
<li>系统架构首先要以概要的形式对有关系统做一个综述。</li>
<li>架构定义主要的构造块。根据程序规模的不同，各个构造块可以由单个类或者多个类组成的子系统。每条列在需求中的功能特性至少有一个构造块覆盖到。</li>
<li>明确定义各个构造块的责任。构造块之间的关系和接口。各个构造块之间应该知道的越少越好。明确层次关系，对于每个构造块，可以调用哪些构造块，可以间接调用哪些构造块，不可以调用哪些构造块。</li>
</ol>


<h3>主要的类</h3>

<p>定义20%完成80%的需求的类。</p>

<h3>数据设计</h3>

<p>明确使用什么样的数据形式，为什么不用其它的形式。使用文件还是数据库，为什么？</p>

<h3>业务规则</h3>

<p>如果架构须要依赖于特定的业务，那么要主细描述这么规则。</p>

<h3>用户界面设计</h3>

<p>架构中应当说明使用哪种UI，什么格式，是桌面的，WEB的，命令行接口还是其它的形式。</p>

<h3>变更策略</h3>

<p>明确的需求发生变更时，应当执行什么样的策略，怎样管理。</p>

<h3>资源管理</h3>

<p>一些有限的资源像线程，句柄，内存，硬盘。应当如何合理的使用，统一使用的方式。在嵌入式中，资源短缺的情况下，更应该注重资源的管理。</p>

<h3>安全性</h3>

<p>架构应该描述实现设计层面和代码层面的安全性的方法。</p>

<h3>性能</h3>

<p>明确性能目标，性能要达到什么样的程度。</p>

<h3>可伸缩性</h3>

<p>可伸缩性是指系统增长满足未来需求的能力</p>

<h3>输入输出</h3>

<p>架构应该详细定义读取策略，而且应该描述在哪一层检测IO错误。</p>

<h3>错误处理</h3>

<p>架构应该清楚的说明一种“一致处理错误错误”的策略
* 错误处理是进行纠正还是仅仅检测
* 错误检测是主动还是被动
* 程序的错误如何传播
* 错误消息的处理有什么约定
* 如何处理异常
* 程序在什么层次上处理错误
* 每个类的错误处理上负什么样的责任。是每个类负责处理错误，还是由一组类来处理整个系统的错误
* 使用运行环境中的内部支持的错误处理机制还是自己编写错误处理机制</p>

<h3>容错性</h3>

<p>架构应该定义所期望的容错种类。</p>

<h3>架构的可行性</h3>

<p>应该认证系统的技术可行性</p>

<h3>架构的总体质量</h3>

<ul>
<li>优秀的架构规格书的特点在于讨论了系统中的类，每个类背后的隐藏信息，讨论了“采纳或排斥所有替代方案的理由”</li>
<li>架构的目标应该清楚的表述</li>
<li>架构在很大程度止是与机器和编程语言无关的</li>
<li>架构应该描述所有决策的主要动机</li>
<li>架构应该明确的指出有风险的区域</li>
<li>架构应该在“欠描述”和“过度描述”之间的那条分界线上</li>
<li>架构不应该包含很难理解的东西</li>
</ul>


<blockquote><p>摘自代码大全</p></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Message Queue Introduction]]></title>
    <link href="http://sweetdark.github.com/blog/2014/08/28/windows-message-queue-introduction/"/>
    <updated>2014-08-28T20:59:07+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/08/28/windows-message-queue-introduction</id>
    <content type="html"><![CDATA[<p>Windows 的消息队列和消息处理方式一直没有非常系统的学习过。正如某位名人所说的“一知半解，最危险”。</p>

<blockquote><p>“一知半解”就是对事物的吸收囫囵吞枣、不求甚解，导致判断失准而不自知。因为不彻底了解事物，不精准分辨事物细微差异，以致陷入断章取义、冯京当马凉、张飞打岳飞打得满天飞。而且正因为自以为很懂，他甚至听不进去别人的观点、劝告，当然赖之作出的判断，就会差之毫厘失之千里，甚至造成很大的错误。</p></blockquote>


<p></p>

<h2>创建消息循环</h2>

<p>系统只会为那些须要消息队列来执行某些操作的线程创建消息队列。如果一个线程创建了一个或多个窗口，那么就必须创建一个消息循环来处理消息队列中的消息。（窗口都会有显示和关闭的消息），这个消息循环会从线程的消息队列中检索消息(<code>PeekMessage</code>和<code>GetMessage</code>)，然后分发给相应的处理过程。</p>

<p>由于应用程序中系统会把消息分发给各个窗口，所以线程在创建消息循环之前至少要创建一个窗口。传统的应用程序中，应用会WinMain函数中注册一个窗口类作为主窗口，创建和显示窗口，然后启动消息循环。</p>

<!-- more -->


<p>我们可以使用<code>GetMessage</code>和<code>DispatchMessage</code>函数来创建消息循环。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">HINSTANCE</span> <span class="n">hinst</span><span class="p">;</span>
</span><span class='line'><span class="n">HWND</span> <span class="n">hwndMain</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">PASCAL</span> <span class="nf">WinMain</span><span class="p">(</span><span class="n">HINSTANCE</span> <span class="n">hInstance</span><span class="p">,</span> <span class="n">HINSTANCE</span> <span class="n">hPrevInstance</span><span class="p">,</span>
</span><span class='line'>    <span class="n">LPSTR</span> <span class="n">lpszCmdLine</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nCmdShow</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">MSG</span> <span class="n">msg</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOL</span> <span class="n">bRet</span><span class="p">;</span>
</span><span class='line'>    <span class="n">WNDCLASS</span> <span class="n">wc</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UNREFERENCED_PARAMETER</span><span class="p">(</span><span class="n">lpszCmdLine</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Register the window class for the main window. </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">hPrevInstance</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">style</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">lpfnWndProc</span> <span class="o">=</span> <span class="p">(</span><span class="n">WNDPROC</span><span class="p">)</span> <span class="n">WndProc</span><span class="p">;</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">cbClsExtra</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">cbWndExtra</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">hInstance</span> <span class="o">=</span> <span class="n">hInstance</span><span class="p">;</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">hIcon</span> <span class="o">=</span> <span class="n">LoadIcon</span><span class="p">((</span><span class="n">HINSTANCE</span><span class="p">)</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>            <span class="n">IDI_APPLICATION</span><span class="p">);</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">hCursor</span> <span class="o">=</span> <span class="n">LoadCursor</span><span class="p">((</span><span class="n">HINSTANCE</span><span class="p">)</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>            <span class="n">IDC_ARROW</span><span class="p">);</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">hbrBackground</span> <span class="o">=</span> <span class="n">GetStockObject</span><span class="p">(</span><span class="n">WHITE_BRUSH</span><span class="p">);</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">lpszMenuName</span> <span class="o">=</span>  <span class="s">&quot;MainMenu&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">wc</span><span class="p">.</span><span class="n">lpszClassName</span> <span class="o">=</span> <span class="s">&quot;MainWndClass&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">RegisterClass</span><span class="p">(</span><span class="o">&amp;</span><span class="n">wc</span><span class="p">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">hinst</span> <span class="o">=</span> <span class="n">hInstance</span><span class="p">;</span>  <span class="c1">// save instance handle </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create the main window. </span>
</span><span class='line'>
</span><span class='line'>    <span class="n">hwndMain</span> <span class="o">=</span> <span class="n">CreateWindow</span><span class="p">(</span><span class="s">&quot;MainWndClass&quot;</span><span class="p">,</span> <span class="s">&quot;Sample&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">WS_OVERLAPPEDWINDOW</span><span class="p">,</span> <span class="n">CW_USEDEFAULT</span><span class="p">,</span> <span class="n">CW_USEDEFAULT</span><span class="p">,</span>
</span><span class='line'>        <span class="n">CW_USEDEFAULT</span><span class="p">,</span> <span class="n">CW_USEDEFAULT</span><span class="p">,</span> <span class="p">(</span><span class="n">HWND</span><span class="p">)</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="n">HMENU</span><span class="p">)</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">hinst</span><span class="p">,</span> <span class="p">(</span><span class="n">LPVOID</span><span class="p">)</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// If the main window cannot be created, terminate </span>
</span><span class='line'>    <span class="c1">// the application. </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">hwndMain</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Show the window and paint its contents. </span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ShowWindow</span><span class="p">(</span><span class="n">hwndMain</span><span class="p">,</span> <span class="n">nCmdShow</span><span class="p">);</span>
</span><span class='line'>    <span class="n">UpdateWindow</span><span class="p">(</span><span class="n">hwndMain</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Start the message loop. </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="p">(</span><span class="n">bRet</span> <span class="o">=</span> <span class="n">GetMessage</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">bRet</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// handle the error and possibly exit</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">TranslateMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>            <span class="n">DispatchMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Return the exit code to the system. </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">msg</span><span class="p">.</span><span class="n">wParam</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>线程，窗口，消息队列，消息循环，消息处理过程</h2>

<p>如果一个线程须要消息来处理某些操作，那么可以创建一个（只可以是一个）消息循环来检查消息队列，获取有取的消息并做处理。每个线程有它自己的一个消息队列（如其它线程可以通过PostThreadMessage 来向某个线程发送消息，这个消息会被发到相应的消息队列中），线程可以用PeekMessage来获取消息并处理。线程可以创建一个窗口，这个窗口有自己的消息处理程序如WndProc。线程在接收到消息后可以通过DispatchMessage来分发消息到各个窗口中。</p>

<h2>什么是UI线程</h2>

<p>UI线程指的是有窗口，或控件的线程，有消息队列和消息循环。UI线程有以下几个特点
1.  UI线程有一个消息队列，这个消息队列由操作系统分配。在创建第一个窗体时就分配。
2.  UI线程需要一个消息汞（消息循环）来检索消息，然后分发消息给各个窗体或者控件。
3. COM在这个线程止初始化.一个STA（单线程单元需要让许多窗体特征正常运行，因为这些不是线程安全的）COM确保这些特性是线程安全的。
4. 线程不会在任何操作阻塞。
5. UI线程可以创建多个窗体和控件，这些控件都是由一个消息循环来分发消息的。</p>

<p>在Windows中操作系统只会为UI线程创建消息队列。基本上我们只需要一个UI线程。
MSDN： The system does not automatically create a message queue for each thread，Instead, the system creates a message queue only for threads that perform operations which require a message queue.</p>

<h2>消息队列函数</h2>

<h3>DispatchMessage</h3>

<figure class='code'><figcaption><span>C++</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">LRESULT</span> <span class="n">WINAPI</span> <span class="nf">DispatchMessage</span><span class="p">(</span>
</span><span class='line'>      <span class="n">_In_</span> <span class="k">const</span> <span class="n">MSG</span> <span class="o">*</span><span class="n">lpmsg</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个函数会分发消息到窗口的处理过程中，一般和GetMessage一起用。<strong>note: 这个函数会等待窗口处理过程的返回 是阻塞式的</strong>
如果lpmsg指向一个<code>WM_TIMER</code>和lParam参数不为空，那么这个lParam指向的函数将会被调用，而不会调用窗口的处理过程。</p>

<h3>PeekMessage</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">BOOL</span> <span class="n">WINAPI</span> <span class="nf">PeekMessage</span><span class="p">(</span>
</span><span class='line'>  <span class="n">_Out_</span>     <span class="n">LPMSG</span> <span class="n">lpMsg</span><span class="p">,</span>
</span><span class='line'>  <span class="n">_In_opt_</span>  <span class="n">HWND</span> <span class="n">hWnd</span><span class="p">,</span>
</span><span class='line'>  <span class="n">_In_</span>      <span class="n">UINT</span> <span class="n">wMsgFilterMin</span><span class="p">,</span>
</span><span class='line'>  <span class="n">_In_</span>      <span class="n">UINT</span> <span class="n">wMsgFilterMax</span><span class="p">,</span>
</span><span class='line'>  <span class="n">_In_</span>      <span class="n">UINT</span> <span class="n">wRemoveMsg</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim 插件]]></title>
    <link href="http://sweetdark.github.com/blog/2014/08/27/vim-plugin/"/>
    <updated>2014-08-27T20:59:00+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/08/27/vim-plugin</id>
    <content type="html"><![CDATA[<p>记录一些常用的好用的Vim插件</p>

<h2>通用</h2>

<ol>
<li><a href="https://github.com/gmarik/Vundle.vim">Vbundle</a> 这个可以很方便的安装和管理Vim的插件。最好是也装上git，因为很多插件托管在github上</li>
<li><a href="http://www.vim.org/scripts/script.php?script_id=2899">txtbrowser</a> 高效处理纯文本,提供快速的搜索和打开URL等功能，支持Email的格式等</li>
<li><a href="https://github.com/scrooloose/nerdtree">nerdtree</a> 非常好的目录浏览的插件，功能强大</li>
<li><a href="https://github.com/kien/ctrlp.vim">ctrlp</a> 文件和buffer的模糊查询</li>
<li><a href="https://github.com/tpope/vim-surround">vim-surround</a> 引号，括号等操作，非常方便</li>
</ol>


<h2>编程</h2>

<ol>
<li><a href="https://github.com/klen/python-mode">pythonmode</a> python必备</li>
<li><a href="https://github.com/vim-debug.vim">vim-debug</a> 支持python 和php debug</li>
<li><a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a> git的插件可以在Vim中执行git命令，非常方便, 类似的有git-vim</li>
<li><a href="www.vim.org/script.php?script_id=31">a.vim</a>在头文件和cpp,c文件中切换</li>
<li><a href="https://github.com/Shougo/neocomplcache.vim">neocomplcache.vim</a> 强大的自动补全插件</li>
<li><a href="https://github.com/scrooloose/syntastic">syntastic</a> Python和其它多种语言的语法检查</li>
</ol>


<h2>样式</h2>

<ol>
<li><a href="https://github.com/bling/vim-airline">vim-airline</a>让vim的用户体验更好</li>
<li><a href="http://files.werx.dk/wombat.vim">Wombat</a>一种样式</li>
</ol>


<!-- more -->


<figure class='code'><figcaption><span>_vimrc的配置</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">nocompatible</span> <span class="c">&quot;去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限</span>
</span><span class='line'><span class="k">filetype</span> off                  <span class="c">&quot; required</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; set the runtime path to include Vundle and initialize</span>
</span><span class='line'><span class="k">set</span> <span class="nb">rtp</span><span class="p">+=~</span><span class="sr">/.vim/</span>bundle<span class="sr">/vundle/</span>
</span><span class='line'><span class="k">let</span> <span class="nb">path</span><span class="p">=</span><span class="s1">&#39;$VIMFILES/bundle/&#39;</span>
</span><span class='line'><span class="k">call</span> vundle#begin<span class="p">(</span><span class="nb">path</span><span class="p">)</span>
</span><span class='line'><span class="c">&quot; alternatively, pass a path where Vundle should install plugins</span>
</span><span class='line'><span class="c">&quot;call vundle#begin(&#39;~/some/path/here&#39;)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; let Vundle manage Vundle, required</span>
</span><span class='line'>Plugin <span class="s1">&#39;gmarik/Vundle.vim&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; The following are examples of different formats supported.</span>
</span><span class='line'><span class="c">&quot; Keep Plugin commands between vundle#begin/end.</span>
</span><span class='line'><span class="c">&quot; plugin on GitHub repo</span>
</span><span class='line'>Plugin <span class="s1">&#39;tpope/vim-fugitive&#39;</span>
</span><span class='line'><span class="c">&quot; Python and PHP Debugger</span>
</span><span class='line'>Bundle <span class="s1">&#39;fisadev/vim-debug.vim&#39;</span>
</span><span class='line'><span class="c">&quot; Better file browser</span>
</span><span class='line'>Bundle <span class="s1">&#39;scrooloose/nerdtree&#39;</span>
</span><span class='line'><span class="c">&quot; Code commenter</span>
</span><span class='line'>Bundle <span class="s1">&#39;scrooloose/nerdcommenter&#39;</span>
</span><span class='line'><span class="c">&quot; Class/module browser</span>
</span><span class='line'>Bundle <span class="s1">&#39;majutsushi/tagbar&#39;</span>
</span><span class='line'><span class="c">&quot; Code and files fuzzy finder</span>
</span><span class='line'>Bundle <span class="s1">&#39;kien/ctrlp.vim&#39;</span>
</span><span class='line'><span class="c">&quot; Extension to ctrlp, for fuzzy command finder</span>
</span><span class='line'>Bundle <span class="s1">&#39;fisadev/vim-ctrlp-cmdpalette&#39;</span>
</span><span class='line'><span class="c">&quot; Git integration</span>
</span><span class='line'>Bundle <span class="s1">&#39;motemen/git-vim&#39;</span>
</span><span class='line'><span class="c">&quot; Tab list panel</span>
</span><span class='line'>Bundle <span class="s1">&#39;kien/tabman.vim&#39;</span>
</span><span class='line'><span class="c">&quot; Airline</span>
</span><span class='line'>Bundle <span class="s1">&#39;bling/vim-airline&#39;</span>
</span><span class='line'><span class="c">&quot; Terminal Vim with 256 colors colorscheme</span>
</span><span class='line'>Bundle <span class="s1">&#39;fisadev/fisa-vim-colorscheme&#39;</span>
</span><span class='line'><span class="c">&quot; Consoles as buffers</span>
</span><span class='line'>Bundle <span class="s1">&#39;rosenfeld/conque-term&#39;</span>
</span><span class='line'><span class="c">&quot; Pending tasks list</span>
</span><span class='line'><span class="c">&quot;Bundle &#39;fisadev/FixedTaskList.vim&#39;</span>
</span><span class='line'><span class="c">&quot; Surround</span>
</span><span class='line'>Bundle <span class="s1">&#39;tpope/vim-surround&#39;</span>
</span><span class='line'><span class="c">&quot; Autoclose</span>
</span><span class='line'>Bundle <span class="s1">&#39;Townk/vim-autoclose&#39;</span>
</span><span class='line'><span class="c">&quot; Indent text object</span>
</span><span class='line'>Bundle <span class="s1">&#39;michaeljsmith/vim-indent-object&#39;</span>
</span><span class='line'><span class="c">&quot; Python mode (indentation, doc, refactor, lints, code checking, motion and</span>
</span><span class='line'><span class="c">&quot; operators, highlighting, run and ipdb breakpoints)</span>
</span><span class='line'>Bundle <span class="s1">&#39;klen/python-mode&#39;</span>
</span><span class='line'><span class="c">&quot; Better autocompletion</span>
</span><span class='line'>Bundle <span class="s1">&#39;Shougo/neocomplcache.vim&#39;</span>
</span><span class='line'><span class="c">&quot; Automatically sort python imports</span>
</span><span class='line'>Bundle <span class="s1">&#39;fisadev/vim-isort&#39;</span>
</span><span class='line'><span class="c">&quot; Drag visual blocks arround</span>
</span><span class='line'>Bundle <span class="s1">&#39;fisadev/dragvisuals.vim&#39;</span>
</span><span class='line'><span class="c">&quot; Window chooser</span>
</span><span class='line'><span class="c">&quot;Bundle &#39;t9md/vim-choosewin&#39;</span>
</span><span class='line'><span class="c">&quot; Python and other languages code checker</span>
</span><span class='line'>Bundle <span class="s1">&#39;scrooloose/syntastic&#39;</span>
</span><span class='line'><span class="c">&quot; Search results counter</span>
</span><span class='line'>Bundle <span class="s1">&#39;IndexedSearch&#39;</span>
</span><span class='line'><span class="c">&quot; XML/HTML tags navigation</span>
</span><span class='line'>Bundle <span class="s1">&#39;matchit.zip&#39;</span>
</span><span class='line'><span class="c">&quot; Gvim colorscheme</span>
</span><span class='line'>Bundle <span class="s1">&#39;Wombat&#39;</span>
</span><span class='line'><span class="c">&quot; Yank history navigation</span>
</span><span class='line'>Bundle <span class="s1">&#39;YankRing.vim&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; All of your Plugins must be added before the following line</span>
</span><span class='line'><span class="k">call</span> vundle#<span class="k">end</span><span class="p">()</span>            <span class="c">&quot; required</span>
</span><span class='line'><span class="k">filetype</span> plugin indent <span class="k">on</span>    <span class="c">&quot; required</span>
</span></code></pre></td></tr></table></div></figure>


<p>暂时先介绍这么多，后续更新</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[buildbot tips]]></title>
    <link href="http://sweetdark.github.com/blog/2014/08/24/buildbot-tips/"/>
    <updated>2014-08-24T22:45:16+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/08/24/buildbot-tips</id>
    <content type="html"><![CDATA[<h2>目录</h2>

<ol>
<li>命令最终执行的代码的目录是 build配置的slave builddir(没有则默认是slave的name) + step的workdir</li>
</ol>


<h2>Scheduler</h2>

<ol>
<li>Dependant Scheduler只依赖于上层的Scheduler。当上层的Scheduler成功时，才会执行，而不关心其它的改变。须要注意的是如果ChangeSourcerevision为None，那这意味着Head revision。如果在上流的Scheduler执行成功后，触发Dependant的期间，ChangeSource发生了改变，那么Dependant会取最新的Head revision。 如果想要更灵活的方式，可以考虑用Triggerable Scheduler的方式</li>
</ol>


<h2>Steps</h2>

<ol>
<li>steps中的SVN的checkout和update会先删掉checkout目录，然后重新checkout一份代码。所以不要在这个目录下放一些非SVN服务器上的东西。</li>
<li>steps中可以获得build设置的property，可以通过这些property来执行相应的代码。更灵活的方式是用render</li>
<li>steps可以设置Property来给下一个steps用，使用SetProperty(property=&ldquo;&rdquo;, value=&ldquo;&rdquo;) values可以是string和 Interpolate对象,这样就可以把一些steps根据property来执行</li>
</ol>


<figure class='code'><figcaption><span>例子</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">buildbot.steps.vstudio</span> <span class="kn">import</span> <span class="n">vc8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">buildbot.process.properties</span> <span class="kn">import</span> <span class="n">Property</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">buildbot.process.factory</span> <span class="kn">import</span> <span class="n">BuildFactory</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">buildbot.steps.master</span> <span class="kn">import</span> <span class="n">SetProperty</span>
</span><span class='line'>
</span><span class='line'><span class="n">vc</span> <span class="o">=</span> <span class="n">vc8</span><span class="p">(</span><span class="n">projectfile</span><span class="o">=</span><span class="s">&quot;youproject.sln&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">mode</span><span class="o">=</span><span class="s">&quot;build&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">config</span><span class="o">=</span><span class="n">Property</span><span class="p">(</span><span class="s">&quot;buildconfig&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">build</span> <span class="o">=</span> <span class="n">BuildFactory</span><span class="p">()</span>
</span><span class='line'><span class="n">build</span><span class="o">.</span><span class="n">addStep</span><span class="p">(</span><span class="n">SetProperty</span><span class="p">(</span><span class="nb">property</span><span class="o">=</span><span class="s">&quot;buildconfig&quot;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;release&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">build</span><span class="o">.</span><span class="n">addStep</span><span class="p">(</span><span class="n">vc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[buildbot的搭建总结]]></title>
    <link href="http://sweetdark.github.com/blog/2014/07/23/buildbot-build/"/>
    <updated>2014-07-23T18:56:27+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/07/23/buildbot-build</id>
    <content type="html"><![CDATA[<p><strong>PlatForm</strong>                    <em>win32 64bit</em>
<strong>python version</strong>              <em>python2.7 32bit</em></p>

<h2>入门</h2>

<p>如果是Linux系统的<a href="http://docs.buildbot.net/current/tutorial/firstrun.html">FirstRun</a>，可以按照官方这个步骤去做。官方说Windows也差不多，但在我的环境下有问题，（我安装了Cygwin，在Cygwin环境下运行的）。 virtualenv  这个的easy_install太旧了。我用sandbox运行 easy_install buildbot总是提示缺少库。更新easy_install 也没用。 关于用easy_install -U setuptool的产生的Perssion Denied问题可以看<a href="http://stackoverflow.com/questions/17601020/easy-install-exe-permission-denied-on-windows-8">这里</a></p>

<p>Windows 下的安装步骤。参考<a href="http://trac.buildbot.net/wiki/RunningBuildbotOnWindows">这里</a> 下面说一下我遇到的问题。
我的建议是都安装x86的版本。python  PyWin32版本。 有一些需要编译的python库很麻烦如pysqlite 。python2.7的大部分库是用VS2008编译的，可以去下个VS2008的Express。如果是Windows 64bit出现问题参考<a href="http://stackoverflow.com/questions/4676728/value-error-trying-to-install-python-for-windows-extensions">这里</a>
因为我装了好几个版本的VS。我的问题弄了好久没解决。还好网上有编译好的版本。
<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pywin32">http://www.lfd.uci.edu/~gohlke/pythonlibs/#pywin32</a> 我在这里下了个pysqlite的exe.
如果下载的是.zip文件，则解压，然后dos进入该目录，执行<code>python setup.py install</code>命令即可
也在网上找了个OpenSSL windwos版的下载安装好了。
大部分需要的组件我都上传的网盘了地址<a href="http://pan.baidu.com/s/1dD7tlUp">http://pan.baidu.com/s/1dD7tlUp</a>
检查是否buildbot和buildbot-slave是否安装好了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>buildbot --version
</span><span class='line'>buildslave --version</span></code></pre></td></tr></table></div></figure>


<p>如果一切正常那可以按照<a href="http://docs.buildbot.net/current/tutorial/firstrun.html">FirstRun</a> 这里后面的继续去做了。</p>

<!--more-->


<h2>Creating a master</h2>

<p>At the terminal, type:</p>

<p>buildbot create-master master
mv master/master.cfg.sample master/master.cfg
Now start it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>buildbot start master
</span><span class='line'>tail -f master/twistd.log</span></code></pre></td></tr></table></div></figure>


<p>You will now see all of the log information from the master in this terminal. You should see lines like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2011-12-04 10:04:40-0600 [-] Starting factory &lt;buildbot.status.web.baseweb.RotateLogSite instance at 0x2e36638&gt;
</span><span class='line'>2011-12-04 10:04:40-0600 [-] Setting up http.log rotating 10 files of 10000000 bytes each
</span><span class='line'>2011-12-04 10:04:40-0600 [-] WebStatus using (/home/dustin/tmp/buildbot/master/public_html)
</span><span class='line'>2011-12-04 10:04:40-0600 [-] removing 0 old schedulers, updating 0, and adding 1
</span><span class='line'>2011-12-04 10:04:40-0600 [-] adding 1 new changesources, removing 0
</span><span class='line'>2011-12-04 10:04:40-0600 [-] gitpoller: using workdir '/home/dustin/tmp/buildbot/master/gitpoller-workdir'
</span><span class='line'>2011-12-04 10:04:40-0600 [-] gitpoller: initializing working dir from git://github.com/buildbot/pyflakes.git
</span><span class='line'>2011-12-04 10:04:40-0600 [-] configuration update complete
</span><span class='line'>2011-12-04 10:04:41-0600 [-] gitpoller: checking out master
</span><span class='line'>2011-12-04 10:04:41-0600 [-] gitpoller: finished initializing working dir from git://github.com/buildbot/pyflakes.git at rev 1a4af6ec1dbb724b884ea14f439b272f30439e4d</span></code></pre></td></tr></table></div></figure>


<h2>Creating a slave</h2>

<p>Open a new terminal and enter the same sandbox you created before:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd
</span><span class='line'>cd tmp/buildbot
</span><span class='line'>source sandbox/bin/activate
</span><span class='line'>Install the buildslave command:</span></code></pre></td></tr></table></div></figure>


<p>easy_install buildbot-slave
Now, create the slave:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>buildslave create-slave slave localhost:9989 example-slave pass</span></code></pre></td></tr></table></div></figure>


<p>The user:host pair, username, and password should be the same as the ones in master.cfg; verify this is the case by looking at the section for c[&lsquo;slaves&rsquo;] and c[&lsquo;slavePortnum&rsquo;]:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat master/master.cfg</span></code></pre></td></tr></table></div></figure>


<p>Now, start the slave:</p>

<p>buildslave start slave
Check the slave&rsquo;s log:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tail -f slave/twistd.log</span></code></pre></td></tr></table></div></figure>


<p>You should see lines like the following at the end of the worker log:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2009-07-29 20:59:18+0200 [Broker,client] message from master: attached
</span><span class='line'>2009-07-29 20:59:18+0200 [Broker,client] SlaveBuilder.remote_print(buildbot-full): message from master: attached
</span><span class='line'>2009-07-29 20:59:18+0200 [Broker,client] sending application-level keepalives every 600 seconds
</span><span class='line'>Meanwhile, in the other terminal, in the master log, if you tail the log you should see lines like this:
</span><span class='line'>
</span><span class='line'>2011-03-13 18:46:58-0700 [Broker,1,127.0.0.1] slave 'example-slave' attaching from IPv4Address(TCP, '127.0.0.1', 41306)
</span><span class='line'>2011-03-13 18:46:58-0700 [Broker,1,127.0.0.1] Got slaveinfo from 'example-slave'
</span><span class='line'>2011-03-13 18:46:58-0700 [Broker,1,127.0.0.1] bot attached
</span><span class='line'>2011-03-13 18:46:58-0700 [Broker,1,127.0.0.1] Buildslave example-slave attached to runtests</span></code></pre></td></tr></table></div></figure>


<p>You should now be able to go to <a href="http://localhost:8010,">http://localhost:8010,</a> where you will see a web page similar to:
<img src="http://docs.buildbot.net/current/_images/index.png"></p>

<p>Click on the Waterfall Display link and you get this:</p>

<p><img src="http://docs.buildbot.net/current/_images/waterfall-empty.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vs编译错误及解决办法]]></title>
    <link href="http://sweetdark.github.com/blog/2014/07/17/vs-error-collection/"/>
    <updated>2014-07-17T18:18:48+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/07/17/vs-error-collection</id>
    <content type="html"><![CDATA[<h3>error C2220: 警告被视为错误 &ndash; 没有生成“object”文件</h3>

<p>这种错误的原因是：原因是该文件的代码页为英文，而我们系统中的代码页为中文。
解决方案：
1. 在VS2010以后在文件->高级保存选项，设置UTF-8的格式，重新保存一次。 或者用其它的程序保存成UTF-8的格式。</p>

<ol>
<li>如果上述不能去掉错误，还可以点击项目，右击选择属性->配置属性->c/c++&ndash;>常规，将“警告视为错误”的选项改为“否”。就可以！</li>
</ol>


<h3>error C2143: 语法错误 : 缺少“;”(在“类型”的前面)</h3>

<p>C99之前都要求，函数内的局部变量要在开始处定义。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">f</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;j is %d&quot;</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这可能出现在c文件编译的时候，VS2012都不完全支持C99。须要调整一下代码。把函数内的局部变量放到函数开头去定义。或者改成cpp后缀的文件</p>

<p>VS2010之后开始支持C99，所以在VS2008之前如果出现 找不到 stdint.h 文件的话。可以升级到VS2010之后。</p>

<h3>LNK2001: 无法解析的外部符号 __iob 问题的解决方法</h3>

<ol>
<li><p>缺少libc.lib
解决这个问题的方法是去掉链接到libc.lib，具体地点：项目-〉属性-〉配置属性-〉链接器-〉忽略特定库。</p></li>
<li><p>unresolved external symbol <code>__iob</code>
这个<code>__iob</code>找不到的问题费了我大部分的时间。跟踪到stdio.h文件，发现那里有个关于iob的宏，终于搞定。加入一句话到.cpp文件中：<code>extern "C" { FILE _iob[3] = {__iob_func()[0], __iob_func()[1], __iob_func()[2]}; }</code></p></li>
<li><p>NULL iterator
STL已经不能有NULL迭代器这么一说了，想想也对，在NULL迭代器上进行++或&mdash;之类的是不成立的。</p></li>
<li><p>结构体默认函数
在VC6中，结构体的默认运算符==或者&lt;之类的如果不实现也可以作为STL元素放入list等容器中。但VC8不行了，因为它已经不再为结构体生成缺省的操作符函数。</p></li>
</ol>


<p>该错误主要是由于静态库在VC6编译而主程序在VC2005编译，大家用的CRT不同。解决办法，代码中增加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="kt">FILE</span> <span class="n">_iob</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">__iob_func</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span> <span class="n">__iob_func</span><span class="p">()[</span><span class="mi">1</span><span class="p">],</span> <span class="n">__iob_func</span><span class="p">()[</span><span class="mi">2</span><span class="p">]};</span>
</span></code></pre></td></tr></table></div></figure>


<p>此错误的产生根源：
在VC6的stdio.h之中有如下定义</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">_CRTIMP</span> <span class="k">extern</span> <span class="kt">FILE</span> <span class="n">_iob</span><span class="p">[];</span>
</span><span class='line'><span class="cp">#define stdin (&amp;_iob[0])</span>
</span><span class='line'><span class="cp">#define stdout (&amp;_iob[1])</span>
</span><span class='line'><span class="cp">#define stderr (&amp;_iob[2])</span>
</span></code></pre></td></tr></table></div></figure>


<p>stdin、stdout、stderr是通过查<em>iob数组得到的。所以，VC6编译的程序、静态库只要用到了printf、scanf之类的函数，都要链接</em>iob数组。</p>

<p>而在vc2005中，stdio.h中变成了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">_CRTIMP</span> <span class="kt">FILE</span> <span class="o">*</span> <span class="kr">__cdecl</span> <span class="nf">__iob_func</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="cp">#define stdin (&amp;__iob_func()[0])</span>
</span><span class='line'><span class="cp">#define stdout (&amp;__iob_func()[1])</span>
</span><span class='line'><span class="cp">#define stderr (&amp;__iob_func()[2])</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>_iob</code>数组不再是显式的暴露出来了，需要调用<em><em>iob_func()函数获得。所以vc6的静态库链接VC2005的C运行库就会找不到</em>iob数组.
通过重新定义
<code>FILE _iob[3] = {__iob_func()[0], __iob_func()[1], __iob_func()[2]};</code>
就把vc6需要用到的</em>iob数组搞出来了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JNI Manual GetFieldID]]></title>
    <link href="http://sweetdark.github.com/blog/2014/07/09/jni-manual/"/>
    <updated>2014-07-09T21:32:08+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/07/09/jni-manual</id>
    <content type="html"><![CDATA[<p>在JNI中要访问结构体中的字段，首先要获得这个字段的FieldID。然后通过Get<Type>Field和Set<Type>Field来访问和修改。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//C的接口</span>
</span><span class='line'><span class="n">jfieldID</span> <span class="nf">GetFieldID</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clazz</span><span class="p">,</span>
</span><span class='line'>      <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">sig</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//C++的接口</span>
</span><span class='line'><span class="n">jfieldID</span> <span class="nf">GetFieldID</span><span class="p">(</span><span class="n">jclass</span> <span class="n">clazz</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">sig</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>描述</strong></p>

<blockquote><p>返回一个字段的FieldID或者为NULL（如果操作失败），这个字段是用字段和描述串来指定的。然后把FieldID作为Get<Type>Field和Set<Type>Field的参数来访问这个字段。这个字段必须是可以通过clazz来访问的. 当然这个字段可以是clazz类的父类, clazz必须是非空的。
GetFieldID会初始化未初始化的类
GetFieldID不可以用来获取数组的长度。应该用GetArrayLength来获取数组的长度。</p></blockquote>

<p><strong>异常</strong></p>

<blockquote><p>NoSuchFiledError: 如果指定的字段没有找到
ExceptionInInitializeError: 如果类初始化失败。
OutOfMemoryError：系统内存不够</p></blockquote>

<figure class='code'><figcaption><span>Java结构体Person.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ID</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">native</span> <span class="n">Person</span> <span class="nf">OnePerson</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>本地方法的实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jobject</span> <span class="n">JNICALL</span> <span class="nf">Java_Person_OnePerson</span>
</span><span class='line'>  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse 工具]]></title>
    <link href="http://sweetdark.github.com/blog/2014/07/09/eclipse-tools/"/>
    <updated>2014-07-09T19:33:01+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/07/09/eclipse-tools</id>
    <content type="html"><![CDATA[<h2>配置Javap工具</h2>

<p>在Eclipse的Menu中打开Run->External Tools->External Tools Configurations
添加一个新的项。
<img src="https://farm3.staticflickr.com/2928/14617040064_088658d740_o.png">
<img src="https://farm3.staticflickr.com/2912/14639067183_6776a117b8_b.jpg">
javap这个工具可以用来输出java类 对应jni的描述。
<img src="http://farm3.staticflickr.com/2939/14619183735_dfb1841c44_b.jpg">
把Signature 后面的字符串拷贝就行了（<strong>后面的分号也要拷贝</strong>）。这样可以在GetField中使用了。
env->GetField(cls, &ldquo;fieldName&rdquo;, &ldquo;Signature&rdquo;);
javah的工具配置类似。</p>

<h2>定位文件目录</h2>

<p>跟VS一样，VS在标签中右键打开文件目录一样。Eclipse须要配置。也是在External Tool中。
新建一个
<img src="http://farm3.staticflickr.com/2931/14618685852_2340a8acab_b.jpg">
Build选项下面就不要勾上build before launch了。</p>

<p><a href="http://www.open-open.com/bbs/view/1320934157953/">Eclipse快捷键 10个最有用的快捷键</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Andriod ndk error local reference table overflow Max 512]]></title>
    <link href="http://sweetdark.github.com/blog/2014/07/09/local-reference-table-overflow/"/>
    <updated>2014-07-09T12:57:43+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/07/09/local-reference-table-overflow</id>
    <content type="html"><![CDATA[<h1>引言</h1>

<p>在Android开发中，常会遇到 local reference table overflow的错误。原因是从java代码进入jni层的本地代码调用时，Dalvik就会创建一张local reference表来存储local reference， 这张表的表项数有最大限制。一般为512个。当表项数超过最大值限制时，Dalvik就会抛出异常。</p>

<figure class='code'><figcaption><span>下面这段代码就会导致溢出</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">jclass</span> <span class="n">strinClass</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">800</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">stringClass</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="s">&quot;java/lang/String&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">.....</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>什么是Local References？</h1>

<p>大多数的JNI函数都创建了Local reference（以下简称为<em>LR</em>）。 比如 NewObject, NewString&hellip;. 和 FindClass 等。</p>

<p>一个<em>LR</em>只有在创建它的的一个局部作用域内有效。在超出这个作用域之后，就可能会被释放。 所有的<em>LR</em>在本地函数调用时创建的，在这个本地函数返回时就会被释放。</p>

<p>你不能把一个Local reference 保存在静态变量中，然后在后面继续调用，这是不安全的。</p>

<figure class='code'><figcaption><span>错误的例子</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* This code is illegal */</span>
</span><span class='line'><span class="n">jstring</span>
</span><span class='line'><span class="nf">MyNewString</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jchar</span> <span class="o">*</span><span class="n">chars</span><span class="p">,</span> <span class="n">jint</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">jclass</span> <span class="n">stringClass</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">jmethodID</span> <span class="n">cid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">jcharArray</span> <span class="n">elemArr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">jstring</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">stringClass</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">stringClass</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="n">env</span><span class="p">,</span>
</span><span class='line'>                                        <span class="s">&quot;java/lang/String&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">stringClass</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span> <span class="cm">/* exception thrown */</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/* It is wrong to use the cached stringClass here,</span>
</span><span class='line'><span class="cm">       because it may be invalid. */</span>
</span><span class='line'>    <span class="n">cid</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetMethodID</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">stringClass</span><span class="p">,</span>
</span><span class='line'>                              <span class="s">&quot;&lt;init&gt;&quot;</span><span class="p">,</span> <span class="s">&quot;([C)V&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">elemArr</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewCharArray</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewObject</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">stringClass</span><span class="p">,</span> <span class="n">cid</span><span class="p">,</span> <span class="n">elemArr</span><span class="p">);</span>
</span><span class='line'>    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">elemArr</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span>
</span><span class='line'><span class="nf">Java_C_f</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">c_str</span> <span class="o">=</span> <span class="p">...;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">MyNewString</span><span class="p">(</span><span class="n">c_str</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Java 中</span>
</span><span class='line'><span class="p">...</span> <span class="o">=</span> <span class="n">C</span><span class="p">.</span><span class="n">f</span><span class="p">();</span>
</span><span class='line'><span class="p">...</span> <span class="o">=</span> <span class="n">C</span><span class="p">.</span><span class="n">f</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>假设我调用了两次Java_C_f。 其中调用了MyNewString， MyNewString的想法是把stringClass这个<em>LR</em> 初始化一次后保存起来，下次可以继续用。但根据JNI的规则。在MyNewString返回时，所有的<em>LR</em>都会被释放。所以第二次调用时stringClass就是Invalid的。</p>

<p>虽然VM会在本地函数返回时，释放所有的<em>LR</em>，但我们也可以显示的控制<em>LR</em>的释放。<em>LR</em>引用的对象只有在，<em>LR</em>无效的时候才会被GC回收，在MyNewString函数中调用的DeleteLocalRef 释放中间的变量elemArr，这样GC可以立即回收这个<em>LR</em> 不然elemArr这个<em>LR</em>会等到本地函数MyNewString返回时才被回收。</p>

<p><em>LR</em>只能在创建它的线程中使用，在其它的线程中使用它是错误的。所以用一个全局变量保存在其它线程中用是不可行的。</p>

<!--more-->


<h2>释放引用</h2>

<figure class='code'><figcaption><span>错误的例子</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//1.FindClass </span>
</span><span class='line'>
</span><span class='line'><span class="c1">//例如，</span>
</span><span class='line'>
</span><span class='line'><span class="n">jclass</span> <span class="n">ref</span><span class="o">=</span> <span class="p">(</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="s">&quot;java/lang/String&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">ref</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="mf">2.</span><span class="n">NewString</span><span class="o">/</span> <span class="n">NewStringUTF</span><span class="o">/</span><span class="n">NewObject</span><span class="o">/</span><span class="n">NewByteArray</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//例如，</span>
</span><span class='line'>
</span><span class='line'><span class="n">jstring</span>     <span class="p">(</span><span class="o">*</span><span class="n">NewString</span><span class="p">)(</span><span class="n">JNIEnv</span><span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="n">jchar</span><span class="o">*</span><span class="p">,</span> <span class="n">jsize</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="n">jchar</span><span class="o">*</span> <span class="p">(</span><span class="o">*</span><span class="n">GetStringChars</span><span class="p">)(</span><span class="n">JNIEnv</span><span class="o">*</span><span class="p">,</span> <span class="n">jstring</span><span class="p">,</span> <span class="n">jboolean</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>        <span class="p">(</span><span class="o">*</span><span class="n">ReleaseStringChars</span><span class="p">)(</span><span class="n">JNIEnv</span><span class="o">*</span><span class="p">,</span> <span class="n">jstring</span><span class="p">,</span> <span class="k">const</span> <span class="n">jchar</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">jstring</span>     <span class="p">(</span><span class="o">*</span><span class="n">NewStringUTF</span><span class="p">)(</span><span class="n">JNIEnv</span><span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="p">(</span><span class="o">*</span><span class="n">GetStringUTFChars</span><span class="p">)(</span><span class="n">JNIEnv</span><span class="o">*</span><span class="p">,</span> <span class="n">jstring</span><span class="p">,</span> <span class="n">jboolean</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>        <span class="p">(</span><span class="o">*</span><span class="n">ReleaseStringUTFChars</span><span class="p">)(</span><span class="n">JNIEnv</span><span class="o">*</span><span class="p">,</span> <span class="n">jstring</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">ref</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="mf">3.</span> <span class="n">GetObjectField</span><span class="o">/</span><span class="n">GetObjectClass</span><span class="o">/</span><span class="n">GetObjectArrayElement</span>
</span><span class='line'>
</span><span class='line'><span class="n">jclass</span> <span class="n">ref</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetObjectClass</span><span class="p">(</span><span class="n">robj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">ref</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="mf">4.</span><span class="n">GetByteArrayElements</span>
</span><span class='line'>
</span><span class='line'><span class="n">jbyte</span><span class="o">*</span> <span class="n">array</span><span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetByteArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="n">jarray</span><span class="p">,</span><span class="o">&amp;</span><span class="n">isCopy</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseByteArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="n">jarray</span><span class="p">,</span><span class="n">array</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">input</span> <span class="o">=</span><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="n">jinput</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">isCopy</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="n">jinput</span><span class="p">,</span><span class="n">input</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ol>
<li><p><a href="http://journals.ecs.soton.ac.uk/java/tutorial/native1.1/implementing/refs.html">Local and Global References</a></p></li>
<li><p><a href="http://www.soi.city.ac.uk/~kloukin/IN2P3/material/jni.pdf">The Java ™  Native Interface Programmer’s Guide and Specification</a></p></li>
<li><p><a href="http://mysuperbaby.iteye.com/blog/1603817">http://mysuperbaby.iteye.com/blog/1603817</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多个github用户配置SSH KEY的切换]]></title>
    <link href="http://sweetdark.github.com/blog/2014/07/05/config-mutil-ssh-key-user/"/>
    <updated>2014-07-05T17:01:53+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/07/05/config-mutil-ssh-key-user</id>
    <content type="html"><![CDATA[<p>如果你在github有多个帐户。那要在不同的帐户之间切换SSH Key。可以config来配置SSH key
假设你有两个private key文件为 id_rsa1 和 id_rsa2
生成ssh key的命令如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen -t rsa -C "youremail"</span></code></pre></td></tr></table></div></figure>


<p>在git bash下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/.ssh
</span><span class='line'>touch config
</span><span class='line'>#打开config 如果你用的是vim 可以 vim config 
</span></code></pre></td></tr></table></div></figure>


<p>打开后编辑如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host firstkey 
</span><span class='line'>  HostName github.com
</span><span class='line'>  User git
</span><span class='line'>  IdentityFile ~/.ssh/id_rsa1
</span><span class='line'>Host secondkey
</span><span class='line'>  HostName github.com
</span><span class='line'>  User git
</span><span class='line'>  IdentityFile ~/.ssh/id_rsa2</span></code></pre></td></tr></table></div></figure>


<p><strong>注意 Host是你的 git的SSH地址对应的地址。 也就是说 git@firstkey:yourname/your.git  这样就会找到Host 为firstkey的key了</strong>
只需要把原先的<a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#58;&#103;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#x62;&#46;&#x63;&#111;&#x6d;">&#103;&#105;&#x74;&#64;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#x6d;</a> 改为git@firstkey 就可以了,更改远程地址的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote set-url [name] [url]
</span><span class='line'>git remote set-url --push [name] [url]</span></code></pre></td></tr></table></div></figure>


<p>还要把key加入到ssh-agent中，命令如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-add ~/.ssh/id_rsa1
</span><span class='line'>ssh-add ~/.ssh/id_rsa2
</span><span class='line'>#该命令如果报错：Could not open a connection to your authentication agent.无法连接到ssh agent
</span><span class='line'>#可先执行
</span><span class='line'>eval "ssh-agent -s" 或者 ssh-agent bash</span></code></pre></td></tr></table></div></figure>


<p>例子：</p>

<figure class='code'><figcaption><span>在同一机器不同目录下克隆远程同一个repo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git@firstkey:xxx.git
</span><span class='line'>
</span><span class='line'>git clone git@secondkey:xxx.git
</span></code></pre></td></tr></table></div></figure>


<p>上面的两条clone命令，虽然关联到同一个repo，却是通过不同ssh连接，当然也是不同的git账号。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何部署已有的octopress Blog]]></title>
    <link href="http://sweetdark.github.com/blog/2014/07/03/how-to-install-octproess/"/>
    <updated>2014-07-03T17:06:14+08:00</updated>
    <id>http://sweetdark.github.com/blog/2014/07/03/how-to-install-octproess</id>
    <content type="html"><![CDATA[<p><strong>注意 你的系统的环境变量一定不要有中文, 如果Rake中提示 invalid byte sequence in UTF-8 (ArgumentError) 请检查你的所有的系统环境变量</strong></p>

<ol>
<li>下载和安装git， 把git安装目录的bin和cmd文件目录加到path中。</li>
<li>下载和安装ruby1.9.3，安装时可以勾选 加到path中。 安装完成后可以通过ruby &mdash;version来测试是否安装成功</li>
<li>去网上下载一个<a href="https://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe">DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe</a> 解压到一个目录如E:/Devkit。dos cd 到这个目录。执行如下命令:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby dk.rb init 
</span><span class='line'>ruby dk.rb install</span></code></pre></td></tr></table></div></figure>


<p><strong>
安装之后，要把这个 E:/Devkit/mingw/bin这个目录加到你的系统环境path，如果已经安装了MinGw并且在path中配置好的，要把这个mingw拷贝过去覆盖掉。
</strong></p>

<p>博客的代码高亮需要python环境的支持。去下个python2.7安装。python 安装完成后。执行下面的命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>easy_install pygments</span></code></pre></td></tr></table></div></figure>


<h2>设置本地环境</h2>

<p>为了支持中文UTF-8编码，在Windows的环境变量中增加下面的选项。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LANG = zh_CN.UTF-8
</span><span class='line'>LC_ALL = zh_CN.UTF-8</span></code></pre></td></tr></table></div></figure>


<ul>
<li>配置git</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global user.name "yourname"
</span><span class='line'>git config --global user.email "youremail"</span></code></pre></td></tr></table></div></figure>


<p>更新gem的更新源，ruby的官方网站经常被和谐。换成国内的更新源，这样速度就快多了，变更如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem sources -a http://ruby.taobao.org/
</span><span class='line'>gem sources -r http://rubygems.org/</span></code></pre></td></tr></table></div></figure>


<h2>下载并配置Blog</h2>

<p>在某个目录下，DOS命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:sweetdark/sweetdark.github.com.git sweetdark
</span><span class='line'>
</span><span class='line'>如果clone下来只有master分支，那可以新建个source分支，
</span><span class='line'>git checkout -b source 
</span><span class='line'>这个命令会新建source分支并切换到source分支。
</span><span class='line'>再执行git pull origin source 把远程的github上source分支拉到本地source分支。
</span><span class='line'>
</span><span class='line'>cd sweetdark
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>配置好之后，DOS cd 到sweetdark目录下就可以写blog了。请确保你在source 分支下，通过git branch 命令可以查看。你在哪个分支下。 git checkout source 可以切换到source分支</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["title"] #创建个新的文章，在source/_post目录下，打开它，就可以编辑了。
</span><span class='line'>
</span><span class='line'>编辑完保存之后。
</span><span class='line'>rake generate #生成网页
</span><span class='line'>rake preview #预览 打开127.0.0.1:4000 可以看到。
</span><span class='line'>rake deploy #发布
</span><span class='line'>
</span><span class='line'>然后记得提交，须要权限，要ssh的private key。
</span><span class='line'>git add .
</span><span class='line'>git commit -m "your commit message"
</span><span class='line'>git push origin source
</span></code></pre></td></tr></table></div></figure>


<p>git remote -v 命令可以查远程的地址。
<img src="../images/gitremote.png" alt="" />
有不懂的git命令都可以用git command &mdash;help 来查这个command。</p>

<p>为了确保安全不造成混乱，以后每次写blog之前，都要检查，你是否是在source分支下，是否跟服务器上是一致的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout source #切换到source分支
</span><span class='line'>git pull origin source #更新服务器上的内容到本地</span></code></pre></td></tr></table></div></figure>


<h2>注意事项</h2>

<ul>
<li>图片最好是上传到一些可以保存图片的网站上，然后用 octopress 的Image 标签来引用， 相关用法<a href="http://octopress.org/docs/plugins/image-tag/%E3%80%82">http://octopress.org/docs/plugins/image-tag/%E3%80%82</a>
用markdown语法也是可以的，不要写本地的相对路径（如上面的那张图片，会导致在Tag目录下看不到</li>
</ul>


<p>相关的文章
octopress+github 构建blog <a href="http://xuhehuan.com/783.html">在Github上搭建Octopress博客</a></p>

<p><a href="http://octopress.org/">http://octopress.org/</a> 官方文档必看。这里有许多官方的plugin介绍。包括代码高亮，插入网络上图片等。</p>

<p><a href="http://qingbo.net/picky/502-markdown-syntax.html">MarkDonw的语法，文章就是用markdown语法的，很简单。</a></p>

<p>-git的学习</p>

<p>英文10本
<a href="http://sixrevisions.com/resources/git-tutorials-beginners/#comments">http://sixrevisions.com/resources/git-tutorials-beginners/#comments</a></p>

<p>中文</p>

<p><a href="http://gitbook.liuhui998.com/index.html">http://gitbook.liuhui998.com/index.html</a></p>

<p>详解系列
<a href="http://blog.jobbole.com/24379/">http://blog.jobbole.com/24379/</a>
<a href="http://blog.jobbole.com/25808/">http://blog.jobbole.com/25808/</a></p>
]]></content>
  </entry>
  
</feed>
